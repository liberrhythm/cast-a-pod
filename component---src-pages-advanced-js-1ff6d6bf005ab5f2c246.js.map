{"version":3,"sources":["webpack:///component---src-pages-advanced-js-1ff6d6bf005ab5f2c246.js","webpack:///./~/keyword-extractor/index.js","webpack:///./~/keyword-extractor/lib/keyword_extractor.js","webpack:///./~/keyword-extractor/lib/stopwords/da.js","webpack:///./~/keyword-extractor/lib/stopwords/de.js","webpack:///./~/keyword-extractor/lib/stopwords/en.js","webpack:///./~/keyword-extractor/lib/stopwords/es.js","webpack:///./~/keyword-extractor/lib/stopwords/fr.js","webpack:///./~/keyword-extractor/lib/stopwords/gl.js","webpack:///./~/keyword-extractor/lib/stopwords/it.js","webpack:///./~/keyword-extractor/lib/stopwords/nl.js","webpack:///./~/keyword-extractor/lib/stopwords/pl.js","webpack:///./~/keyword-extractor/lib/stopwords/pt.js","webpack:///./~/keyword-extractor/lib/stopwords/ru.js","webpack:///./~/keyword-extractor/lib/stopwords/se.js","webpack:///./~/keyword-extractor/lib/stopwords/stopwords.js","webpack:///./~/underscore.string/lib/underscore.string.js","webpack:///./~/underscore/underscore.js","webpack:///./src/components/advanced-search-result.js","webpack:///./src/components/advanced-search-result.module.css","webpack:///./src/components/advanced-search.js","webpack:///./src/pages/advanced.js"],"names":["webpackJsonp","391","module","exports","__webpack_require__","392","_extract","str","options","_","isEmpty","remove_digits","return_changed_case","return_chained_words","_language","language","_remove_duplicates","remove_duplicates","return_max_ngrams","supported_languages","indexOf","Error","join","text","trim","stripTags","words","split","unchanged_words","low_words","x","length","w","match","replace","digits_match","push","toLowerCase","results","_stopwords","stopwords","_getStopwords","_last_result_word_index","_start_result_word_index","_unbroken_word_chain","y","result_word","change_pos","uniq","item","extract","getStopwords","393","394","395","396","397","398","399","400","401","402","403","404","405","danish","dutch","english","french","galician","german","italian","polish","portuguese","russian","spanish","swedish","522","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","String","boolMatch","s","matchers","i","matcher","down","concat","test","nativeTrim","prototype","nativeTrimRight","trimRight","nativeTrimLeft","trimLeft","parseNumber","source","strRepeat","qty","result","slice","defaultToWhiteSpace","characters","_s","escapeRegExp","escapeChars","lt","gt","quot","amp","apos","reversedEscapeChars","key","sprintf","get_type","variable","Object","toString","call","str_repeat","str_format","cache","hasOwnProperty","arguments","parse","format","parse_tree","argv","arg","k","pad","pad_character","pad_length","cursor","tree_length","node_type","output","fromCharCode","parseInt","toExponential","parseFloat","toFixed","substring","Math","abs","toUpperCase","charAt","fmt","_fmt","arg_names","exec","field_list","replacement_field","field_match","VERSION","isBlank","capitalize","chop","step","RegExp","clean","strip","count","substr","pos","chars","swapCase","c","escapeHTML","m","unescapeHTML","entity","entityCode","splice","howmany","arr","insert","include","needle","args","separator","shift","lines","reverse","startsWith","starts","endsWith","ends","succ","charCodeAt","titleize","camelize","underscored","dasherize","classify","humanize","ltrim","rtrim","truncate","truncateStr","prune","pruneStr","tmpl","template","delimiter","padStr","type","padlen","ceil","floor","lpad","rpad","lrpad","vsprintf","unshift","apply","toNumber","decimals","NaN","numberFormat","number","dec","dsep","tsep","isNaN","parts","fnums","strRight","sep","strRightBack","lastIndexOf","strLeft","strLeftBack","toSentence","array","lastSeparator","serial","a","lastMember","pop","toSentenceSerial","slugify","from","to","regex","index","surround","wrapper","quote","quoteChar","unquote","prop","this","repeat","naturalCmp","str1","str2","cmpRegex","tokens1","tokens2","min","b","num1","num2","levenshtein","prev","value","current","j","toBoolean","trueValues","falseValues","lstrip","rstrip","center","rjust","ljust","contains","q","toBool","undefined","string","523","previousUnderscore","ArrayProto","Array","ObjProto","FuncProto","Function","nativeIsArray","isArray","nativeKeys","keys","nativeBind","bind","obj","_wrapped","createCallback","func","context","argCount","other","collection","accumulator","iteratee","identity","isFunction","isObject","matches","property","each","forEach","map","collect","currentKey","reduceError","reduce","foldl","inject","memo","TypeError","reduceRight","foldr","find","detect","predicate","some","list","filter","select","reject","negate","every","all","any","target","values","invoke","method","isFunc","pluck","where","attrs","findWhere","max","computed","Infinity","lastComputed","shuffle","rand","set","shuffled","random","sample","n","guard","sortBy","criteria","sort","left","right","group","behavior","groupBy","has","indexBy","countBy","sortedIndex","low","high","mid","toArray","size","partition","pass","fail","first","head","take","initial","last","rest","tail","drop","compact","flatten","input","shallow","strict","isArguments","without","difference","unique","isSorted","isBoolean","seen","union","intersection","argsLength","zip","object","idx","range","start","stop","Ctor","bound","self","partial","boundArgs","position","bindAll","memoize","hasher","address","delay","wait","setTimeout","defer","throttle","timeout","previous","later","leading","now","remaining","clearTimeout","trailing","debounce","immediate","timestamp","callNow","wrap","compose","after","times","before","once","pairs","invert","functions","methods","names","extend","pick","omit","defaults","clone","tap","interceptor","eq","aStack","bStack","className","aCtor","constructor","bCtor","isEqual","isString","isElement","nodeType","name","isFinite","isNumber","isNull","isUndefined","noConflict","constant","noop","pair","accum","Date","getTime","escapeMap","&","<",">","\"","'","`","unescapeMap","createEscaper","escaper","testRegexp","replaceRegexp","escape","unescape","idCounter","uniqueId","prefix","id","templateSettings","evaluate","interpolate","noMatch","escapes","\\","\r","\n"," "," ","escapeChar","settings","oldSettings","offset","render","e","data","argument","chain","instance","_chain","mixin","226","_interopRequireDefault","__esModule","default","_classCallCheck","Constructor","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","enumerable","writable","configurable","setPrototypeOf","__proto__","SearchList","props","console","log","resultsList","_react2","createElement","_advancedSearchResultModule2","podcast","title","_reactBootstrap","Button","bsStyle","href","url","style","height","overflowY","_react","_advancedSearchResultModule","AdvSearchResult","_Component","_this","handleShow","handleClose","state","show","word","setState","card","onClick","Modal","onHide","Header","closeButton","Title","Body","Component","349","227","AdvSearchList","_advancedSearchResult2","width","_advancedSearchResult","axios","baseUrl","ke","DescSearch","duplicates","properNouns","search","handleChange","handleSubmit","parseDescriptions","event","preventDefault","term","_this2","get","params","then","response","catch","error","allWords","Map","allProperNouns","desc","description","extraction_result","char","_this3","display","justifyContent","Form","inline","onSubmit","FormGroup","controlId","ControlLabel","marginRight","marginTop","marginBottom","FormControl","onChange","alignItems","margin","236","_advancedSearch","_advancedSearch2","AdvancedSearchPage","textAlign","Tab","Container","defaultActiveKey","Row","Col","sm","Nav","NavItem","eventKey","Content","animation","Pane"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GCHjCF,EAAAC,QAAAC,EAAA,MDSMC,IACA,SAAUH,EAAQC,EAASC,GELjC,QAAAE,GAAAC,EAAAC,GACA,GAAAC,EAAAC,QAAAH,GACA,QAEAE,GAAAC,QAAAF,KACAA,GACAG,eAAA,EACAC,qBAAA,GAGA,IAAAA,GAAAJ,EAAAI,oBACAC,EAAAL,EAAAK,qBACAF,EAAAH,EAAAG,cACAG,EAAAN,EAAAO,UAAA,UACAC,EAAAR,EAAAS,oBAAA,EACAC,EAAAV,EAAAU,iBAEA,IAAAC,EAAAC,QAAAN,GAAA,EACA,SAAAO,OAAA,4BAAAF,EAAAG,KAAA,SAIA,IAAAC,GAAAd,EAAAF,IAAAiB,KAAAf,EAAAF,IAAAkB,UAAAlB,GACA,IAAAE,EAAAC,QAAAa,GACA,QAMA,QAJAG,GAAAH,EAAAI,MAAA,MACAC,KACAC,KAEAC,EAAA,EAAsBA,EAAAJ,EAAAK,OAAiBD,IAAA,CACvC,GAAAE,GAAAN,EAAAI,GAAAG,MAAA,yBAAAP,EAAAI,GAAAJ,EAAAI,GAAAI,QAAA,uCAAiG,GAGjG,KAAAF,EAAAD,SACAC,IAAAE,QAAA,iBAGA,IAAAC,GAAAH,EAAAC,MAAA,MACAtB,IAAAwB,KAAAJ,SAAAC,EAAAD,SACAC,EAAA,IAEAA,EAAAD,OAAA,IACAF,EAAAO,KAAAJ,EAAAK,eACAT,EAAAQ,KAAAJ,IAQA,OALAM,MACAC,EAAA/B,EAAAgC,WAAAC,GAA6D1B,SAAAD,IAC7D4B,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EAAsBA,EAAAhB,EAAAE,OAAsBc,IAE5C,GAAAN,EAAAnB,QAAAS,EAAAgB,IAAA,GAEAH,IAAAG,EAAA,GACAF,EAAAE,EACAD,GAAA,GAEAA,GAAA,CAEA,IAAAE,GAAAlC,IAAAgB,EAAAiB,GAAAZ,MAAA,yBAAAJ,EAAAgB,GAAAjB,EAAAiB,EAEA,IAAA3B,GAAA0B,IAAA/B,GAAAK,EAAA2B,EAAAF,GAAAD,IAAAG,EAAA,GACA,GAAAE,GAAAT,EAAAP,OAAA,MAAAO,EAAAP,OAAA,CACAO,GAAAS,GAAAT,EAAAS,GAAAT,EAAAS,GAAA,IAAAD,QACiB,IAAAjC,GAAA6B,IAAAG,EAAA,GACjB,GAAAE,GAAAT,EAAAP,OAAA,MAAAO,EAAAP,OAAA,CACAO,GAAAS,GAAAT,EAAAS,GAAAT,EAAAS,GAAA,IAAAD,QAEAR,GAAAF,KAAAU,EAGAJ,GAAAG,MAEAD,IAAA,CAUA,OANA5B,KACAsB,EAAA7B,EAAAuC,KAAAV,EAAA,SAAAW,GACA,MAAAA,MAIAX,EAIA,QAAAG,GAAAjC,GACAA,OAEA,IAAAM,GAAAN,EAAAO,UAAA,SACA,IAAAI,EAAAC,QAAAN,GAAA,EACA,SAAAO,OAAA,4BAAAF,EAAAG,KAAA,SAGA,OAAAkB,GAAA1B,GAvGA,GAAAL,GAAAL,EAAA,IACAK,GAAAF,IAAAH,EAAA,IACA,IAAAe,IAAA,uHACAqB,EAAApC,EAAA,IAuGAF,GAAAC,SACA+C,QAAA5C,EACA6C,aAAAV,IFkBMW,IACA,SAAUlD,EAAQC,GG3HxBD,EAAAC,SACAqC,WACA,KACA,KACA,SACA,OACA,MACA,QACA,QACA,QACA,QACA,KACA,SACA,QACA,OACA,QACA,SACA,KACA,KACA,MACA,MACA,QACA,MACA,QACA,MACA,QACA,MACA,MACA,QACA,MACA,KACA,QACA,KACA,QACA,KACA,MACA,QACA,MACA,SACA,SACA,KACA,KACA,MACA,OACA,SACA,QACA,SACA,MACA,QACA,QACA,UACA,MACA,KACA,MACA,SACA,MACA,MACA,MACA,OACA,MACA,QACA,OACA,QACA,SACA,MACA,MACA,SACA,MACA,SACA,OACA,OACA,OACA,UACA,OACA,SACA,OACA,UACA,UACA,UACA,UACA,IACA,OACA,OACA,MACA,QACA,QACA,KACA,MACA,MACA,QACA,KACA,MACA,MACA,SACA,QACA,UACA,MACA,OACA,QACA,MACA,OACA,QACA,MACA,QACA,SACA,MACA,OACA,OACA,MACA,MACA,SACA,OACA,MACA,MACA,QACA,MACA,OACA,MACA,KACA,QACA,QACA,QACA,MACA,KACA,KACA,MACA,MACA,MACA,QACA,SACA,KACA,OACA,KACA,KACA,OACA,KACA,OACA,OACA,KACA,OACA,SACA,KACA,OACA,OACA,MACA,MACA,MACA,OACA,MACA,OACA,SACA,MACA,OACA,QACA,MACA,QACA,WACA,MACA,KACA,MACA,KACA,MACA,KACA,OACA,UACA,QACA,MACA,MACA,KACA,MACA,QACA,MACA,OACA,WHuIMa,IACA,SAAUnD,EAAQC,GIpTxBD,EAAAC,SACAqC,WACA,IACA,KACA,OACA,MACA,OACA,QACA,SACA,SACA,SACA,KACA,OACA,SACA,QACA,QACA,QACA,aACA,QACA,cACA,MACA,OACA,KACA,KACA,SACA,UACA,SACA,SACA,KACA,OACA,MACA,MACA,SACA,QACA,YACA,WACA,IACA,OACA,MACA,QACA,SACA,OACA,WACA,UACA,UACA,YACA,SACA,SACA,MACA,MACA,SACA,OACA,IACA,IACA,KACA,QACA,UACA,QACA,UACA,QACA,QACA,WACA,SACA,QACA,SACA,UACA,OACA,OACA,QACA,SACA,SACA,OACA,SACA,QACA,UACA,QACA,WACA,MACA,SACA,WACA,OACA,MACA,WACA,QACA,QACA,OACA,aACA,OACA,QACA,SACA,SACA,MACA,kBACA,eACA,YACA,WACA,YACA,aACA,MACA,QACA,OACA,YACA,MACA,QACA,YACA,aACA,YACA,WACA,WACA,YACA,MACA,UACA,YACA,SACA,WACA,MACA,OACA,MACA,YACA,aACA,OACA,QACA,WACA,YACA,SACA,SACA,SACA,SACA,MACA,OACA,OACA,OACA,OACA,SACA,UACA,UACA,UACA,KACA,QACA,WACA,SACA,QACA,SACA,UACA,IACA,OACA,SACA,UACA,KACA,MACA,QACA,SACA,UACA,UACA,UACA,MACA,WACA,OACA,QACA,QACA,QACA,QACA,SACA,UACA,UACA,UACA,SACA,OACA,MACA,KACA,OACA,UACA,WACA,KACA,QACA,OACA,QACA,SACA,SACA,SACA,KACA,OACA,QACA,OACA,IACA,SACA,OACA,SACA,UACA,UACA,UACA,MACA,IACA,MACA,OACA,QACA,SACA,SACA,SACA,MACA,UACA,QACA,YACA,SACA,QACA,OACA,UACA,UACA,UACA,UACA,UACA,QACA,SACA,OACA,SACA,aACA,UACA,UACA,WACA,OACA,OACA,SACA,OACA,QACA,OACA,SACA,QACA,UACA,SACA,UACA,SACA,UACA,SACA,MACA,OACA,QACA,QACA,IACA,OACA,QACA,OACA,OACA,MACA,QACA,QACA,SACA,SACA,SACA,MACA,QACA,OACA,MACA,SACA,OACA,IACA,MACA,MACA,MACA,QACA,MACA,OACA,QACA,QACA,QACA,QACA,KACA,QACA,KACA,QACA,gBACA,MACA,SACA,MACA,IACA,KACA,OACA,QACA,SACA,KACA,OACA,QACA,QACA,QACA,YACA,aACA,SACA,SACA,WACA,WACA,OACA,QACA,QACA,QACA,QACA,QACA,IACA,MACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,OACA,IACA,OACA,QACA,SACA,QACA,SACA,MACA,IACA,SACA,QACA,SACA,MACA,QACA,OACA,MACA,SACA,UACA,UACA,UACA,UACA,OACA,OACA,OACA,QACA,SACA,SACA,SACA,SACA,SACA,WACA,OACA,MACA,MACA,SACA,SACA,SACA,UACA,QACA,UACA,OACA,SACA,OACA,MACA,SACA,QACA,QACA,SACA,UACA,IACA,KACA,OACA,UACA,OACA,YACA,QACA,OACA,OACA,QACA,OACA,SACA,UACA,UACA,UACA,QACA,SACA,MACA,UACA,YACA,YACA,OACA,MACA,MACA,IACA,KACA,OACA,OACA,QACA,MACA,OACA,UACA,IACA,IACA,IACA,QACA,SACA,UACA,UACA,UACA,UACA,OACA,IACA,KACA,QACA,OACA,QACA,MACA,OACA,WACA,UACA,QACA,QACA,UACA,WACA,WACA,WACA,OACA,MACA,OACA,QACA,OACA,QACA,SACA,SACA,SACA,SACA,OACA,UACA,SACA,OACA,MACA,SACA,WACA,YACA,YACA,YACA,OACA,KACA,SACA,SACA,UACA,UACA,UACA,UACA,OACA,SACA,SACA,UACA,UACA,QACA,QACA,SACA,QACA,IACA,MACA,OACA,QACA,MACA,OACA,MACA,QACA,WACA,MACA,IACA,OACA,YACA,WACA,MACA,KACA,MACA,OACA,MACA,QACA,SACA,UACA,QACA,IACA,cACA,OACA,QACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,MACA,MACA,MACA,IACA,QACA,UACA,aACA,gBACA,OACA,MACA,OACA,QACA,OACA,QACA,MACA,QACA,OACA,OACA,SACA,UACA,WACA,WACA,SACA,UACA,UACA,UACA,UACA,MACA,MACA,QACA,SACA,UACA,UACA,aACA,OACA,MACA,QACA,SACA,SACA,SACA,MACA,SACA,OACA,SACA,MACA,OACA,WACA,QACA,KACA,OACA,SACA,QACA,SACA,UACA,SACA,QACA,QACA,SACA,SACA,IACA,IACA,IACA,MACA,OACA,SACA,UACA,UACA,UACA,OACA,KACA,SACA,WACA,MACA,WACA,MACA,SACA,WACA,UACA,OACA,OACA,SACA,UACA,UACA,UACA,WACA,QACA,aACA,OACA,OACA,UACA,SACA,QACA,OACA,OACA,SACA,QACA,SACA,UACA,QACA,QACA,WJkUMc,IACA,SAAUpD,EAAQC,GKz5BxBD,EAAAC,SACAqC,WACA,IACA,MACA,OACA,QACA,QACA,YACA,cACA,SACA,WACA,QACA,aACA,QACA,UACA,QACA,MACA,QACA,SACA,SACA,QACA,QACA,UACA,OACA,WACA,SACA,KACA,QACA,UACA,KACA,MACA,UACA,MACA,UACA,SACA,SACA,WACA,SACA,UACA,WACA,QACA,SACA,aACA,cACA,MACA,SACA,SACA,KACA,QACA,MACA,SACA,aACA,KACA,YACA,OACA,UACA,IACA,KACA,SACA,UACA,SACA,UACA,WACA,OACA,SACA,aACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,SACA,UACA,SACA,OACA,QACA,MACA,KACA,IACA,QACA,MACA,OACA,MACA,QACA,SACA,OACA,QACA,SACA,UACA,YACA,UACA,UACA,KACA,MACA,OACA,QACA,aACA,eACA,WACA,cACA,UACA,aACA,WACA,gBACA,QACA,WACA,SACA,YACA,IACA,aACA,YACA,UACA,MACA,SACA,YACA,KACA,OACA,UACA,QACA,QACA,OACA,OACA,YACA,SACA,IACA,OACA,MACA,KACA,QACA,SACA,OACA,YACA,SACA,WACA,aACA,KACA,MACA,OACA,OACA,QACA,YACA,WACA,aACA,aACA,KACA,UACA,UACA,SACA,IACA,MACA,MACA,QACA,QACA,OACA,WACA,YACA,UACA,MACA,SACA,WACA,QACA,OACA,OACA,UACA,cACA,IACA,MACA,OACA,UACA,QACA,QACA,KACA,OACA,QACA,OACA,MACA,SACA,YACA,IACA,MACA,SACA,UACA,SACA,MACA,SACA,OACA,UACA,SACA,KACA,OACA,QACA,OACA,QACA,MACA,OACA,SACA,YACA,SACA,SACA,WACA,OACA,UACA,KACA,MACA,UACA,MACA,SACA,YACA,MACA,UACA,UACA,IACA,MACA,OACA,MACA,OACA,KACA,KACA,UACA,YACA,KACA,WACA,MACA,SACA,WACA,YACA,YACA,QACA,UACA,UACA,OACA,SACA,KACA,QACA,KACA,OACA,QACA,OACA,MACA,SACA,IACA,OACA,IACA,OACA,QACA,OACA,OACA,QACA,QACA,IACA,OACA,SACA,QACA,SACA,WACA,QACA,OACA,OACA,MACA,QACA,OACA,QACA,SACA,SACA,OACA,UACA,QACA,MACA,IACA,SACA,OACA,MACA,QACA,KACA,OACA,YACA,SACA,QACA,OACA,WACA,OACA,SACA,OACA,OACA,KACA,SACA,IACA,OACA,SACA,KACA,OACA,SACA,YACA,OACA,QACA,UACA,QACA,eACA,MACA,OACA,OACA,KACA,SACA,MACA,OACA,QACA,MACA,WACA,MACA,UACA,QACA,MACA,UACA,IACA,YACA,KACA,MACA,QACA,KACA,KACA,OACA,MACA,KACA,OACA,MACA,OACA,OACA,OACA,KACA,QACA,SACA,YACA,QACA,MACA,OACA,YACA,MACA,UACA,OACA,UACA,MACA,IACA,aACA,eACA,MACA,UACA,SACA,SACA,OACA,WACA,aACA,WACA,WACA,IACA,MACA,QACA,KACA,IACA,SACA,KACA,KACA,SACA,aACA,YACA,aACA,UACA,aACA,eACA,QACA,IACA,OACA,OACA,MACA,MACA,SACA,OACA,SACA,WACA,MACA,SACA,OACA,SACA,UACA,QACA,OACA,OACA,SACA,WACA,OACA,UACA,YACA,QACA,UACA,QACA,MACA,SACA,YACA,QACA,MACA,KACA,OACA,WACA,UACA,UACA,YACA,WACA,YACA,WACA,YACA,OACA,QACA,YACA,UACA,aACA,QACA,MACA,OACA,MACA,OACA,IACA,MACA,OACA,QACA,OACA,QACA,KACA,OACA,QACA,SACA,QACA,OACA,SACA,QACA,MACA,QACA,SACA,OACA,aACA,OACA,SACA,QACA,UACA,aACA,UACA,YACA,UACA,SACA,YACA,QACA,OACA,SACA,UACA,UACA,UACA,QACA,QACA,OACA,WACA,aACA,QACA,SACA,QACA,UACA,aACA,OACA,OACA,KACA,WACA,MACA,OACA,SACA,UACA,QACA,QACA,QACA,MACA,SACA,QACA,MACA,IACA,KACA,QACA,gBACA,SACA,WACA,QACA,OACA,KACA,OACA,KACA,MACA,OACA,SACA,OACA,QACA,UACA,OACA,IACA,QACA,UACA,OACA,MACA,MACA,KACA,IACA,OACA,QACA,MACA,SACA,MACA,KACA,OACA,QACA,QACA,QACA,UACA,OACA,OACA,OACA,UACA,OACA,SACA,WACA,OACA,SACA,WACA,QACA,UACA,aACA,UACA,UACA,UACA,YACA,WACA,UACA,QACA,QACA,UACA,MACA,QACA,UACA,QACA,OACA,QACA,MACA,OACA,UACA,OACA,OACA,SACA,UACA,QACA,SACA,QACA,QACA,WACA,IACA,IACA,MACA,MACA,MACA,QACA,SACA,SACA,SACA,OACA,QACA,WACA,aACA,IACA,ULk6BMe,IACA,SAAUrD,EAAQC,GM/9CxBD,EAAAC,SACAqC,WACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,cACA,UACA,WACA,SACA,SACA,SACA,SACA,SACA,MACA,QACA,MACA,KACA,OACA,SACA,UACA,SACA,UACA,QACA,OACA,OACA,YACA,QACA,YACA,SACA,SACA,OACA,WACA,QACA,SACA,kBACA,QACA,UACA,WACA,UACA,WACA,OACA,QACA,UACA,WACA,WACA,OACA,SACA,cACA,UACA,MACA,MACA,QACA,MACA,SACA,OACA,SACA,MACA,IACA,OACA,WACA,OACA,QACA,OACA,QACA,SACA,QACA,SACA,IACA,OACA,OACA,QACA,SACA,UACA,SACA,UACA,QACA,QACA,UACA,OACA,MACA,UACA,UACA,cACA,YACA,YACA,YACA,UACA,WACA,YACA,YACA,UACA,SACA,QACA,OACA,OACA,SACA,YACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,OACA,IACA,KACA,OACA,MACA,MACA,KACA,SACA,OACA,QACA,SACA,QACA,OACA,MACA,UACA,YACA,QACA,SACA,UACA,QACA,WACA,UACA,UACA,SACA,SACA,MACA,OACA,OACA,QACA,QACA,SACA,YACA,aACA,UACA,OACA,MACA,QACA,MACA,UACA,MACA,OACA,QACA,IACA,UACA,KACA,OACA,QACA,OACA,QACA,UACA,WACA,UACA,UACA,UACA,SACA,KACA,SACA,YACA,WACA,YACA,WACA,QACA,MACA,QACA,SACA,OACA,OACA,OACA,KACA,MACA,OACA,MACA,MACA,OACA,OACA,SACA,WACA,UACA,UACA,QACA,SACA,UACA,SACA,UACA,SACA,UACA,QACA,UACA,QACA,YACA,SACA,UACA,UACA,SACA,WACA,UACA,YACA,aACA,WACA,WACA,QACA,OACA,UACA,OACA,QACA,QACA,SACA,YACA,cACA,aACA,aACA,aACA,YACA,cACA,aACA,aACA,YACA,YACA,cACA,eACA,eACA,SACA,OACA,YACA,SACA,QACA,QACA,OACA,SACA,QACA,QACA,KACA,UACA,SACA,UACA,UACA,UACA,IACA,MACA,QACA,MACA,QACA,UACA,SACA,SACA,SACA,QACA,UACA,SACA,SACA,MACA,SACA,SACA,WACA,WACA,WACA,IACA,UACA,OACA,UACA,QACA,IACA,KACA,QACA,QACA,SACA,UACA,SACA,UACA,WACA,QACA,SACA,WACA,QACA,SACA,SACA,QACA,UACA,SACA,WACA,YACA,UACA,UACA,SACA,QACA,UACA,WACA,SACA,SACA,OACA,SACA,UACA,QACA,QACA,UACA,QACA,QACA,WACA,OACA,MACA,MACA,QACA,MACA,OACA,UACA,QACA,QACA,SACA,KACA,QACA,QACA,WACA,OACA,QACA,MACA,OACA,UACA,YACA,WACA,WACA,WACA,UACA,YACA,WACA,WACA,UACA,UACA,YACA,aACA,aACA,OACA,IACA,QACA,UACA,SACA,UACA,UACA,UACA,YACA,aACA,WACA,WACA,WACA,UACA,KACA,IACA,QACA,IACA,IACA,KACA,OACA,QACA,MACA,KACA,QACA,MACA,QACA,QACA,SACA,KACA,MACA,QACA,QACA,IACA,MACA,SACA,YACA,MACA,QACA,KACA,WACA,QACA,QACA,WACA,QACA,SACA,KACA,MACA,OACA,WACA,MACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,UACA,QACA,SACA,QACA,SACA,MACA,MACA,KACA,MACA,OACA,MACA,OACA,IACA,OACA,QACA,KACA,UACA,WACA,UACA,WACA,SACA,KACA,MACA,WACA,WACA,UACA,WACA,UACA,WACA,QACA,SACA,QACA,SACA,QACA,IACA,OACA,KACA,OACA,QACA,OACA,QACA,IACA,OACA,OACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,QACA,SACA,UACA,QACA,SACA,WACA,YACA,UACA,UACA,QACA,SACA,SACA,UACA,QACA,MACA,UACA,SACA,UACA,SACA,UACA,UACA,WACA,iBACA,SACA,SACA,UACA,SACA,UACA,UACA,UACA,WACA,OACA,QACA,QACA,SACA,QACA,OACA,IACA,MACA,MACA,QACA,WACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,QACA,UACA,MACA,IACA,QACA,YACA,WACA,UACA,UACA,WACA,IACA,OACA,SACA,UACA,QACA,QACA,QACA,MACA,QACA,KACA,MACA,SACA,OACA,OACA,QACA,UACA,UACA,QACA,OACA,MACA,OACA,UACA,OACA,QACA,QACA,OACA,SACA,QACA,UACA,WACA,SACA,SACA,QACA,SACA,KACA,OACA,UACA,SACA,QACA,QACA,YACA,MACA,OACA,QACA,OACA,OACA,YACA,QACA,OACA,QACA,QACA,MACA,MACA,QACA,KACA,WACA,MACA,OACA,QACA,OACA,QACA,KACA,KACA,OACA,IACA,MACA,UACA,UACA,UACA,MACA,QACA,QACA,KACA,WACA,YACA,SACA,UACA,UACA,SACA,WACA,UACA,YACA,aACA,WACA,WACA,QACA,SACA,UACA,QACA,QACA,WACA,SACA,SACA,QACA,UACA,SACA,UACA,SACA,UACA,WACA,SACA,QACA,UACA,WACA,SACA,SACA,UACA,KACA,SACA,QACA,SACA,SACA,OACA,QACA,UACA,UACA,OACA,QACA,QACA,UACA,YACA,aACA,WACA,WACA,WACA,UACA,OACA,QACA,SACA,OACA,KACA,MACA,OACA,UACA,YACA,WACA,WACA,WACA,UACA,YACA,WACA,WACA,UACA,UACA,YACA,aACA,aACA,OACA,OACA,QACA,OACA,QACA,KACA,IACA,SACA,KACA,MACA,OACA,MACA,OACA,MACA,QACA,SACA,OACA,OACA,OACA,MACA,QACA,UACA,IACA,KACA,OACA,QACA,QACA,MACA,SACA,SACA,OACA,QACA,MACA,SACA,YACA,YACA,MACA,WACA,WACA,MACA,UACA,WACA,UACA,WACA,IACA,IACA,IACA,KACA,KACA,IACA,KACA,SACA,MACA,OACA,MACA,OACA,OACA,QACA,OACA,QACA,SACA,UACA,SACA,aN0+CMgB,IACA,SAAUtD,EAAQC,GOnsExBD,EAAAC,SACAqC,WACA,IACA,IACA,IACA,QACA,OACA,KACA,KACA,MACA,QACA,WACA,OACA,OACA,SACA,QACA,QACA,UACA,KACA,QACA,SACA,UACA,cACA,SACA,OACA,SACA,QACA,QACA,SACA,MACA,aACA,WACA,UACA,QACA,QACA,QACA,OACA,QACA,QACA,IACA,MACA,WACA,OACA,QACA,OACA,QACA,OACA,IACA,KACA,MACA,KACA,OACA,OACA,QACA,WACA,WACA,SACA,YACA,YACA,QACA,WACA,WACA,OACA,YACA,UACA,WACA,YACA,WACA,SACA,MACA,MACA,QACA,OACA,UACA,UACA,SACA,SACA,OACA,QACA,SACA,QACA,OACA,SACA,OACA,KACA,OACA,eACA,YACA,eACA,YACA,OACA,OACA,UACA,QACA,UACA,UACA,aACA,SACA,QACA,OACA,IACA,KACA,OACA,KACA,SACA,SACA,SACA,OACA,SACA,WACA,MACA,MACA,YACA,aACA,WACA,UACA,SACA,OACA,WACA,eACA,SACA,SACA,QACA,YACA,aACA,cACA,aACA,OACA,SACA,UACA,WACA,MACA,WACA,UACA,WACA,WACA,OACA,UACA,OACA,OACA,QACA,WACA,QACA,KACA,SACA,SACA,IACA,QACA,KACA,OACA,YACA,QACA,cACA,KACA,SACA,QACA,SACA,UACA,KACA,KACA,MACA,KACA,QACA,UACA,QACA,QACA,QACA,MACA,MACA,OACA,OACA,KACA,MACA,MACA,YACA,UACA,IACA,QACA,OACA,YACA,UACA,OACA,SACA,KACA,OACA,OACA,OACA,IACA,OACA,IACA,KACA,KACA,OACA,QACA,MACA,MACA,KACA,KACA,OACA,MACA,SACA,OACA,MACA,OACA,MACA,MACA,OACA,WACA,MACA,SACA,IACA,KACA,MACA,UACA,IACA,KACA,QACA,SACA,IACA,IACA,KACA,KACA,WACA,MACA,KACA,SACA,MACA,MACA,aACA,WACA,OACA,QACA,YACA,UACA,MACA,WACA,IACA,KACA,QACA,OACA,SACA,KACA,OACA,QACA,QACA,MACA,OACA,SACA,UACA,QACA,QACA,QACA,MACA,WACA,QACA,MACA,YACA,IACA,KACA,KACA,YACA,OACA,WACA,KACA,aACA,WACA,MACA,MACA,QACA,QACA,SACA,OACA,aACA,MACA,IACA,KACA,IACA,KACA,MACA,MACA,OACA,KACA,MACA,OACA,UACA,MACA,KACA,KACA,MACA,QACA,OACA,QACA,QACA,IACA,MACA,MACA,MACA,QACA,UACA,cACA,eACA,mBACA,MACA,QACA,UACA,WACA,MACA,OACA,UACA,OACA,MACA,OACA,OACA,MACA,QACA,QACA,OACA,YACA,SACA,QACA,OACA,WACA,UACA,WACA,eACA,OACA,SACA,QACA,UACA,IACA,KACA,QACA,QACA,SACA,cACA,WACA,WACA,SACA,eACA,YACA,gBACA,MACA,OACA,aACA,SACA,UACA,UACA,WACA,YACA,QACA,MACA,YACA,SACA,OACA,UACA,IACA,UACA,UACA,OACA,IACA,KACA,YACA,OACA,WACA,OACA,KACA,QACA,QACA,OACA,WACA,OACA,SACA,MACA,KACA,OACA,SACA,UACA,QACA,QACA,MACA,UACA,MACA,WACA,OACA,WACA,MACA,OACA,OACA,OACA,OACA,UACA,MACA,UACA,IACA,KACA,MACA,OACA,KACA,KACA,MACA,QACA,YACA,SACA,OACA,SACA,MACA,MACA,OACA,SACA,UACA,QACA,MACA,MACA,WACA,MACA,WACA,WACA,OACA,OACA,QACA,SACA,SACA,SACA,OACA,QACA,YACA,gBACA,OACA,QACA,SACA,KACA,IACA,KACA,MACA,OACA,MACA,IACA,KACA,OACA,MACA,KACA,OACA,MACA,MACA,OACA,QACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,MACA,QACA,QACA,SACA,OACA,aACA,KACA,IACA,IACA,IACA,IACA,MACA,cACA,SACA,MACA,UACA,MACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,MACA,QACA,aACA,OACA,MACA,SACA,WACA,QACA,SACA,YACA,QACA,UACA,YACA,QACA,QACA,SACA,SACA,OACA,SACA,OACA,YPotEMiB,IACA,SAAUvD,EAAQC,GQ3sFxBD,EAAAC,SACAqC,WACA,IACA,QACA,MACA,QACA,SACA,UACA,UACA,SACA,OACA,KACA,MACA,KACA,MACA,IACA,MACA,QACA,MACA,KACA,MACA,SACA,MACA,WACA,UACA,WACA,OACA,MACA,MACA,OACA,QACA,SACA,KACA,WACA,YACA,SACA,UACA,MACA,KACA,MACA,OACA,QACA,QACA,QACA,QACA,KACA,MACA,MACA,OACA,QACA,SACA,IACA,KACA,MACA,OACA,OACA,KACA,MACA,OACA,MACA,OACA,MACA,OACA,OACA,QACA,SACA,OACA,QACA,OACA,QACA,UACA,QACA,KACA,IACA,QACA,MACA,QACA,MACA,QACA,MACA,MACA,OACA,KACA,MACA,MACA,OACA,KACA,MACA,OACA,KACA,MACA,OACA,MACA,OACA,QACA,MACA,KACA,MACA,QACA,MACA,KACA,MACA,MACA,OACA,QACA,OACA,QACA,MACA,MACA,QACA,OACA,SACA,IACA,KACA,KACA,IACA,KACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,MACA,MACA,KACA,QACA,MACA,MACA,OACA,OACA,OACA,QACA,MACA,OACA,QACA,MACA,KACA,MACA,QACA,OACA,MACA,MACA,OACA,KACA,OACA,OACA,QACA,MACA,OACA,KACA,OACA,QACA,MACA,MACA,OACA,QACA,OACA,QACA,SRqtFMkB,IACA,SAAUxD,EAAQC,GSl3FxBD,EAAAC,SACAqC,WACA,IACA,SACA,KACA,KACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,UACA,MACA,QACA,MACA,MACA,SACA,WACA,MACA,cACA,cACA,OACA,MACA,KACA,MACA,QACA,QACA,SACA,OACA,OACA,KACA,SACA,MACA,IACA,OACA,OACA,OACA,OACA,MACA,QACA,MACA,KACA,MACA,QACA,KACA,KACA,WACA,SACA,KACA,KACA,SACA,KACA,MACA,KACA,OACA,MACA,QACA,KACA,KACA,SACA,QACA,QACA,QACA,MACA,QACA,KACA,MACA,OACA,SACA,OACA,QACA,QACA,IACA,QACA,MACA,OACA,SACA,OACA,UACA,MACA,OACA,QACA,WACA,MACA,SACA,QACA,UACA,SACA,SACA,MACA,SACA,SACA,WACA,OACA,UACA,MACA,SACA,WACA,QACA,QACA,MACA,QACA,QACA,OACA,OACA,QACA,cACA,QACA,QACA,QACA,SACA,KACA,SACA,MACA,QACA,QACA,KACA,QACA,QACA,MACA,MACA,SACA,SACA,KACA,MACA,MACA,KACA,MACA,MACA,QACA,SACA,IACA,aACA,YACA,KACA,WACA,OACA,QACA,QACA,SACA,SACA,SACA,MACA,OACA,aACA,SACA,OACA,OACA,OACA,QACA,SACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,OACA,YACA,aACA,QACA,QACA,IACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,cACA,WACA,KACA,WACA,WACA,OACA,MACA,MACA,OACA,OACA,QACA,QACA,QACA,UACA,UACA,UACA,QACA,MACA,MACA,QACA,OACA,SACA,QACA,OACA,cACA,YACA,SACA,WACA,MACA,OACA,OACA,IACA,QACA,MACA,MACA,OACA,QACA,QACA,QACA,UACA,QACA,MACA,OACA,QACA,QACA,OACA,SACA,OACA,aACA,OACA,OACA,QACA,QACA,SACA,UACA,IACA,KACA,OACA,OACA,SACA,MACA,QACA,OACA,UACA,QACA,SACA,OACA,KACA,KACA,QACA,SACA,MACA,aACA,SACA,QACA,QACA,MACA,MACA,UACA,SACA,SACA,MACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,IACA,OACA,aACA,KACA,UACA,UACA,UACA,UACA,IACA,KACA,KACA,UACA,SACA,SACA,MACA,OACA,WACA,YACA,WACA,WACA,OACA,SACA,OACA,QACA,KACA,MACA,MACA,OACA,OACA,WACA,UACA,WACA,MACA,aACA,QACA,YACA,KACA,QACA,MACA,OACA,QACA,QACA,UACA,UACA,UACA,UACA,SACA,MACA,YACA,SACA,SACA,SACA,QACA,KACA,OACA,OACA,SACA,SACA,SACA,MACA,MACA,QACA,QACA,WACA,YACA,YACA,QACA,WACA,UACA,MACA,SACA,SACA,SACA,SACA,UACA,OACA,QACA,QACA,SACA,MACA,KACA,aACA,MACA,SACA,QACA,QACA,UACA,MACA,MACA,OACA,YACA,UACA,WACA,WACA,QACA,QACA,YACA,SACA,SACA,SACA,SACA,SACA,aACA,OACA,SACA,SACA,QACA,SACA,SACA,SACA,SACA,QACA,OACA,UACA,QACA,SACA,KACA,WACA,SACA,KACA,SACA,MACA,WACA,QACA,QACA,MACA,aACA,MACA,QACA,MACA,OACA,QACA,QACA,MACA,OACA,OACA,WACA,KACA,SACA,SACA,SACA,KACA,MACA,MACA,MACA,OACA,QACA,WACA,QACA,QACA,QACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,KACA,MACA,SACA,QACA,OACA,QACA,SACA,SACA,YTi4FMmB,IACA,SAAUzD,EAAQC,GUpzGxBD,EAAAC,SACAqC,WACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,KACA,MACA,MACA,YACA,YACA,SACA,WACA,YACA,KACA,SACA,QACA,WACA,QACA,OACA,UACA,SACA,SACA,SACA,SACA,QACA,SACA,SACA,aACA,UACA,YACA,QACA,SACA,MACA,UACA,OACA,UACA,cACA,MACA,SACA,WACA,QACA,UACA,YACA,eACA,cACA,eACA,SACA,OACA,WACA,SACA,SACA,UACA,SACA,SACA,eACA,MACA,MACA,KACA,MACA,WACA,MACA,OACA,YACA,MACA,SACA,MACA,SACA,SACA,UACA,QACA,MACA,OACA,KACA,OACA,YACA,QACA,KACA,SACA,OACA,WACA,UACA,OACA,YACA,OACA,QACA,SACA,UACA,SACA,WACA,UACA,UACA,SACA,YACA,OACA,MACA,SACA,OACA,MACA,SACA,OACA,QACA,MACA,MACA,MACA,cACA,YACA,MACA,MACA,SACA,MACA,QACA,KACA,SACA,KACA,YACA,SACA,KACA,SACA,MACA,UACA,MACA,OACA,QACA,QACA,SACA,MACA,QACA,MACA,SACA,YACA,SACA,OACA,QACA,SACA,OACA,MACA,OACA,MACA,SACA,MACA,OACA,UACA,SACA,UACA,YACA,QACA,UACA,QACA,UACA,OACA,SACA,QACA,KACA,OACA,QACA,MACA,OACA,OACA,MACA,QACA,KACA,KACA,WACA,KACA,QACA,SACA,SACA,YACA,UACA,QACA,QACA,cACA,WACA,MACA,UACA,OACA,MACA,KACA,UACA,QACA,OACA,WACA,YACA,MACA,UACA,QACA,OACA,SACA,SACA,QACA,YACA,UACA,UACA,UACA,SACA,WACA,SACA,UACA,QACA,UACA,OACA,OACA,YACA,YACA,MACA,SACA,SACA,MACA,eACA,UACA,MACA,UACA,SACA,UACA,UACA,SACA,aACA,MACA,UACA,OACA,SACA,SACA,aACA,UACA,UACA,YACA,WACA,WACA,SACA,UACA,OACA,QACA,OACA,SACA,UACA,OACA,QACA,MACA,OACA,MACA,SACA,MACA,SACA,OACA,QACA,MACA,QACA,OACA,MACA,UACA,MACA,KACA,QACA,WACA,MACA,OACA,QACA,KACA,QACA,SACA,MACA,SACA,QACA,QACA,SACA,UVs0GMoB,IACA,SAAU1D,EAAQC,GWloHxBD,EAAAC,SACAqC,WACA,IACA,MACA,MACA,MACA,aACA,KACA,OACA,MACA,OACA,OACA,MACA,KACA,KACA,WACA,SACA,KACA,SACA,KACA,OACA,aACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,KACA,MACA,MACA,SACA,KACA,YACA,MACA,MACA,UACA,SACA,QACA,MACA,QACA,SACA,MACA,WACA,UACA,KACA,SACA,QACA,QACA,OACA,OACA,OACA,OACA,MACA,OACA,OACA,QACA,OACA,OACA,UACA,MACA,QACA,OACA,OACA,QACA,eACA,SACA,SACA,KACA,IACA,MACA,MACA,KACA,OACA,OACA,OACA,SACA,KACA,KACA,KACA,KACA,MACA,QACA,QACA,QACA,OACA,UACA,UACA,QACA,QACA,QACA,QACA,QACA,aACA,OACA,QACA,QACA,KACA,QACA,QACA,QACA,SACA,WACA,WACA,OACA,MACA,OACA,OACA,SACA,UACA,QACA,QACA,SACA,SACA,MACA,MACA,QACA,QACA,QACA,QACA,OACA,OACA,MACA,aACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,QACA,UACA,SACA,SACA,QACA,UACA,SACA,QACA,UACA,SACA,SACA,KACA,MACA,OACA,MACA,KACA,OACA,OACA,MACA,KACA,OACA,SACA,SACA,MACA,MACA,OACA,OACA,OACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,QACA,UACA,QACA,MACA,MACA,KACA,OACA,KACA,KACA,MACA,MACA,OACA,MACA,OACA,OACA,QACA,QACA,UACA,UACA,YACA,cACA,QACA,MACA,MACA,MACA,OACA,MACA,QACA,QACA,OACA,QACA,QACA,MACA,OACA,MACA,MACA,KACA,IACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,MACA,OACA,MACA,SACA,MACA,OACA,OACA,KACA,MACA,UACA,SACA,QACA,WACA,WACA,WACA,UACA,UACA,UACA,OACA,SACA,WACA,WACA,QACA,SACA,WACA,QACA,OACA,OACA,UACA,UACA,MACA,OACA,KACA,MACA,MACA,OACA,OACA,QACA,OACA,OACA,SACA,SACA,QACA,KACA,MACA,OACA,OACA,QACA,QACA,QACA,MACA,KACA,OACA,MACA,MACA,QACA,MACA,KACA,OACA,OACA,QACA,QACA,QACA,SACA,KACA,QACA,OACA,QACA,QACA,QACA,OACA,OACA,OACA,KACA,OACA,QACA,MACA,IACA,IACA,MACA,OACA,MACA,OACA,QACA,QACA,KACA,SACA,QACA,QACA,OACA,SACA,UACA,aACA,YACA,YACA,WACA,QACA,KACA,UACA,UACA,IACA,KACA,UACA,SACA,KACA,QACA,OACA,OACA,SACA,SACA,QACA,QACA,QACA,UACA,KACA,OACA,QACA,QACA,QACA,UACA,KACA;GX4oHMqB,IACA,SAAU3D,EAAQC,GYj+HxBD,EAAAC,SACAqC,WACA,IACA,IACA,QACA,QACA,KACA,QACA,OACA,OACA,UACA,SACA,MACA,MACA,OACA,QACA,KACA,MACA,SACA,QACA,OACA,SACA,UACA,SACA,UACA,OACA,SACA,OACA,KACA,KACA,QACA,MACA,QACA,UACA,QACA,WACA,MACA,MACA,OACA,MACA,OACA,QACA,KACA,OACA,UACA,OACA,QACA,aACA,UACA,OACA,QACA,QACA,MACA,OACA,WACA,SACA,QACA,KACA,KACA,MACA,UACA,WACA,UACA,WACA,MACA,MACA,KACA,UACA,SACA,SACA,SACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,SACA,OACA,SACA,MACA,WACA,YACA,YACA,UACA,MACA,SACA,MACA,QACA,QACA,KACA,OACA,MACA,OACA,OACA,SACA,IACA,IACA,MACA,OACA,MACA,OACA,KACA,SACA,QACA,MACA,KACA,OACA,QACA,OACA,QACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,OACA,QACA,SACA,SACA,YACA,YACA,YACA,aACA,QACA,KACA,UACA,OACA,QACA,QACA,MACA,SACA,QACA,UACA,QACA,QACA,MACA,MACA,QACA,MACA,QACA,MACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,UACA,QACA,KACA,OACA,OACA,QACA,OACA,OACA,KACA,KACA,OACA,QACA,OACA,QACA,QACA,QACA,UACA,OACA,MACA,MACA,SACA,KACA,OACA,QACA,QACA,MACA,QACA,MACA,OACA,MACA,QACA,SACA,UACA,QACA,SACA,KACA,OACA,MACA,UACA,WACA,UACA,WACA,MACA,MACA,UACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,KACA,QACA,OACA,MACA,MACA,QACA,SACA,QACA,SACA,OACA,QACA,OACA,OACA,QACA,MACA,OACA,SACA,QACA,IACA,OACA,WACA,WACA,SACA,SACA,OACA,OACA,QACA,OACA,KACA,KACA,QACA,SACA,QACA,SACA,OACA,SACA,QACA,SACA,SACA,OACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,MACA,OACA,QACA,SACA,MACA,SACA,SACA,UACA,WACA,gsB,IACA,SAAU5D,EAAQC,Gaz3IxBD,EAAAC,SACAqC,WACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,QACA,iBACA,iBACA,iBACA,iBACA,OACA,MACA,MACA,QACA,QACA,QACA,QACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,UACA,QACA,SACA,QACA,UACA,SACA,OACA,OACA,SACA,MACA,UACA,OACA,OACA,OACA,OACA,OACA,cACA,eACA,QACA,WACA,UACA,YACA,WACA,QACA,QACA,OACA,SACA,SACA,aACA,UACA,UACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,SACA,SACA,UACA,YACA,SACA,QACA,QACA,KACA,KACA,KACA,KACA,WACA,WACA,QACA,QACA,SACA,IACA,KACA,MACA,OACA,QACA,SACA,MACA,eACA,gBACA,SACA,UACA,QACA,MACA,OACA,SACA,SACA,SACA,SACA,QACA,QACA,OACA,MACA,MACA,OACA,OACA,OACA,UACA,OACA,QACA,KACA,MACA,SACA,OACA,QACA,UACA,QACA,QACA,QACA,SACA,OACA,OACA,MACA,MACA,MACA,QACA,IACA,MACA,UACA,UACA,OACA,OACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,SACA,WACA,SACA,QACA,QACA,QACA,SACA,aACA,SACA,QACA,SACA,OACA,MACA,MACA,MACA,OACA,QACA,SACA,QACA,SACA,QACA,UACA,KACA,MACA,MACA,aACA,cACA,WACA,YACA,OACA,MACA,MACA,MACA,MACA,OACA,QACA,SACA,SACA,SACA,gBACA,QACA,eACA,gBACA,SACA,UACA,OACA,OACA,QACA,SACA,SACA,QACA,SACA,MACA,MACA,OACA,QACA,SACA,QACA,QACA,QACA,OACA,SACA,UACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,YACA,SACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,SACA,SACA,YACA,OACA,OACA,QACA,QACA,MACA,aACA,cACA,QACA,SACA,SACA,SACA,SACA,SACA,OACA,OACA,OACA,QACA,QACA,IACA,MACA,UACA,OACA,OACA,QACA,UACA,WACA,UACA,UACA,UACA,UACA,MACA,SACA,SACA,SACA,SACA,UACA,MACA,QACA,QACA,MACA,QACA,OACA,SACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,MACA,QACA,OACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,UACA,SACA,QACA,MACA,MACA,SACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,QACA,SACA,QACA,SACA,aACA,cACA,QACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,OACA,UACA,OACA,OACA,QACA,UACA,QACA,SACA,OACA,OACA,UACA,UACA,UACA,MACA,QACA,QACA,QACA,QACA,QACA,MACA,MACA,OACA,YACA,QACA,QACA,SACA,cACA,eACA,QACA,SACA,eACA,gBACA,UACA,SACA,UACA,UACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,QACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,QACA,QACA,aACA,cACA,OACA,SACA,MACA,MACA,OACA,OACA,Wbw4IMuB,IACA,SAAU7D,EAAQC,Gc9yJxBD,EAAAC,SACAqC,WACA,UACA,YACA,OACA,SACA,OACA,QACA,OACA,SACA,SACA,KACA,QACA,SACA,QACA,QACA,OACA,UACA,SACA,aACA,MACA,OACA,QACA,WACA,UACA,KACA,OACA,OACA,QACA,QACA,OACA,OACA,SACA,SACA,UACA,UACA,SACA,SACA,WACA,WACA,QACA,OACA,MACA,OACA,SACA,OACA,QACA,MACA,KACA,MACA,QACA,UACA,QACA,MACA,SACA,KACA,MACA,QACA,MACA,MACA,QACA,OACA,MACA,QACA,MACA,MACA,OACA,MACA,OACA,OACA,KACA,QACA,WACA,QACA,QACA,OACA,KACA,QACA,SACA,QACA,SACA,KACA,MACA,MACA,MACA,UACA,KACA,QACA,MACA,OACA,MACA,QACA,SACA,YACA,SACA,WACA,OACA,MACA,SACA,QACA,SACA,UACA,YACA,OACA,QACA,SACA,WACA,MACA,OACA,SACA,QACA,SACA,OACA,UACA,OACA,OACA,SACA,YACA,KACA,QACA,SACA,QACA,MACA,QACA,OACA,SACA,QACA,OACA,SACA,QACA,MACA,OACA,SACA,SACA,MACA,OACA,OACA,KACA,OACA,OACA,MACA,OACA,MACA,MACA,SACA,SACA,QACA,OACA,QACA,SACA,MACA,MACA,QACA,QACA,QACA,MACA,QACA,SACA,WACA,YACA,MACA,IACA,SACA,OACA,OACA,OACA,UACA,KACA,QACA,OACA,QACA,YACA,QACA,QACA,OACA,OACA,OACA,QACA,KACA,MACA,UACA,MACA,SACA,WACA,MACA,QACA,SACA,SACA,KACA,QACA,QACA,SACA,OACA,QACA,SACA,UACA,cACA,cACA,WACA,SACA,QACA,OACA,UACA,UACA,QACA,QACA,SACA,OACA,YACA,aACA,QACA,OACA,QACA,QACA,MACA,QACA,QACA,MACA,SACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,SACA,QACA,OACA,WACA,SACA,WACA,UACA,aACA,MACA,SACA,QACA,YACA,QACA,QACA,MACA,QACA,MACA,UACA,WACA,QACA,MACA,MACA,KACA,MACA,SACA,SACA,YACA,SACA,WACA,YACA,aACA,aACA,gBACA,MACA,OACA,KACA,KACA,SACA,MACA,QACA,OACA,SACA,QACA,QACA,KACA,MACA,OACA,aACA,SACA,OACA,KACA,OACA,OACA,QACA,WACA,KACA,OACA,OACA,QACA,OACA,QACA,QACA,QACA,KACA,QACA,SACA,SACA,OACA,MACA,SACA,YACA,SACA,WACA,MACA,MACA,OACA,OACA,QACA,QACA,OACA,SACA,MACA,SACA,UACA,aACA,UACA,YACA,MACA,QACA,SACA,YACA,MACA,QACA,QACA,MACA,OACA,QACA,SACA,SACA,QACA,OACA,QACA,WACA,WACA,SACA,OACA,QACA,cACA,MACA,SACA,QACA,UACA,WACA,WACA,WACA,WACA,SACA,SACA,OACA,MACA,SACA,UACA,aACA,UACA,YACA,MACA,YACA,QACA,MACA,KACA,SACA,KACA,OACA,UACA,MACA,MACA,UACA,UACA,MACA,OACA,OACA,SACA,WACA,QACA,SACA,QACA,WACA,OACA,OACA,MACA,OACA,YACA,KACA,MACA,SACA,SACA,YACA,YACA,UACA,QACA,SACA,SACA,OACA,KACA,KAEA,OACA,QACA,WACA,YACA,SACA,OACA,SACA,OACA,MACA,UACA,MACA,MACA,UACA,SACA,MACA,SACA,QACA,WACA,YACA,OACA,QACA,QACA,MACA,SACA,UACA,SACA,UACA,SACA,QACA,QACA,UACA,UACA,SACA,YACA,YACA,MACA,eACA,UACA,aACA,UACA,MACA,UACA,OACA,MACA,QACA,SACA,WACA,OACA,SACA,OACA,UACA,MACA,UACA,YACA,QACA,cACA,gBACA,QACA,QACA,OACA,QACA,WACA,WACA,UACA,QACA,WACA,UACA,QACA,WACA,aACA,QACA,UACA,YACA,SACA,OACA,YACA,MACA,UACA,QACA,WACA,YACA,OACA,UACA,YACA,cACA,SACA,YACA,QACA,QACA,UACA,KACA,kBACA,WACA,WACA,UACA,SACA,QACA,OACA,OACA,SACA,QACA,MACA,OACA,MACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,QACA,MACA,QACA,MACA,MACA,OACA,MACA,MACA,OACA,QACA,WACA,QACA,MACA,OACA,MACA,OACA,QACA,OACA,OACA,MACA,OACA,MACA,SACA,QACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,OACA,QACA,MACA,MACA,MACA,OACA,QACA,QACA,OACA,MACA,MACA,SACA,SACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,SACA,QACA,QACA,MACA,MACA,QACA,QACA,QACA,MACA,MACA,MACA,QACA,OACA,QACA,QACA,MACA,MACA,MACA,QACA,MACA,SACA,MACA,OACA,MACA,OACA,OACA,SACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,SACA,OACA,MACA,OACA,OACA,aACA,WACA,eACA,gBACA,MACA,aACA,KACA,WACA,SACA,SACA,WACA,WACA,MACA,QACA,SACA,QACA,UACA,UACA,SACA,SACA,SACA,QACA,cACA,MACA,OACA,MACA,OACA,UACA,WACA,OACA,QACA,MACA,OACA,OACA,UACA,YACA,UACA,WACA,WACA,KACA,SACA,UACA,SACA,UACA,SACA,SACA,KACA,QACA,OACA,OACA,QACA,UACA,UACA,UACA,UACA,OACA,oBACA,qBACA,QACA,KACA,YACA,OACA,QACA,OACA,UACA,QACA,QACA,QACA,MACA,QACA,QACA,SACA,SACA,QACA,OACA,MACA,KACA,KACA,KACA,MACA,KACA,SACA,QACA,QACA,WACA,UACA,SACA,WACA,OACA,KACA,MACA,MACA,KACA,MACA,MACA,KACA,MACA,OACA,QACA,MACA,WACA,WACA,aACA,QACA,OACA,MACA,SACA,SACA,YACA,QACA,KACA,SACA,SACA,UACA,YACA,UACA,OACA,YACA,YACA,aACA,UACA,WACA,UACA,OACA,QACA,OACA,UACA,UACA,QACA,SACA,WACA,UACA,QACA,MACA,OACA,QACA,UACA,OACA,OACA,SACA,OACA,OACA,aACA,aACA,YACA,OACA,UACA,QACA,QACA,YACA,aACA,cACA,QACA,OACA,UACA,SACA,MACA,OACA,OACA,QACA,MACA,UACA,OACA,QACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,WACA,WACA,WACA,YACA,WACA,WACA,WACA,aACA,MACA,MACA,SACA,WACA,KACA,QACA,MACA,MACA,MACA,MACA,MACA,SACA,UACA,SACA,OACA,WACA,MACA,SACA,UACA,QACA,WACA,gBACA,SACA,QACA,SACA,UACA,cd8zJMwB,IACA,S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","file":"component---src-pages-advanced-js-1ff6d6bf005ab5f2c246.js","sourcesContent":["webpackJsonp([176202273623472],{\n\n/***/ 391:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(392);\n\n/***/ }),\n\n/***/ 392:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar _ = __webpack_require__(523);\n\t_.str = __webpack_require__(522);\n\tvar supported_languages = [\"danish\",\"dutch\",\"english\",\"french\",\"galician\",\"german\",\"italian\",\"polish\",\"portuguese\",\"russian\",\"spanish\",\"swedish\"];\n\tvar stopwords = __webpack_require__(405);\n\t\n\tfunction _extract(str, options){\n\t    if(_.isEmpty(str)){\n\t        return [];\n\t    }\n\t    if(_.isEmpty(options)){\n\t        options = {\n\t            remove_digits: true,\n\t            return_changed_case: true\n\t        };\n\t    }\n\t    var return_changed_case = options.return_changed_case;\n\t    var return_chained_words = options.return_chained_words;\n\t    var remove_digits = options.remove_digits;\n\t    var _language = options.language || \"english\";\n\t    var _remove_duplicates = options.remove_duplicates || false;\n\t    var return_max_ngrams = options.return_max_ngrams;\n\t\n\t    if(supported_languages.indexOf(_language) < 0){\n\t        throw new Error(\"Language must be one of [\"+supported_languages.join(\",\")+\"]\");\n\t    }\n\t\n\t    //  strip any HTML and trim whitespace\n\t    var text = _.str.trim(_.str.stripTags(str));\n\t    if(_.isEmpty(text)){\n\t        return [];\n\t    }else{\n\t        var words = text.split(/\\s/);\n\t        var unchanged_words = [];\n\t        var low_words = [];\n\t        //  change the case of all the words\n\t        for(var x = 0;x < words.length; x++){\n\t            var w = words[x].match(/https?:\\/\\/.*[\\r\\n]*/g) ? words[x] : words[x].replace(/\\.|,|;|!|\\?|\\(|\\)|:|\"|^'|'$|“|”|‘|’/g,'');\n\t            //  remove periods, question marks, exclamation points, commas, and semi-colons\n\t            //  if this is a short result, make sure it's not a single character or something 'odd'\n\t            if(w.length === 1){\n\t                w = w.replace(/-|_|@|&|#/g,'');\n\t            }\n\t            //  if it's a number, remove it\n\t            var digits_match = w.match(/\\d/g);\n\t            if(remove_digits && digits_match && digits_match.length === w.length){\n\t                w = \"\";\n\t            }\n\t            if(w.length > 0){\n\t                low_words.push(w.toLowerCase());\n\t                unchanged_words.push(w);\n\t            }\n\t        }\n\t        var results = [];\n\t        var _stopwords = options.stopwords || _getStopwords({ language: _language });\n\t        var _last_result_word_index = 0;\n\t        var _start_result_word_index = 0;\n\t\tvar _unbroken_word_chain = false;\n\t        for(var y = 0; y < low_words.length; y++){\n\t\n\t            if(_stopwords.indexOf(low_words[y]) < 0){\n\t                \n\t                if(_last_result_word_index !== y - 1){\n\t                    _start_result_word_index = y;\n\t                    _unbroken_word_chain = false; \n\t\t\t} else {\n\t\t            _unbroken_word_chain = true;\n\t\t\t}\n\t                var result_word = return_changed_case && !unchanged_words[y].match(/https?:\\/\\/.*[\\r\\n]*/g) ? low_words[y] : unchanged_words[y];\n\t                \n\t                if (return_max_ngrams && _unbroken_word_chain && !return_chained_words && return_max_ngrams > (y - _start_result_word_index) && _last_result_word_index === y - 1){\n\t                    var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n\t                    results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n\t                } else if (return_chained_words && _last_result_word_index === y - 1) {\n\t                  var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n\t                  results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n\t                } else {\n\t                  results.push(result_word);\n\t                }\n\t\n\t                _last_result_word_index = y;\n\t            } else {\n\t\t\t_unbroken_word_chain = false;\n\t\t    }\n\t        }\n\t\n\t        if(_remove_duplicates) {\n\t            results= _.uniq(results, function (item) {\n\t                return item;\n\t            });\n\t        }\n\t\n\t        return results;\n\t    }\n\t}\n\t\n\tfunction _getStopwords(options){\n\t    options = options || {};\n\t\n\t    var _language = options.language || \"english\";\n\t    if(supported_languages.indexOf(_language) < 0){\n\t        throw new Error(\"Language must be one of [\"+supported_languages.join(\",\")+\"]\");\n\t    }\n\t\n\t    return stopwords[_language];\n\t}\n\t\n\tmodule.exports = {\n\t    extract:_extract,\n\t    getStopwords: _getStopwords\n\t};\n\n\n/***/ }),\n\n/***/ 393:\n/***/ (function(module, exports) {\n\n\t// Danish stopwords\n\t// http://www.ranks.nl/stopwords/danish\n\t// https://github.com/dnohr\n\t\n\tmodule.exports = {\n\t    stopwords: [\n\t\t\t\"ad\",\n\t\t\t\"af\",\n\t\t\t\"aldrig\",\n\t\t\t\"alle\",\n\t\t\t\"alt\",\n\t\t\t\"altid\",\n\t\t\t\"anden\",\n\t\t\t\"andet\",\n\t\t\t\"andre\",\n\t\t\t\"at\",\n\t\t\t\"bagved\",\n\t\t\t\"begge\",\n\t\t\t\"blev\",\n\t\t\t\"blive\",\n\t\t\t\"bliver\",\n\t\t\t\"da\",\n\t\t\t\"de\",\n\t\t\t\"dem\",\n\t\t\t\"den\",\n\t\t\t\"denne\",\n\t\t\t\"der\",\n\t\t\t\"deres\",\n\t\t\t\"det\",\n\t\t\t\"dette\",\n\t\t\t\"dig\",\n\t\t\t\"din\",\n\t\t\t\"disse\",\n\t\t\t\"dog\",\n\t\t\t\"du\",\n\t\t\t\"efter\",\n\t\t\t\"ej\",\n\t\t\t\"eller\",\n\t\t\t\"en\",\n\t\t\t\"end\",\n\t\t\t\"endnu\",\n\t\t\t\"ene\",\n\t\t\t\"eneste\",\n\t\t\t\"enhver\",\n\t\t\t\"er\",\n\t\t\t\"et\",\n\t\t\t\"fem\",\n\t\t\t\"fire\",\n\t\t\t\"fjernt\",\n\t\t\t\"flere\",\n\t\t\t\"fleste\",\n\t\t\t\"for\",\n\t\t\t\"foran\",\n\t\t\t\"fordi\",\n\t\t\t\"forrige\",\n\t\t\t\"fra\",\n\t\t\t\"få\",\n\t\t\t\"før\",\n\t\t\t\"gennem\",\n\t\t\t\"god\",\n\t\t\t\"ham\",\n\t\t\t\"han\",\n\t\t\t\"hans\",\n\t\t\t\"har\",\n\t\t\t\"havde\",\n\t\t\t\"have\",\n\t\t\t\"hende\",\n\t\t\t\"hendes\",\n\t\t\t\"her\",\n\t\t\t\"hos\",\n\t\t\t\"hovfor\",\n\t\t\t\"hun\",\n\t\t\t\"hurtig\",\n\t\t\t\"hvad\",\n\t\t\t\"hvem\",\n\t\t\t\"hver\",\n\t\t\t\"hvilken\",\n\t\t\t\"hvis\",\n\t\t\t\"hvonår\",\n\t\t\t\"hvor\",\n\t\t\t\"hvordan\",\n\t\t\t\"hvorfor\",\n\t\t\t\"hvorhen\",\n\t\t\t\"hvornår\",\n\t\t\t\"i\",\n\t\t\t\"ikke\",\n\t\t\t\"imod\",\n\t\t\t\"ind\",\n\t\t\t\"ingen\",\n\t\t\t\"intet\",\n\t\t\t\"ja\",\n\t\t\t\"jeg\",\n\t\t\t\"jer\",\n\t\t\t\"jeres\",\n\t\t\t\"jo\",\n\t\t\t\"kan\",\n\t\t\t\"kom\",\n\t\t\t\"kommer\",\n\t\t\t\"kunne\",\n\t\t\t\"langsom\",\n\t\t\t\"lav\",\n\t\t\t\"lidt\",\n\t\t\t\"lille\",\n\t\t\t\"man\",\n\t\t\t\"mand\",\n\t\t\t\"mange\",\n\t\t\t\"med\",\n\t\t\t\"meget\",\n\t\t\t\"mellem\",\n\t\t\t\"men\",\n\t\t\t\"mens\",\n\t\t\t\"mere\",\n\t\t\t\"mig\",\n\t\t\t\"min\",\n\t\t\t\"mindre\",\n\t\t\t\"mine\",\n\t\t\t\"mit\",\n\t\t\t\"mod\",\n\t\t\t\"måske\",\n\t\t\t\"ned\",\n\t\t\t\"nede\",\n\t\t\t\"nej\",\n\t\t\t\"ni\",\n\t\t\t\"nogen\",\n\t\t\t\"noget\",\n\t\t\t\"nogle\",\n\t\t\t\"nok\",\n\t\t\t\"nu\",\n\t\t\t\"ny\",\n\t\t\t\"nyt\",\n\t\t\t\"når\",\n\t\t\t\"nær\",\n\t\t\t\"næste\",\n\t\t\t\"næsten\",\n\t\t\t\"og\",\n\t\t\t\"også\",\n\t\t\t\"om\",\n\t\t\t\"op\",\n\t\t\t\"oppe\",\n\t\t\t\"os\",\n\t\t\t\"otte\",\n\t\t\t\"over\",\n\t\t\t\"på\",\n\t\t\t\"rask\",\n\t\t\t\"sammen\",\n\t\t\t\"se\",\n\t\t\t\"seks\",\n\t\t\t\"selv\",\n\t\t\t\"ses\",\n\t\t\t\"sig\",\n\t\t\t\"sin\",\n\t\t\t\"sine\",\n\t\t\t\"sit\",\n\t\t\t\"skal\",\n\t\t\t\"skulle\",\n\t\t\t\"som\",\n\t\t\t\"stor\",\n\t\t\t\"store\",\n\t\t\t\"syv\",\n\t\t\t\"sådan\",\n\t\t\t\"temmelig\",\n\t\t\t\"thi\",\n\t\t\t\"ti\",\n\t\t\t\"til\",\n\t\t\t\"to\",\n\t\t\t\"tre\",\n\t\t\t\"ud\",\n\t\t\t\"uden\",\n\t\t\t\"udenfor\",\n\t\t\t\"under\",\n\t\t\t\"var\",\n\t\t\t\"ved\",\n\t\t\t\"vi\",\n\t\t\t\"vil\",\n\t\t\t\"ville\",\n\t\t\t\"vor\",\n\t\t\t\"være\",\n\t\t\t\"været\"\n\t    ]\n\t};\n\n/***/ }),\n\n/***/ 394:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by jan on 9-3-15.\n\t */\n\t// German stopwords\n\t// via https://code.google.com/p/stop-words/\n\tmodule.exports = {\n\t    stopwords: [\n\t        \"a\",\n\t        \"ab\",\n\t        \"aber\",\n\t        \"ach\",\n\t        \"acht\",\n\t        \"achte\",\n\t        \"achten\",\n\t        \"achter\",\n\t        \"achtes\",\n\t        \"ag\",\n\t        \"alle\",\n\t        \"allein\",\n\t        \"allem\",\n\t        \"allen\",\n\t        \"aller\",\n\t        \"allerdings\",\n\t        \"alles\",\n\t        \"allgemeinen\",\n\t        \"als\",\n\t        \"also\",\n\t        \"am\",\n\t        \"an\",\n\t        \"andere\",\n\t        \"anderen\",\n\t        \"andern\",\n\t        \"anders\",\n\t        \"au\",\n\t        \"auch\",\n\t        \"auf\",\n\t        \"aus\",\n\t        \"ausser\",\n\t        \"außer\",\n\t        \"ausserdem\",\n\t        \"außerdem\",\n\t        \"b\",\n\t        \"bald\",\n\t        \"bei\",\n\t        \"beide\",\n\t        \"beiden\",\n\t        \"beim\",\n\t        \"beispiel\",\n\t        \"bekannt\",\n\t        \"bereits\",\n\t        \"besonders\",\n\t        \"besser\",\n\t        \"besten\",\n\t        \"bin\",\n\t        \"bis\",\n\t        \"bisher\",\n\t        \"bist\",\n\t        \"c\",\n\t        \"d\",\n\t        \"da\",\n\t        \"dabei\",\n\t        \"dadurch\",\n\t        \"dafür\",\n\t        \"dagegen\",\n\t        \"daher\",\n\t        \"dahin\",\n\t        \"dahinter\",\n\t        \"damals\",\n\t        \"damit\",\n\t        \"danach\",\n\t        \"daneben\",\n\t        \"dank\",\n\t        \"dann\",\n\t        \"daran\",\n\t        \"darauf\",\n\t        \"daraus\",\n\t        \"darf\",\n\t        \"darfst\",\n\t        \"darin\",\n\t        \"darüber\",\n\t        \"darum\",\n\t        \"darunter\",\n\t        \"das\",\n\t        \"dasein\",\n\t        \"daselbst\",\n\t        \"dass\",\n\t        \"daß\",\n\t        \"dasselbe\",\n\t        \"davon\",\n\t        \"davor\",\n\t        \"dazu\",\n\t        \"dazwischen\",\n\t        \"dein\",\n\t        \"deine\",\n\t        \"deinem\",\n\t        \"deiner\",\n\t        \"dem\",\n\t        \"dementsprechend\",\n\t        \"demgegenüber\",\n\t        \"demgemäss\",\n\t        \"demgemäß\",\n\t        \"demselben\",\n\t        \"demzufolge\",\n\t        \"den\",\n\t        \"denen\",\n\t        \"denn\",\n\t        \"denselben\",\n\t        \"der\",\n\t        \"deren\",\n\t        \"derjenige\",\n\t        \"derjenigen\",\n\t        \"dermassen\",\n\t        \"dermaßen\",\n\t        \"derselbe\",\n\t        \"derselben\",\n\t        \"des\",\n\t        \"deshalb\",\n\t        \"desselben\",\n\t        \"dessen\",\n\t        \"deswegen\",\n\t        \"d.h\",\n\t        \"dich\",\n\t        \"die\",\n\t        \"diejenige\",\n\t        \"diejenigen\",\n\t        \"dies\",\n\t        \"diese\",\n\t        \"dieselbe\",\n\t        \"dieselben\",\n\t        \"diesem\",\n\t        \"diesen\",\n\t        \"dieser\",\n\t        \"dieses\",\n\t        \"dir\",\n\t        \"doch\",\n\t        \"dort\",\n\t        \"drei\",\n\t        \"drin\",\n\t        \"dritte\",\n\t        \"dritten\",\n\t        \"dritter\",\n\t        \"drittes\",\n\t        \"du\",\n\t        \"durch\",\n\t        \"durchaus\",\n\t        \"dürfen\",\n\t        \"dürft\",\n\t        \"durfte\",\n\t        \"durften\",\n\t        \"e\",\n\t        \"eben\",\n\t        \"ebenso\",\n\t        \"ehrlich\",\n\t        \"ei\",\n\t        \"ei,\",\n\t        \"eigen\",\n\t        \"eigene\",\n\t        \"eigenen\",\n\t        \"eigener\",\n\t        \"eigenes\",\n\t        \"ein\",\n\t        \"einander\",\n\t        \"eine\",\n\t        \"einem\",\n\t        \"einen\",\n\t        \"einer\",\n\t        \"eines\",\n\t        \"einige\",\n\t        \"einigen\",\n\t        \"einiger\",\n\t        \"einiges\",\n\t        \"einmal\",\n\t        \"eins\",\n\t        \"elf\",\n\t        \"en\",\n\t        \"ende\",\n\t        \"endlich\",\n\t        \"entweder\",\n\t        \"er\",\n\t        \"Ernst\",\n\t        \"erst\",\n\t        \"erste\",\n\t        \"ersten\",\n\t        \"erster\",\n\t        \"erstes\",\n\t        \"es\",\n\t        \"etwa\",\n\t        \"etwas\",\n\t        \"euch\",\n\t        \"f\",\n\t        \"früher\",\n\t        \"fünf\",\n\t        \"fünfte\",\n\t        \"fünften\",\n\t        \"fünfter\",\n\t        \"fünftes\",\n\t        \"für\",\n\t        \"g\",\n\t        \"gab\",\n\t        \"ganz\",\n\t        \"ganze\",\n\t        \"ganzen\",\n\t        \"ganzer\",\n\t        \"ganzes\",\n\t        \"gar\",\n\t        \"gedurft\",\n\t        \"gegen\",\n\t        \"gegenüber\",\n\t        \"gehabt\",\n\t        \"gehen\",\n\t        \"geht\",\n\t        \"gekannt\",\n\t        \"gekonnt\",\n\t        \"gemacht\",\n\t        \"gemocht\",\n\t        \"gemusst\",\n\t        \"genug\",\n\t        \"gerade\",\n\t        \"gern\",\n\t        \"gesagt\",\n\t        \"geschweige\",\n\t        \"gewesen\",\n\t        \"gewollt\",\n\t        \"geworden\",\n\t        \"gibt\",\n\t        \"ging\",\n\t        \"gleich\",\n\t        \"gott\",\n\t        \"gross\",\n\t        \"groß\",\n\t        \"grosse\",\n\t        \"große\",\n\t        \"grossen\",\n\t        \"großen\",\n\t        \"grosser\",\n\t        \"großer\",\n\t        \"grosses\",\n\t        \"großes\",\n\t        \"gut\",\n\t        \"gute\",\n\t        \"guter\",\n\t        \"gutes\",\n\t        \"h\",\n\t        \"habe\",\n\t        \"haben\",\n\t        \"habt\",\n\t        \"hast\",\n\t        \"hat\",\n\t        \"hatte\",\n\t        \"hätte\",\n\t        \"hatten\",\n\t        \"hätten\",\n\t        \"heisst\",\n\t        \"her\",\n\t        \"heute\",\n\t        \"hier\",\n\t        \"hin\",\n\t        \"hinter\",\n\t        \"hoch\",\n\t        \"i\",\n\t        \"ich\",\n\t        \"ihm\",\n\t        \"ihn\",\n\t        \"ihnen\",\n\t        \"ihr\",\n\t        \"ihre\",\n\t        \"ihrem\",\n\t        \"ihren\",\n\t        \"ihrer\",\n\t        \"ihres\",\n\t        \"im\",\n\t        \"immer\",\n\t        \"in\",\n\t        \"indem\",\n\t        \"infolgedessen\",\n\t        \"ins\",\n\t        \"irgend\",\n\t        \"ist\",\n\t        \"j\",\n\t        \"ja\",\n\t        \"jahr\",\n\t        \"jahre\",\n\t        \"jahren\",\n\t        \"je\",\n\t        \"jede\",\n\t        \"jedem\",\n\t        \"jeden\",\n\t        \"jeder\",\n\t        \"jedermann\",\n\t        \"jedermanns\",\n\t        \"jedoch\",\n\t        \"jemand\",\n\t        \"jemandem\",\n\t        \"jemanden\",\n\t        \"jene\",\n\t        \"jenem\",\n\t        \"jenen\",\n\t        \"jener\",\n\t        \"jenes\",\n\t        \"jetzt\",\n\t        \"k\",\n\t        \"kam\",\n\t        \"kann\",\n\t        \"kannst\",\n\t        \"kaum\",\n\t        \"kein\",\n\t        \"keine\",\n\t        \"keinem\",\n\t        \"keinen\",\n\t        \"keiner\",\n\t        \"kleine\",\n\t        \"kleinen\",\n\t        \"kleiner\",\n\t        \"kleines\",\n\t        \"kommen\",\n\t        \"kommt\",\n\t        \"können\",\n\t        \"könnt\",\n\t        \"konnte\",\n\t        \"könnte\",\n\t        \"konnten\",\n\t        \"kurz\",\n\t        \"l\",\n\t        \"lang\",\n\t        \"lange\",\n\t        \"leicht\",\n\t        \"leide\",\n\t        \"lieber\",\n\t        \"los\",\n\t        \"m\",\n\t        \"machen\",\n\t        \"macht\",\n\t        \"machte\",\n\t        \"mag\",\n\t        \"magst\",\n\t        \"mahn\",\n\t        \"man\",\n\t        \"manche\",\n\t        \"manchem\",\n\t        \"manchen\",\n\t        \"mancher\",\n\t        \"manches\",\n\t        \"mann\",\n\t        \"mehr\",\n\t        \"mein\",\n\t        \"meine\",\n\t        \"meinem\",\n\t        \"meinen\",\n\t        \"meiner\",\n\t        \"meines\",\n\t        \"mensch\",\n\t        \"menschen\",\n\t        \"mich\",\n\t        \"mir\",\n\t        \"mit\",\n\t        \"mittel\",\n\t        \"mochte\",\n\t        \"möchte\",\n\t        \"mochten\",\n\t        \"mögen\",\n\t        \"möglich\",\n\t        \"mögt\",\n\t        \"morgen\",\n\t        \"muss\",\n\t        \"muß\",\n\t        \"müssen\",\n\t        \"musst\",\n\t        \"müsst\",\n\t        \"musste\",\n\t        \"mussten\",\n\t        \"n\",\n\t        \"na\",\n\t        \"nach\",\n\t        \"nachdem\",\n\t        \"nahm\",\n\t        \"natürlich\",\n\t        \"neben\",\n\t        \"nein\",\n\t        \"neue\",\n\t        \"neuen\",\n\t        \"neun\",\n\t        \"neunte\",\n\t        \"neunten\",\n\t        \"neunter\",\n\t        \"neuntes\",\n\t        \"nicht\",\n\t        \"nichts\",\n\t        \"nie\",\n\t        \"niemand\",\n\t        \"niemandem\",\n\t        \"niemanden\",\n\t        \"noch\",\n\t        \"nun\",\n\t        \"nur\",\n\t        \"o\",\n\t        \"ob\",\n\t        \"oben\",\n\t        \"oder\",\n\t        \"offen\",\n\t        \"oft\",\n\t        \"ohne\",\n\t        \"Ordnung\",\n\t        \"p\",\n\t        \"q\",\n\t        \"r\",\n\t        \"recht\",\n\t        \"rechte\",\n\t        \"rechten\",\n\t        \"rechter\",\n\t        \"rechtes\",\n\t        \"richtig\",\n\t        \"rund\",\n\t        \"s\",\n\t        \"sa\",\n\t        \"sache\",\n\t        \"sagt\",\n\t        \"sagte\",\n\t        \"sah\",\n\t        \"satt\",\n\t        \"schlecht\",\n\t        \"Schluss\",\n\t        \"schon\",\n\t        \"sechs\",\n\t        \"sechste\",\n\t        \"sechsten\",\n\t        \"sechster\",\n\t        \"sechstes\",\n\t        \"sehr\",\n\t        \"sei\",\n\t        \"seid\",\n\t        \"seien\",\n\t        \"sein\",\n\t        \"seine\",\n\t        \"seinem\",\n\t        \"seinen\",\n\t        \"seiner\",\n\t        \"seines\",\n\t        \"seit\",\n\t        \"seitdem\",\n\t        \"selbst\",\n\t        \"sich\",\n\t        \"sie\",\n\t        \"sieben\",\n\t        \"siebente\",\n\t        \"siebenten\",\n\t        \"siebenter\",\n\t        \"siebentes\",\n\t        \"sind\",\n\t        \"so\",\n\t        \"solang\",\n\t        \"solche\",\n\t        \"solchem\",\n\t        \"solchen\",\n\t        \"solcher\",\n\t        \"solches\",\n\t        \"soll\",\n\t        \"sollen\",\n\t        \"sollte\",\n\t        \"sollten\",\n\t        \"sondern\",\n\t        \"sonst\",\n\t        \"sowie\",\n\t        \"später\",\n\t        \"statt\",\n\t        \"t\",\n\t        \"tag\",\n\t        \"tage\",\n\t        \"tagen\",\n\t        \"tat\",\n\t        \"teil\",\n\t        \"tel\",\n\t        \"tritt\",\n\t        \"trotzdem\",\n\t        \"tun\",\n\t        \"u\",\n\t        \"über\",\n\t        \"überhaupt\",\n\t        \"übrigens\",\n\t        \"uhr\",\n\t        \"um\",\n\t        \"und\",\n\t        \"und?\",\n\t        \"uns\",\n\t        \"unser\",\n\t        \"unsere\",\n\t        \"unserer\",\n\t        \"unter\",\n\t        \"v\",\n\t        \"vergangenen\",\n\t        \"viel\",\n\t        \"viele\",\n\t        \"vielem\",\n\t        \"vielen\",\n\t        \"vielleicht\",\n\t        \"vier\",\n\t        \"vierte\",\n\t        \"vierten\",\n\t        \"vierter\",\n\t        \"viertes\",\n\t        \"vom\",\n\t        \"von\",\n\t        \"vor\",\n\t        \"w\",\n\t        \"wahr?\",\n\t        \"während\",\n\t        \"währenddem\",\n\t        \"währenddessen\",\n\t        \"wann\",\n\t        \"war\",\n\t        \"wäre\",\n\t        \"waren\",\n\t        \"wart\",\n\t        \"warum\",\n\t        \"was\",\n\t        \"wegen\",\n\t        \"weil\",\n\t        \"weit\",\n\t        \"weiter\",\n\t        \"weitere\",\n\t        \"weiteren\",\n\t        \"weiteres\",\n\t        \"welche\",\n\t        \"welchem\",\n\t        \"welchen\",\n\t        \"welcher\",\n\t        \"welches\",\n\t        \"wem\",\n\t        \"wen\",\n\t        \"wenig\",\n\t        \"wenige\",\n\t        \"weniger\",\n\t        \"weniges\",\n\t        \"wenigstens\",\n\t        \"wenn\",\n\t        \"wer\",\n\t        \"werde\",\n\t        \"werden\",\n\t        \"werdet\",\n\t        \"wessen\",\n\t        \"wie\",\n\t        \"wieder\",\n\t        \"will\",\n\t        \"willst\",\n\t        \"wir\",\n\t        \"wird\",\n\t        \"wirklich\",\n\t        \"wirst\",\n\t        \"wo\",\n\t        \"wohl\",\n\t        \"wollen\",\n\t        \"wollt\",\n\t        \"wollte\",\n\t        \"wollten\",\n\t        \"worden\",\n\t        \"wurde\",\n\t        \"würde\",\n\t        \"wurden\",\n\t        \"würden\",\n\t        \"x\",\n\t        \"y\",\n\t        \"z\",\n\t        \"z.b\",\n\t        \"zehn\",\n\t        \"zehnte\",\n\t        \"zehnten\",\n\t        \"zehnter\",\n\t        \"zehntes\",\n\t        \"zeit\",\n\t        \"zu\",\n\t        \"zuerst\",\n\t        \"zugleich\",\n\t        \"zum\",\n\t        \"zunächst\",\n\t        \"zur\",\n\t        \"zurück\",\n\t        \"zusammen\",\n\t        \"zwanzig\",\n\t        \"zwar\",\n\t        \"zwei\",\n\t        \"zweite\",\n\t        \"zweiten\",\n\t        \"zweiter\",\n\t        \"zweites\",\n\t        \"zwischen\",\n\t        \"zwölf\",\n\t        \"﻿aber\",\n\t        \"euer\",\n\t        \"eure\",\n\t        \"hattest\",\n\t        \"hattet\",\n\t        \"jedes\",\n\t        \"mußt\",\n\t        \"müßt\",\n\t        \"sollst\",\n\t        \"sollt\",\n\t        \"soweit\",\n\t        \"weshalb\",\n\t        \"wieso\",\n\t        \"woher\",\n\t        \"wohin\"\n\t    ]\n\t\n\t};\n\n/***/ }),\n\n/***/ 395:\n/***/ (function(module, exports) {\n\n\t// via http://jmlr.org/papers/volume5/lewis04a/a11-smart-stop-list/english.stop\n\tmodule.exports = {\n\t    stopwords:[\n\t        \"a\",\n\t        \"a's\",\n\t        \"able\",\n\t        \"about\",\n\t        \"above\",\n\t        \"according\",\n\t        \"accordingly\",\n\t        \"across\",\n\t        \"actually\",\n\t        \"after\",\n\t        \"afterwards\",\n\t        \"again\",\n\t        \"against\",\n\t        \"ain't\",\n\t        \"all\",\n\t        \"allow\",\n\t        \"allows\",\n\t        \"almost\",\n\t        \"alone\",\n\t        \"along\",\n\t        \"already\",\n\t        \"also\",\n\t        \"although\",\n\t        \"always\",\n\t        \"am\",\n\t        \"among\",\n\t        \"amongst\",\n\t        \"an\",\n\t        \"and\",\n\t        \"another\",\n\t        \"any\",\n\t        \"anybody\",\n\t        \"anyhow\",\n\t        \"anyone\",\n\t        \"anything\",\n\t        \"anyway\",\n\t        \"anyways\",\n\t        \"anywhere\",\n\t        \"apart\",\n\t        \"appear\",\n\t        \"appreciate\",\n\t        \"appropriate\",\n\t        \"are\",\n\t        \"aren't\",\n\t        \"around\",\n\t        \"as\",\n\t        \"aside\",\n\t        \"ask\",\n\t        \"asking\",\n\t        \"associated\",\n\t        \"at\",\n\t        \"available\",\n\t        \"away\",\n\t        \"awfully\",\n\t        \"b\",\n\t        \"be\",\n\t        \"became\",\n\t        \"because\",\n\t        \"become\",\n\t        \"becomes\",\n\t        \"becoming\",\n\t        \"been\",\n\t        \"before\",\n\t        \"beforehand\",\n\t        \"behind\",\n\t        \"being\",\n\t        \"believe\",\n\t        \"below\",\n\t        \"beside\",\n\t        \"besides\",\n\t        \"best\",\n\t        \"better\",\n\t        \"between\",\n\t        \"beyond\",\n\t        \"both\",\n\t        \"brief\",\n\t        \"but\",\n\t        \"by\",\n\t        \"c\",\n\t        \"c'mon\",\n\t        \"c's\",\n\t        \"came\",\n\t        \"can\",\n\t        \"can't\",\n\t        \"cannot\",\n\t        \"cant\",\n\t        \"cause\",\n\t        \"causes\",\n\t        \"certain\",\n\t        \"certainly\",\n\t        \"changes\",\n\t        \"clearly\",\n\t        \"co\",\n\t        \"com\",\n\t        \"come\",\n\t        \"comes\",\n\t        \"concerning\",\n\t        \"consequently\",\n\t        \"consider\",\n\t        \"considering\",\n\t        \"contain\",\n\t        \"containing\",\n\t        \"contains\",\n\t        \"corresponding\",\n\t        \"could\",\n\t        \"couldn't\",\n\t        \"course\",\n\t        \"currently\",\n\t        \"d\",\n\t        \"definitely\",\n\t        \"described\",\n\t        \"despite\",\n\t        \"did\",\n\t        \"didn't\",\n\t        \"different\",\n\t        \"do\",\n\t        \"does\",\n\t        \"doesn't\",\n\t        \"doing\",\n\t        \"don't\",\n\t        \"done\",\n\t        \"down\",\n\t        \"downwards\",\n\t        \"during\",\n\t        \"e\",\n\t        \"each\",\n\t        \"edu\",\n\t        \"eg\",\n\t        \"eight\",\n\t        \"either\",\n\t        \"else\",\n\t        \"elsewhere\",\n\t        \"enough\",\n\t        \"entirely\",\n\t        \"especially\",\n\t        \"et\",\n\t        \"etc\",\n\t        \"even\",\n\t        \"ever\",\n\t        \"every\",\n\t        \"everybody\",\n\t        \"everyone\",\n\t        \"everything\",\n\t        \"everywhere\",\n\t        \"ex\",\n\t        \"exactly\",\n\t        \"example\",\n\t        \"except\",\n\t        \"f\",\n\t        \"far\",\n\t        \"few\",\n\t        \"fifth\",\n\t        \"first\",\n\t        \"five\",\n\t        \"followed\",\n\t        \"following\",\n\t        \"follows\",\n\t        \"for\",\n\t        \"former\",\n\t        \"formerly\",\n\t        \"forth\",\n\t        \"four\",\n\t        \"from\",\n\t        \"further\",\n\t        \"furthermore\",\n\t        \"g\",\n\t        \"get\",\n\t        \"gets\",\n\t        \"getting\",\n\t        \"given\",\n\t        \"gives\",\n\t        \"go\",\n\t        \"goes\",\n\t        \"going\",\n\t        \"gone\",\n\t        \"got\",\n\t        \"gotten\",\n\t        \"greetings\",\n\t        \"h\",\n\t        \"had\",\n\t        \"hadn't\",\n\t        \"happens\",\n\t        \"hardly\",\n\t        \"has\",\n\t        \"hasn't\",\n\t        \"have\",\n\t        \"haven't\",\n\t        \"having\",\n\t        \"he\",\n\t        \"he's\",\n\t        \"hello\",\n\t        \"help\",\n\t        \"hence\",\n\t        \"her\",\n\t        \"here\",\n\t        \"here's\",\n\t        \"hereafter\",\n\t        \"hereby\",\n\t        \"herein\",\n\t        \"hereupon\",\n\t        \"hers\",\n\t        \"herself\",\n\t        \"hi\",\n\t        \"him\",\n\t        \"himself\",\n\t        \"his\",\n\t        \"hither\",\n\t        \"hopefully\",\n\t        \"how\",\n\t        \"howbeit\",\n\t        \"however\",\n\t        \"i\",\n\t        \"i'd\",\n\t        \"i'll\",\n\t        \"i'm\",\n\t        \"i've\",\n\t        \"ie\",\n\t        \"if\",\n\t        \"ignored\",\n\t        \"immediate\",\n\t        \"in\",\n\t        \"inasmuch\",\n\t        \"inc\",\n\t        \"indeed\",\n\t        \"indicate\",\n\t        \"indicated\",\n\t        \"indicates\",\n\t        \"inner\",\n\t        \"insofar\",\n\t        \"instead\",\n\t        \"into\",\n\t        \"inward\",\n\t        \"is\",\n\t        \"isn't\",\n\t        \"it\",\n\t        \"it'd\",\n\t        \"it'll\",\n\t        \"it's\",\n\t        \"its\",\n\t        \"itself\",\n\t        \"j\",\n\t        \"just\",\n\t        \"k\",\n\t        \"keep\",\n\t        \"keeps\",\n\t        \"kept\",\n\t        \"know\",\n\t        \"knows\",\n\t        \"known\",\n\t        \"l\",\n\t        \"last\",\n\t        \"lately\",\n\t        \"later\",\n\t        \"latter\",\n\t        \"latterly\",\n\t        \"least\",\n\t        \"less\",\n\t        \"lest\",\n\t        \"let\",\n\t        \"let's\",\n\t        \"like\",\n\t        \"liked\",\n\t        \"likely\",\n\t        \"little\",\n\t        \"look\",\n\t        \"looking\",\n\t        \"looks\",\n\t        \"ltd\",\n\t        \"m\",\n\t        \"mainly\",\n\t        \"many\",\n\t        \"may\",\n\t        \"maybe\",\n\t        \"me\",\n\t        \"mean\",\n\t        \"meanwhile\",\n\t        \"merely\",\n\t        \"might\",\n\t        \"more\",\n\t        \"moreover\",\n\t        \"most\",\n\t        \"mostly\",\n\t        \"much\",\n\t        \"must\",\n\t        \"my\",\n\t        \"myself\",\n\t        \"n\",\n\t        \"name\",\n\t        \"namely\",\n\t        \"nd\",\n\t        \"near\",\n\t        \"nearly\",\n\t        \"necessary\",\n\t        \"need\",\n\t        \"needs\",\n\t        \"neither\",\n\t        \"never\",\n\t        \"nevertheless\",\n\t        \"new\",\n\t        \"next\",\n\t        \"nine\",\n\t        \"no\",\n\t        \"nobody\",\n\t        \"non\",\n\t        \"none\",\n\t        \"noone\",\n\t        \"nor\",\n\t        \"normally\",\n\t        \"not\",\n\t        \"nothing\",\n\t        \"novel\",\n\t        \"now\",\n\t        \"nowhere\",\n\t        \"o\",\n\t        \"obviously\",\n\t        \"of\",\n\t        \"off\",\n\t        \"often\",\n\t        \"oh\",\n\t        \"ok\",\n\t        \"okay\",\n\t        \"old\",\n\t        \"on\",\n\t        \"once\",\n\t        \"one\",\n\t        \"ones\",\n\t        \"only\",\n\t        \"onto\",\n\t        \"or\",\n\t        \"other\",\n\t        \"others\",\n\t        \"otherwise\",\n\t        \"ought\",\n\t        \"our\",\n\t        \"ours\",\n\t        \"ourselves\",\n\t        \"out\",\n\t        \"outside\",\n\t        \"over\",\n\t        \"overall\",\n\t        \"own\",\n\t        \"p\",\n\t        \"particular\",\n\t        \"particularly\",\n\t        \"per\",\n\t        \"perhaps\",\n\t        \"placed\",\n\t        \"please\",\n\t        \"plus\",\n\t        \"possible\",\n\t        \"presumably\",\n\t        \"probably\",\n\t        \"provides\",\n\t        \"q\",\n\t        \"que\",\n\t        \"quite\",\n\t        \"qv\",\n\t        \"r\",\n\t        \"rather\",\n\t        \"rd\",\n\t        \"re\",\n\t        \"really\",\n\t        \"reasonably\",\n\t        \"regarding\",\n\t        \"regardless\",\n\t        \"regards\",\n\t        \"relatively\",\n\t        \"respectively\",\n\t        \"right\",\n\t        \"s\",\n\t        \"said\",\n\t        \"same\",\n\t        \"saw\",\n\t        \"say\",\n\t        \"saying\",\n\t        \"says\",\n\t        \"second\",\n\t        \"secondly\",\n\t        \"see\",\n\t        \"seeing\",\n\t        \"seem\",\n\t        \"seemed\",\n\t        \"seeming\",\n\t        \"seems\",\n\t        \"seen\",\n\t        \"self\",\n\t        \"selves\",\n\t        \"sensible\",\n\t        \"sent\",\n\t        \"serious\",\n\t        \"seriously\",\n\t        \"seven\",\n\t        \"several\",\n\t        \"shall\",\n\t        \"she\",\n\t        \"should\",\n\t        \"shouldn't\",\n\t        \"since\",\n\t        \"six\",\n\t        \"so\",\n\t        \"some\",\n\t        \"somebody\",\n\t        \"somehow\",\n\t        \"someone\",\n\t        \"something\",\n\t        \"sometime\",\n\t        \"sometimes\",\n\t        \"somewhat\",\n\t        \"somewhere\",\n\t        \"soon\",\n\t        \"sorry\",\n\t        \"specified\",\n\t        \"specify\",\n\t        \"specifying\",\n\t        \"still\",\n\t        \"sub\",\n\t        \"such\",\n\t        \"sup\",\n\t        \"sure\",\n\t        \"t\",\n\t        \"t's\",\n\t        \"take\",\n\t        \"taken\",\n\t        \"tell\",\n\t        \"tends\",\n\t        \"th\",\n\t        \"than\",\n\t        \"thank\",\n\t        \"thanks\",\n\t        \"thanx\",\n\t        \"that\",\n\t        \"that's\",\n\t        \"thats\",\n\t        \"the\",\n\t        \"their\",\n\t        \"theirs\",\n\t        \"them\",\n\t        \"themselves\",\n\t        \"then\",\n\t        \"thence\",\n\t        \"there\",\n\t        \"there's\",\n\t        \"thereafter\",\n\t        \"thereby\",\n\t        \"therefore\",\n\t        \"therein\",\n\t        \"theres\",\n\t        \"thereupon\",\n\t        \"these\",\n\t        \"they\",\n\t        \"they'd\",\n\t        \"they'll\",\n\t        \"they're\",\n\t        \"they've\",\n\t        \"think\",\n\t        \"third\",\n\t        \"this\",\n\t        \"thorough\",\n\t        \"thoroughly\",\n\t        \"those\",\n\t        \"though\",\n\t        \"three\",\n\t        \"through\",\n\t        \"throughout\",\n\t        \"thru\",\n\t        \"thus\",\n\t        \"to\",\n\t        \"together\",\n\t        \"too\",\n\t        \"took\",\n\t        \"toward\",\n\t        \"towards\",\n\t        \"tried\",\n\t        \"tries\",\n\t        \"truly\",\n\t        \"try\",\n\t        \"trying\",\n\t        \"twice\",\n\t        \"two\",\n\t        \"u\",\n\t        \"un\",\n\t        \"under\",\n\t        \"unfortunately\",\n\t        \"unless\",\n\t        \"unlikely\",\n\t        \"until\",\n\t        \"unto\",\n\t        \"up\",\n\t        \"upon\",\n\t        \"us\",\n\t        \"use\",\n\t        \"used\",\n\t        \"useful\",\n\t        \"uses\",\n\t        \"using\",\n\t        \"usually\",\n\t        \"uucp\",\n\t        \"v\",\n\t        \"value\",\n\t        \"various\",\n\t        \"very\",\n\t        \"via\",\n\t        \"viz\",\n\t        \"vs\",\n\t        \"w\",\n\t        \"want\",\n\t        \"wants\",\n\t        \"was\",\n\t        \"wasn't\",\n\t        \"way\",\n\t        \"we\",\n\t        \"we'd\",\n\t        \"we'll\",\n\t        \"we're\",\n\t        \"we've\",\n\t        \"welcome\",\n\t        \"well\",\n\t        \"went\",\n\t        \"were\",\n\t        \"weren't\",\n\t        \"what\",\n\t        \"what's\",\n\t        \"whatever\",\n\t        \"when\",\n\t        \"whence\",\n\t        \"whenever\",\n\t        \"where\",\n\t        \"where's\",\n\t        \"whereafter\",\n\t        \"whereas\",\n\t        \"whereby\",\n\t        \"wherein\",\n\t        \"whereupon\",\n\t        \"wherever\",\n\t        \"whether\",\n\t        \"which\",\n\t        \"while\",\n\t        \"whither\",\n\t        \"who\",\n\t        \"who's\",\n\t        \"whoever\",\n\t        \"whole\",\n\t        \"whom\",\n\t        \"whose\",\n\t        \"why\",\n\t        \"will\",\n\t        \"willing\",\n\t        \"wish\",\n\t        \"with\",\n\t        \"within\",\n\t        \"without\",\n\t        \"won't\",\n\t        \"wonder\",\n\t        \"would\",\n\t        \"would\",\n\t        \"wouldn't\",\n\t        \"x\",\n\t        \"y\",\n\t        \"yes\",\n\t        \"yet\",\n\t        \"you\",\n\t        \"you'd\",\n\t        \"you'll\",\n\t        \"you're\",\n\t        \"you've\",\n\t        \"your\",\n\t        \"yours\",\n\t        \"yourself\",\n\t        \"yourselves\",\n\t        \"z\",\n\t        \"zero\"\n\t    ]\n\t};\n\n/***/ }),\n\n/***/ 396:\n/***/ (function(module, exports) {\n\n\t//  via https://stop-words.googlecode.com/svn/trunk/stop-words/stop-words/stop-words-spanish.txt\n\tmodule.exports = {\n\t    stopwords: [\n\t        '0',\n\t        '1',\n\t        '2',\n\t        '3',\n\t        '4',\n\t        '5',\n\t        '6',\n\t        '7',\n\t        '8',\n\t        '9',\n\t        '_',\n\t        'a',\n\t        'actualmente',\n\t        'acuerdo',\n\t        'adelante',\n\t        'ademas',\n\t        'además',\n\t        'adrede',\n\t        'afirmó',\n\t        'agregó',\n\t        'ahi',\n\t        'ahora',\n\t        'ahí',\n\t        'al',\n\t        'algo',\n\t        'alguna',\n\t        'algunas',\n\t        'alguno',\n\t        'algunos',\n\t        'algún',\n\t        'alli',\n\t        'allí',\n\t        'alrededor',\n\t        'ambos',\n\t        'ampleamos',\n\t        'antano',\n\t        'antaño',\n\t        'ante',\n\t        'anterior',\n\t        'antes',\n\t        'apenas',\n\t        'aproximadamente',\n\t        'aquel',\n\t        'aquella',\n\t        'aquellas',\n\t        'aquello',\n\t        'aquellos',\n\t        'aqui',\n\t        'aquél',\n\t        'aquélla',\n\t        'aquéllas',\n\t        'aquéllos',\n\t        'aquí',\n\t        'arriba',\n\t        'arribaabajo',\n\t        'aseguró',\n\t        'asi',\n\t        'así',\n\t        'atras',\n\t        'aun',\n\t        'aunque',\n\t        'ayer',\n\t        'añadió',\n\t        'aún',\n\t        'b',\n\t        'bajo',\n\t        'bastante',\n\t        'bien',\n\t        'breve',\n\t        'buen',\n\t        'buena',\n\t        'buenas',\n\t        'bueno',\n\t        'buenos',\n\t        'c',\n\t        'cada',\n\t        'casi',\n\t        'cerca',\n\t        'cierta',\n\t        'ciertas',\n\t        'cierto',\n\t        'ciertos',\n\t        'cinco',\n\t        'claro',\n\t        'comentó',\n\t        'como',\n\t        'con',\n\t        'conmigo',\n\t        'conocer',\n\t        'conseguimos',\n\t        'conseguir',\n\t        'considera',\n\t        'consideró',\n\t        'consigo',\n\t        'consigue',\n\t        'consiguen',\n\t        'consigues',\n\t        'contigo',\n\t        'contra',\n\t        'cosas',\n\t        'creo',\n\t        'cual',\n\t        'cuales',\n\t        'cualquier',\n\t        'cuando',\n\t        'cuanta',\n\t        'cuantas',\n\t        'cuanto',\n\t        'cuantos',\n\t        'cuatro',\n\t        'cuenta',\n\t        'cuál',\n\t        'cuáles',\n\t        'cuándo',\n\t        'cuánta',\n\t        'cuántas',\n\t        'cuánto',\n\t        'cuántos',\n\t        'cómo',\n\t        'd',\n\t        'da',\n\t        'dado',\n\t        'dan',\n\t        'dar',\n\t        'de',\n\t        'debajo',\n\t        'debe',\n\t        'deben',\n\t        'debido',\n\t        'decir',\n\t        'dejó',\n\t        'del',\n\t        'delante',\n\t        'demasiado',\n\t        'demás',\n\t        'dentro',\n\t        'deprisa',\n\t        'desde',\n\t        'despacio',\n\t        'despues',\n\t        'después',\n\t        'detras',\n\t        'detrás',\n\t        'dia',\n\t        'dias',\n\t        'dice',\n\t        'dicen',\n\t        'dicho',\n\t        'dieron',\n\t        'diferente',\n\t        'diferentes',\n\t        'dijeron',\n\t        'dijo',\n\t        'dio',\n\t        'donde',\n\t        'dos',\n\t        'durante',\n\t        'día',\n\t        'días',\n\t        'dónde',\n\t        'e',\n\t        'ejemplo',\n\t        'el',\n\t        'ella',\n\t        'ellas',\n\t        'ello',\n\t        'ellos',\n\t        'embargo',\n\t        'empleais',\n\t        'emplean',\n\t        'emplear',\n\t        'empleas',\n\t        'empleo',\n\t        'en',\n\t        'encima',\n\t        'encuentra',\n\t        'enfrente',\n\t        'enseguida',\n\t        'entonces',\n\t        'entre',\n\t        'era',\n\t        'erais',\n\t        'eramos',\n\t        'eran',\n\t        'eras',\n\t        'eres',\n\t        'es',\n\t        'esa',\n\t        'esas',\n\t        'ese',\n\t        'eso',\n\t        'esos',\n\t        'esta',\n\t        'estaba',\n\t        'estabais',\n\t        'estaban',\n\t        'estabas',\n\t        'estad',\n\t        'estada',\n\t        'estadas',\n\t        'estado',\n\t        'estados',\n\t        'estais',\n\t        'estamos',\n\t        'estan',\n\t        'estando',\n\t        'estar',\n\t        'estaremos',\n\t        'estará',\n\t        'estarán',\n\t        'estarás',\n\t        'estaré',\n\t        'estaréis',\n\t        'estaría',\n\t        'estaríais',\n\t        'estaríamos',\n\t        'estarían',\n\t        'estarías',\n\t        'estas',\n\t        'este',\n\t        'estemos',\n\t        'esto',\n\t        'estos',\n\t        'estoy',\n\t        'estuve',\n\t        'estuviera',\n\t        'estuvierais',\n\t        'estuvieran',\n\t        'estuvieras',\n\t        'estuvieron',\n\t        'estuviese',\n\t        'estuvieseis',\n\t        'estuviesen',\n\t        'estuvieses',\n\t        'estuvimos',\n\t        'estuviste',\n\t        'estuvisteis',\n\t        'estuviéramos',\n\t        'estuviésemos',\n\t        'estuvo',\n\t        'está',\n\t        'estábamos',\n\t        'estáis',\n\t        'están',\n\t        'estás',\n\t        'esté',\n\t        'estéis',\n\t        'estén',\n\t        'estés',\n\t        'ex',\n\t        'excepto',\n\t        'existe',\n\t        'existen',\n\t        'explicó',\n\t        'expresó',\n\t        'f',\n\t        'fin',\n\t        'final',\n\t        'fue',\n\t        'fuera',\n\t        'fuerais',\n\t        'fueran',\n\t        'fueras',\n\t        'fueron',\n\t        'fuese',\n\t        'fueseis',\n\t        'fuesen',\n\t        'fueses',\n\t        'fui',\n\t        'fuimos',\n\t        'fuiste',\n\t        'fuisteis',\n\t        'fuéramos',\n\t        'fuésemos',\n\t        'g',\n\t        'general',\n\t        'gran',\n\t        'grandes',\n\t        'gueno',\n\t        'h',\n\t        'ha',\n\t        'haber',\n\t        'habia',\n\t        'habida',\n\t        'habidas',\n\t        'habido',\n\t        'habidos',\n\t        'habiendo',\n\t        'habla',\n\t        'hablan',\n\t        'habremos',\n\t        'habrá',\n\t        'habrán',\n\t        'habrás',\n\t        'habré',\n\t        'habréis',\n\t        'habría',\n\t        'habríais',\n\t        'habríamos',\n\t        'habrían',\n\t        'habrías',\n\t        'habéis',\n\t        'había',\n\t        'habíais',\n\t        'habíamos',\n\t        'habían',\n\t        'habías',\n\t        'hace',\n\t        'haceis',\n\t        'hacemos',\n\t        'hacen',\n\t        'hacer',\n\t        'hacerlo',\n\t        'haces',\n\t        'hacia',\n\t        'haciendo',\n\t        'hago',\n\t        'han',\n\t        'has',\n\t        'hasta',\n\t        'hay',\n\t        'haya',\n\t        'hayamos',\n\t        'hayan',\n\t        'hayas',\n\t        'hayáis',\n\t        'he',\n\t        'hecho',\n\t        'hemos',\n\t        'hicieron',\n\t        'hizo',\n\t        'horas',\n\t        'hoy',\n\t        'hube',\n\t        'hubiera',\n\t        'hubierais',\n\t        'hubieran',\n\t        'hubieras',\n\t        'hubieron',\n\t        'hubiese',\n\t        'hubieseis',\n\t        'hubiesen',\n\t        'hubieses',\n\t        'hubimos',\n\t        'hubiste',\n\t        'hubisteis',\n\t        'hubiéramos',\n\t        'hubiésemos',\n\t        'hubo',\n\t        'i',\n\t        'igual',\n\t        'incluso',\n\t        'indicó',\n\t        'informo',\n\t        'informó',\n\t        'intenta',\n\t        'intentais',\n\t        'intentamos',\n\t        'intentan',\n\t        'intentar',\n\t        'intentas',\n\t        'intento',\n\t        'ir',\n\t        'j',\n\t        'junto',\n\t        'k',\n\t        'l',\n\t        'la',\n\t        'lado',\n\t        'largo',\n\t        'las',\n\t        'le',\n\t        'lejos',\n\t        'les',\n\t        'llegó',\n\t        'lleva',\n\t        'llevar',\n\t        'lo',\n\t        'los',\n\t        'luego',\n\t        'lugar',\n\t        'm',\n\t        'mal',\n\t        'manera',\n\t        'manifestó',\n\t        'mas',\n\t        'mayor',\n\t        'me',\n\t        'mediante',\n\t        'medio',\n\t        'mejor',\n\t        'mencionó',\n\t        'menos',\n\t        'menudo',\n\t        'mi',\n\t        'mia',\n\t        'mias',\n\t        'mientras',\n\t        'mio',\n\t        'mios',\n\t        'mis',\n\t        'misma',\n\t        'mismas',\n\t        'mismo',\n\t        'mismos',\n\t        'modo',\n\t        'momento',\n\t        'mucha',\n\t        'muchas',\n\t        'mucho',\n\t        'muchos',\n\t        'muy',\n\t        'más',\n\t        'mí',\n\t        'mía',\n\t        'mías',\n\t        'mío',\n\t        'míos',\n\t        'n',\n\t        'nada',\n\t        'nadie',\n\t        'ni',\n\t        'ninguna',\n\t        'ningunas',\n\t        'ninguno',\n\t        'ningunos',\n\t        'ningún',\n\t        'no',\n\t        'nos',\n\t        'nosotras',\n\t        'nosotros',\n\t        'nuestra',\n\t        'nuestras',\n\t        'nuestro',\n\t        'nuestros',\n\t        'nueva',\n\t        'nuevas',\n\t        'nuevo',\n\t        'nuevos',\n\t        'nunca',\n\t        'o',\n\t        'ocho',\n\t        'os',\n\t        'otra',\n\t        'otras',\n\t        'otro',\n\t        'otros',\n\t        'p',\n\t        'pais',\n\t        'para',\n\t        'parece',\n\t        'parte',\n\t        'partir',\n\t        'pasada',\n\t        'pasado',\n\t        'paìs',\n\t        'peor',\n\t        'pero',\n\t        'pesar',\n\t        'poca',\n\t        'pocas',\n\t        'poco',\n\t        'pocos',\n\t        'podeis',\n\t        'podemos',\n\t        'poder',\n\t        'podria',\n\t        'podriais',\n\t        'podriamos',\n\t        'podrian',\n\t        'podrias',\n\t        'podrá',\n\t        'podrán',\n\t        'podría',\n\t        'podrían',\n\t        'poner',\n\t        'por',\n\t        'por qué',\n\t        'porque',\n\t        'posible',\n\t        'primer',\n\t        'primera',\n\t        'primero',\n\t        'primeros',\n\t        'principalmente',\n\t        'pronto',\n\t        'propia',\n\t        'propias',\n\t        'propio',\n\t        'propios',\n\t        'proximo',\n\t        'próximo',\n\t        'próximos',\n\t        'pudo',\n\t        'pueda',\n\t        'puede',\n\t        'pueden',\n\t        'puedo',\n\t        'pues',\n\t        'q',\n\t        'qeu',\n\t        'que',\n\t        'quedó',\n\t        'queremos',\n\t        'quien',\n\t        'quienes',\n\t        'quiere',\n\t        'quiza',\n\t        'quizas',\n\t        'quizá',\n\t        'quizás',\n\t        'quién',\n\t        'quiénes',\n\t        'qué',\n\t        'r',\n\t        'raras',\n\t        'realizado',\n\t        'realizar',\n\t        'realizó',\n\t        'repente',\n\t        'respecto',\n\t        's',\n\t        'sabe',\n\t        'sabeis',\n\t        'sabemos',\n\t        'saben',\n\t        'saber',\n\t        'sabes',\n\t        'sal',\n\t        'salvo',\n\t        'se',\n\t        'sea',\n\t        'seamos',\n\t        'sean',\n\t        'seas',\n\t        'segun',\n\t        'segunda',\n\t        'segundo',\n\t        'según',\n\t        'seis',\n\t        'ser',\n\t        'sera',\n\t        'seremos',\n\t        'será',\n\t        'serán',\n\t        'serás',\n\t        'seré',\n\t        'seréis',\n\t        'sería',\n\t        'seríais',\n\t        'seríamos',\n\t        'serían',\n\t        'serías',\n\t        'seáis',\n\t        'señaló',\n\t        'si',\n\t        'sido',\n\t        'siempre',\n\t        'siendo',\n\t        'siete',\n\t        'sigue',\n\t        'siguiente',\n\t        'sin',\n\t        'sino',\n\t        'sobre',\n\t        'sois',\n\t        'sola',\n\t        'solamente',\n\t        'solas',\n\t        'solo',\n\t        'solos',\n\t        'somos',\n\t        'son',\n\t        'soy',\n\t        'soyos',\n\t        'su',\n\t        'supuesto',\n\t        'sus',\n\t        'suya',\n\t        'suyas',\n\t        'suyo',\n\t        'suyos',\n\t        'sé',\n\t        'sí',\n\t        'sólo',\n\t        't',\n\t        'tal',\n\t        'tambien',\n\t        'también',\n\t        'tampoco',\n\t        'tan',\n\t        'tanto',\n\t        'tarde',\n\t        'te',\n\t        'temprano',\n\t        'tendremos',\n\t        'tendrá',\n\t        'tendrán',\n\t        'tendrás',\n\t        'tendré',\n\t        'tendréis',\n\t        'tendría',\n\t        'tendríais',\n\t        'tendríamos',\n\t        'tendrían',\n\t        'tendrías',\n\t        'tened',\n\t        'teneis',\n\t        'tenemos',\n\t        'tener',\n\t        'tenga',\n\t        'tengamos',\n\t        'tengan',\n\t        'tengas',\n\t        'tengo',\n\t        'tengáis',\n\t        'tenida',\n\t        'tenidas',\n\t        'tenido',\n\t        'tenidos',\n\t        'teniendo',\n\t        'tenéis',\n\t        'tenía',\n\t        'teníais',\n\t        'teníamos',\n\t        'tenían',\n\t        'tenías',\n\t        'tercera',\n\t        'ti',\n\t        'tiempo',\n\t        'tiene',\n\t        'tienen',\n\t        'tienes',\n\t        'toda',\n\t        'todas',\n\t        'todavia',\n\t        'todavía',\n\t        'todo',\n\t        'todos',\n\t        'total',\n\t        'trabaja',\n\t        'trabajais',\n\t        'trabajamos',\n\t        'trabajan',\n\t        'trabajar',\n\t        'trabajas',\n\t        'trabajo',\n\t        'tras',\n\t        'trata',\n\t        'través',\n\t        'tres',\n\t        'tu',\n\t        'tus',\n\t        'tuve',\n\t        'tuviera',\n\t        'tuvierais',\n\t        'tuvieran',\n\t        'tuvieras',\n\t        'tuvieron',\n\t        'tuviese',\n\t        'tuvieseis',\n\t        'tuviesen',\n\t        'tuvieses',\n\t        'tuvimos',\n\t        'tuviste',\n\t        'tuvisteis',\n\t        'tuviéramos',\n\t        'tuviésemos',\n\t        'tuvo',\n\t        'tuya',\n\t        'tuyas',\n\t        'tuyo',\n\t        'tuyos',\n\t        'tú',\n\t        'u',\n\t        'ultimo',\n\t        'un',\n\t        'una',\n\t        'unas',\n\t        'uno',\n\t        'unos',\n\t        'usa',\n\t        'usais',\n\t        'usamos',\n\t        'usan',\n\t        'usar',\n\t        'usas',\n\t        'uso',\n\t        'usted',\n\t        'ustedes',\n\t        'v',\n\t        'va',\n\t        'vais',\n\t        'valor',\n\t        'vamos',\n\t        'van',\n\t        'varias',\n\t        'varios',\n\t        'vaya',\n\t        'veces',\n\t        'ver',\n\t        'verdad',\n\t        'verdadera',\n\t        'verdadero',\n\t        'vez',\n\t        'vosotras',\n\t        'vosotros',\n\t        'voy',\n\t        'vuestra',\n\t        'vuestras',\n\t        'vuestro',\n\t        'vuestros',\n\t        'w',\n\t        'x',\n\t        'y',\n\t        'ya',\n\t        'yo',\n\t        'z',\n\t        'él',\n\t        'éramos',\n\t        'ésa',\n\t        'ésas',\n\t        'ése',\n\t        'ésos',\n\t        'ésta',\n\t        'éstas',\n\t        'éste',\n\t        'éstos',\n\t        'última',\n\t        'últimas',\n\t        'último',\n\t        'últimos'\n\t    ]\n\t\n\t};\n\n\n/***/ }),\n\n/***/ 397:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by jan on 9-3-15.\n\t */\n\t// French stopwords\n\t// via https://code.google.com/p/stop-words/\n\t\n\tmodule.exports = {\n\t    stopwords: [\n\t        \"a\",\n\t        \"à\",\n\t        \"â\",\n\t        \"abord\",\n\t        \"afin\",\n\t        \"ah\",\n\t        \"ai\",\n\t        \"aie\",\n\t        \"ainsi\",\n\t        \"allaient\",\n\t        \"allo\",\n\t        \"allô\",\n\t        \"allons\",\n\t        \"après\",\n\t        \"assez\",\n\t        \"attendu\",\n\t        \"au\",\n\t        \"aucun\",\n\t        \"aucune\",\n\t        \"aujourd\",\n\t        \"aujourd'hui\",\n\t        \"auquel\",\n\t        \"aura\",\n\t        \"auront\",\n\t        \"aussi\",\n\t        \"autre\",\n\t        \"autres\",\n\t        \"aux\",\n\t        \"auxquelles\",\n\t        \"auxquels\",\n\t        \"avaient\",\n\t        \"avais\",\n\t        \"avait\",\n\t        \"avant\",\n\t        \"avec\",\n\t        \"avoir\",\n\t        \"ayant\",\n\t        \"b\",\n\t        \"bah\",\n\t        \"beaucoup\",\n\t        \"bien\",\n\t        \"bigre\",\n\t        \"boum\",\n\t        \"bravo\",\n\t        \"brrr\",\n\t        \"c\",\n\t        \"ça\",\n\t        \"car\",\n\t        \"ce\",\n\t        \"ceci\",\n\t        \"cela\",\n\t        \"celle\",\n\t        \"celle-ci\",\n\t        \"celle-là\",\n\t        \"celles\",\n\t        \"celles-ci\",\n\t        \"celles-là\",\n\t        \"celui\",\n\t        \"celui-ci\",\n\t        \"celui-là\",\n\t        \"cent\",\n\t        \"cependant\",\n\t        \"certain\",\n\t        \"certaine\",\n\t        \"certaines\",\n\t        \"certains\",\n\t        \"certes\",\n\t        \"ces\",\n\t        \"cet\",\n\t        \"cette\",\n\t        \"ceux\",\n\t        \"ceux-ci\",\n\t        \"ceux-là\",\n\t        \"chacun\",\n\t        \"chaque\",\n\t        \"cher\",\n\t        \"chère\",\n\t        \"chères\",\n\t        \"chers\",\n\t        \"chez\",\n\t        \"chiche\",\n\t        \"chut\",\n\t        \"ci\",\n\t        \"cinq\",\n\t        \"cinquantaine\",\n\t        \"cinquante\",\n\t        \"cinquantième\",\n\t        \"cinquième\",\n\t        \"clac\",\n\t        \"clic\",\n\t        \"combien\",\n\t        \"comme\",\n\t        \"comment\",\n\t        \"compris\",\n\t        \"concernant\",\n\t        \"contre\",\n\t        \"couic\",\n\t        \"crac\",\n\t        \"d\",\n\t        \"da\",\n\t        \"dans\",\n\t        \"de\",\n\t        \"debout\",\n\t        \"dedans\",\n\t        \"dehors\",\n\t        \"delà\",\n\t        \"depuis\",\n\t        \"derrière\",\n\t        \"des\",\n\t        \"dès\",\n\t        \"désormais\",\n\t        \"desquelles\",\n\t        \"desquels\",\n\t        \"dessous\",\n\t        \"dessus\",\n\t        \"deux\",\n\t        \"deuxième\",\n\t        \"deuxièmement\",\n\t        \"devant\",\n\t        \"devers\",\n\t        \"devra\",\n\t        \"différent\",\n\t        \"différente\",\n\t        \"différentes\",\n\t        \"différents\",\n\t        \"dire\",\n\t        \"divers\",\n\t        \"diverse\",\n\t        \"diverses\",\n\t        \"dix\",\n\t        \"dix-huit\",\n\t        \"dixième\",\n\t        \"dix-neuf\",\n\t        \"dix-sept\",\n\t        \"doit\",\n\t        \"doivent\",\n\t        \"donc\",\n\t        \"dont\",\n\t        \"douze\",\n\t        \"douzième\",\n\t        \"dring\",\n\t        \"du\",\n\t        \"duquel\",\n\t        \"durant\",\n\t        \"e\",\n\t        \"effet\",\n\t        \"eh\",\n\t        \"elle\",\n\t        \"elle-même\",\n\t        \"elles\",\n\t        \"elles-mêmes\",\n\t        \"en\",\n\t        \"encore\",\n\t        \"entre\",\n\t        \"envers\",\n\t        \"environ\",\n\t        \"es\",\n\t        \"ès\",\n\t        \"est\",\n\t        \"et\",\n\t        \"etant\",\n\t        \"étaient\",\n\t        \"étais\",\n\t        \"était\",\n\t        \"étant\",\n\t        \"etc\",\n\t        \"été\",\n\t        \"etre\",\n\t        \"être\",\n\t        \"eu\",\n\t        \"euh\",\n\t        \"eux\",\n\t        \"eux-mêmes\",\n\t        \"excepté\",\n\t        \"f\",\n\t        \"façon\",\n\t        \"fais\",\n\t        \"faisaient\",\n\t        \"faisant\",\n\t        \"fait\",\n\t        \"feront\",\n\t        \"fi\",\n\t        \"flac\",\n\t        \"floc\",\n\t        \"font\",\n\t        \"g\",\n\t        \"gens\",\n\t        \"h\",\n\t        \"ha\",\n\t        \"hé\",\n\t        \"hein\",\n\t        \"hélas\",\n\t        \"hem\",\n\t        \"hep\",\n\t        \"hi\",\n\t        \"ho\",\n\t        \"holà\",\n\t        \"hop\",\n\t        \"hormis\",\n\t        \"hors\",\n\t        \"hou\",\n\t        \"houp\",\n\t        \"hue\",\n\t        \"hui\",\n\t        \"huit\",\n\t        \"huitième\",\n\t        \"hum\",\n\t        \"hurrah\",\n\t        \"i\",\n\t        \"il\",\n\t        \"ils\",\n\t        \"importe\",\n\t        \"j\",\n\t        \"je\",\n\t        \"jusqu\",\n\t        \"jusque\",\n\t        \"k\",\n\t        \"l\",\n\t        \"la\",\n\t        \"là\",\n\t        \"laquelle\",\n\t        \"las\",\n\t        \"le\",\n\t        \"lequel\",\n\t        \"les\",\n\t        \"lès\",\n\t        \"lesquelles\",\n\t        \"lesquels\",\n\t        \"leur\",\n\t        \"leurs\",\n\t        \"longtemps\",\n\t        \"lorsque\",\n\t        \"lui\",\n\t        \"lui-même\",\n\t        \"m\",\n\t        \"ma\",\n\t        \"maint\",\n\t        \"mais\",\n\t        \"malgré\",\n\t        \"me\",\n\t        \"même\",\n\t        \"mêmes\",\n\t        \"merci\",\n\t        \"mes\",\n\t        \"mien\",\n\t        \"mienne\",\n\t        \"miennes\",\n\t        \"miens\",\n\t        \"mille\",\n\t        \"mince\",\n\t        \"moi\",\n\t        \"moi-même\",\n\t        \"moins\",\n\t        \"mon\",\n\t        \"moyennant\",\n\t        \"n\",\n\t        \"na\",\n\t        \"ne\",\n\t        \"néanmoins\",\n\t        \"neuf\",\n\t        \"neuvième\",\n\t        \"ni\",\n\t        \"nombreuses\",\n\t        \"nombreux\",\n\t        \"non\",\n\t        \"nos\",\n\t        \"notre\",\n\t        \"nôtre\",\n\t        \"nôtres\",\n\t        \"nous\",\n\t        \"nous-mêmes\",\n\t        \"nul\",\n\t        \"o\",\n\t        \"o|\",\n\t        \"ô\",\n\t        \"oh\",\n\t        \"ohé\",\n\t        \"olé\",\n\t        \"ollé\",\n\t        \"on\",\n\t        \"ont\",\n\t        \"onze\",\n\t        \"onzième\",\n\t        \"ore\",\n\t        \"ou\",\n\t        \"où\",\n\t        \"ouf\",\n\t        \"ouias\",\n\t        \"oust\",\n\t        \"ouste\",\n\t        \"outre\",\n\t        \"p\",\n\t        \"paf\",\n\t        \"pan\",\n\t        \"par\",\n\t        \"parmi\",\n\t        \"partant\",\n\t        \"particulier\",\n\t        \"particulière\",\n\t        \"particulièrement\",\n\t        \"pas\",\n\t        \"passé\",\n\t        \"pendant\",\n\t        \"personne\",\n\t        \"peu\",\n\t        \"peut\",\n\t        \"peuvent\",\n\t        \"peux\",\n\t        \"pff\",\n\t        \"pfft\",\n\t        \"pfut\",\n\t        \"pif\",\n\t        \"plein\",\n\t        \"plouf\",\n\t        \"plus\",\n\t        \"plusieurs\",\n\t        \"plutôt\",\n\t        \"pouah\",\n\t        \"pour\",\n\t        \"pourquoi\",\n\t        \"premier\",\n\t        \"première\",\n\t        \"premièrement\",\n\t        \"près\",\n\t        \"proche\",\n\t        \"psitt\",\n\t        \"puisque\",\n\t        \"q\",\n\t        \"qu\",\n\t        \"quand\",\n\t        \"quant\",\n\t        \"quanta\",\n\t        \"quant-à-soi\",\n\t        \"quarante\",\n\t        \"quatorze\",\n\t        \"quatre\",\n\t        \"quatre-vingt\",\n\t        \"quatrième\",\n\t        \"quatrièmement\",\n\t        \"que\",\n\t        \"quel\",\n\t        \"quelconque\",\n\t        \"quelle\",\n\t        \"quelles\",\n\t        \"quelque\",\n\t        \"quelques\",\n\t        \"quelqu'un\",\n\t        \"quels\",\n\t        \"qui\",\n\t        \"quiconque\",\n\t        \"quinze\",\n\t        \"quoi\",\n\t        \"quoique\",\n\t        \"r\",\n\t        \"revoici\",\n\t        \"revoilà\",\n\t        \"rien\",\n\t        \"s\",\n\t        \"sa\",\n\t        \"sacrebleu\",\n\t        \"sans\",\n\t        \"sapristi\",\n\t        \"sauf\",\n\t        \"se\",\n\t        \"seize\",\n\t        \"selon\",\n\t        \"sept\",\n\t        \"septième\",\n\t        \"sera\",\n\t        \"seront\",\n\t        \"ses\",\n\t        \"si\",\n\t        \"sien\",\n\t        \"sienne\",\n\t        \"siennes\",\n\t        \"siens\",\n\t        \"sinon\",\n\t        \"six\",\n\t        \"sixième\",\n\t        \"soi\",\n\t        \"soi-même\",\n\t        \"soit\",\n\t        \"soixante\",\n\t        \"son\",\n\t        \"sont\",\n\t        \"sous\",\n\t        \"stop\",\n\t        \"suis\",\n\t        \"suivant\",\n\t        \"sur\",\n\t        \"surtout\",\n\t        \"t\",\n\t        \"ta\",\n\t        \"tac\",\n\t        \"tant\",\n\t        \"te\",\n\t        \"té\",\n\t        \"tel\",\n\t        \"telle\",\n\t        \"tellement\",\n\t        \"telles\",\n\t        \"tels\",\n\t        \"tenant\",\n\t        \"tes\",\n\t        \"tic\",\n\t        \"tien\",\n\t        \"tienne\",\n\t        \"tiennes\",\n\t        \"tiens\",\n\t        \"toc\",\n\t        \"toi\",\n\t        \"toi-même\",\n\t        \"ton\",\n\t        \"touchant\",\n\t        \"toujours\",\n\t        \"tous\",\n\t        \"tout\",\n\t        \"toute\",\n\t        \"toutes\",\n\t        \"treize\",\n\t        \"trente\",\n\t        \"très\",\n\t        \"trois\",\n\t        \"troisième\",\n\t        \"troisièmement\",\n\t        \"trop\",\n\t        \"tsoin\",\n\t        \"tsouin\",\n\t        \"tu\",\n\t        \"u\",\n\t        \"un\",\n\t        \"une\",\n\t        \"unes\",\n\t        \"uns\",\n\t        \"v\",\n\t        \"va\",\n\t        \"vais\",\n\t        \"vas\",\n\t        \"vé\",\n\t        \"vers\",\n\t        \"via\",\n\t        \"vif\",\n\t        \"vifs\",\n\t        \"vingt\",\n\t        \"vivat\",\n\t        \"vive\",\n\t        \"vives\",\n\t        \"vlan\",\n\t        \"voici\",\n\t        \"voilà\",\n\t        \"vont\",\n\t        \"vos\",\n\t        \"votre\",\n\t        \"vôtre\",\n\t        \"vôtres\",\n\t        \"vous\",\n\t        \"vous-mêmes\",\n\t        \"vu\",\n\t        \"w\",\n\t        \"x\",\n\t        \"y\",\n\t        \"z\",\n\t        \"zut\",\n\t        \"﻿alors\",\n\t        \"aucuns\",\n\t        \"bon\",\n\t        \"devrait\",\n\t        \"dos\",\n\t        \"droite\",\n\t        \"début\",\n\t        \"essai\",\n\t        \"faites\",\n\t        \"fois\",\n\t        \"force\",\n\t        \"haut\",\n\t        \"ici\",\n\t        \"juste\",\n\t        \"maintenant\",\n\t        \"mine\",\n\t        \"mot\",\n\t        \"nommés\",\n\t        \"nouveaux\",\n\t        \"parce\",\n\t        \"parole\",\n\t        \"personnes\",\n\t        \"pièce\",\n\t        \"plupart\",\n\t        \"seulement\",\n\t        \"soyez\",\n\t        \"sujet\",\n\t        \"tandis\",\n\t        \"valeur\",\n\t        \"voie\",\n\t        \"voient\",\n\t        \"état\",\n\t        \"étions\"\n\t\n\t    ]\n\t\n\t};\n\n\n/***/ }),\n\n/***/ 398:\n/***/ (function(module, exports) {\n\n\t//  via http://www.ranks.nl/stopwords/galician\n\tmodule.exports = {\n\t    stopwords: [\n\t        'a',\n\t        'aínda',\n\t        'alí',\n\t        'aquel',\n\t        'aquela',\n\t        'aquelas',\n\t        'aqueles',\n\t        'aquilo',\n\t        'aquí',\n\t        'ao',\n\t        'aos',\n\t        'as',\n\t        'así',\n\t        'á',\n\t        'ben',\n\t        'cando',\n\t        'che',\n\t        'co',\n\t        'coa',\n\t        'comigo',\n\t        'con',\n\t        'connosco',\n\t        'contigo',\n\t        'convosco',\n\t        'coas',\n\t        'cos',\n\t        'cun',\n\t        'cuns',\n\t        'cunha',\n\t        'cunhas',\n\t        'da',\n\t        'dalgunha',\n\t        'dalgunhas',\n\t        'dalgún',\n\t        'dalgúns',\n\t        'das',\n\t        'de',\n\t        'del',\n\t        'dela',\n\t        'delas',\n\t        'deles',\n\t        'desde',\n\t        'deste',\n\t        'do',\n\t        'dos',\n\t        'dun',\n\t        'duns',\n\t        'dunha',\n\t        'dunhas',\n\t        'e',\n\t        'el',\n\t        'ela',\n\t        'elas',\n\t        'eles',\n\t        'en',\n\t        'era',\n\t        'eran',\n\t        'esa',\n\t        'esas',\n\t        'ese',\n\t        'eses',\n\t        'esta',\n\t        'estar',\n\t        'estaba',\n\t        'está',\n\t        'están',\n\t        'este',\n\t        'estes',\n\t        'estiven',\n\t        'estou',\n\t        'eu',\n\t        'é',\n\t        'facer',\n\t        'foi',\n\t        'foron',\n\t        'fun',\n\t        'había',\n\t        'hai',\n\t        'iso',\n\t        'isto',\n\t        'la',\n\t        'las',\n\t        'lle',\n\t        'lles',\n\t        'lo',\n\t        'los',\n\t        'mais',\n\t        'me',\n\t        'meu',\n\t        'meus',\n\t        'min',\n\t        'miña',\n\t        'miñas',\n\t        'moi',\n\t        'na',\n\t        'nas',\n\t        'neste',\n\t        'nin',\n\t        'no',\n\t        'non',\n\t        'nos',\n\t        'nosa',\n\t        'nosas',\n\t        'noso',\n\t        'nosos',\n\t        'nós',\n\t        'nun',\n\t        'nunha',\n\t        'nuns',\n\t        'nunhas',\n\t        'o',\n\t        'os',\n\t        'ou',\n\t        'ó',\n\t        'ós',\n\t        'para',\n\t        'pero',\n\t        'pode',\n\t        'pois',\n\t        'pola',\n\t        'polas',\n\t        'polo',\n\t        'polos',\n\t        'por',\n\t        'que',\n\t        'se',\n\t        'senón',\n\t        'ser',\n\t        'seu',\n\t        'seus',\n\t        'sexa',\n\t        'sido',\n\t        'sobre',\n\t        'súa',\n\t        'súas',\n\t        'tamén',\n\t        'tan',\n\t        'te',\n\t        'ten',\n\t        'teñen',\n\t        'teño',\n\t        'ter',\n\t        'teu',\n\t        'teus',\n\t        'ti',\n\t        'tido',\n\t        'tiña',\n\t        'tiven',\n\t        'túa',\n\t        'túas',\n\t        'un',\n\t        'unha',\n\t        'unhas',\n\t        'uns',\n\t        'vos',\n\t        'vosa',\n\t        'vosas',\n\t        'voso',\n\t        'vosos',\n\t        'vós'\n\t    ]\n\t};\n\n\n/***/ }),\n\n/***/ 399:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by jan on 9-3-15.\n\t */\n\t// Italian stopwords\n\t// via https://code.google.com/p/stop-words/\n\t\n\tmodule.exports = {\n\t    stopwords: [\n\t        \"a\",\n\t        \"adesso\",\n\t        \"ai\",\n\t        \"al\",\n\t        \"alla\",\n\t        \"allo\",\n\t        \"allora\",\n\t        \"altre\",\n\t        \"altri\",\n\t        \"altro\",\n\t        \"anche\",\n\t        \"ancora\",\n\t        \"avere\",\n\t        \"aveva\",\n\t        \"avevano\",\n\t        \"ben\",\n\t        \"buono\",\n\t        \"che\",\n\t        \"chi\",\n\t        \"cinque\",\n\t        \"comprare\",\n\t        \"con\",\n\t        \"consecutivi\",\n\t        \"consecutivo\",\n\t        \"cosa\",\n\t        \"cui\",\n\t        \"da\",\n\t        \"del\",\n\t        \"della\",\n\t        \"dello\",\n\t        \"dentro\",\n\t        \"deve\",\n\t        \"devo\",\n\t        \"di\",\n\t        \"doppio\",\n\t        \"due\",\n\t        \"e\",\n\t        \"ecco\",\n\t        \"fare\",\n\t        \"fine\",\n\t        \"fino\",\n\t        \"fra\",\n\t        \"gente\",\n\t        \"giu\",\n\t        \"ha\",\n\t        \"hai\",\n\t        \"hanno\",\n\t        \"ho\",\n\t        \"il\",\n\t        \"indietro\",\n\t        \"invece\",\n\t        \"io\",\n\t        \"la\",\n\t        \"lavoro\",\n\t        \"le\",\n\t        \"lei\",\n\t        \"lo\",\n\t        \"loro\",\n\t        \"lui\",\n\t        \"lungo\",\n\t        \"ma\",\n\t        \"me\",\n\t        \"meglio\",\n\t        \"molta\",\n\t        \"molti\",\n\t        \"molto\",\n\t        \"nei\",\n\t        \"nella\",\n\t        \"no\",\n\t        \"noi\",\n\t        \"nome\",\n\t        \"nostro\",\n\t        \"nove\",\n\t        \"nuovi\",\n\t        \"nuovo\",\n\t        \"o\",\n\t        \"oltre\",\n\t        \"ora\",\n\t        \"otto\",\n\t        \"peggio\",\n\t        \"pero\",\n\t        \"persone\",\n\t        \"piu\",\n\t        \"poco\",\n\t        \"primo\",\n\t        \"promesso\",\n\t        \"qua\",\n\t        \"quarto\",\n\t        \"quasi\",\n\t        \"quattro\",\n\t        \"quello\",\n\t        \"questo\",\n\t        \"qui\",\n\t        \"quindi\",\n\t        \"quinto\",\n\t        \"rispetto\",\n\t        \"sara\",\n\t        \"secondo\",\n\t        \"sei\",\n\t        \"sembra\",\n\t        \"sembrava\",\n\t        \"senza\",\n\t        \"sette\",\n\t        \"sia\",\n\t        \"siamo\",\n\t        \"siete\",\n\t        \"solo\",\n\t        \"sono\",\n\t        \"sopra\",\n\t        \"soprattutto\",\n\t        \"sotto\",\n\t        \"stati\",\n\t        \"stato\",\n\t        \"stesso\",\n\t        \"su\",\n\t        \"subito\",\n\t        \"sul\",\n\t        \"sulla\",\n\t        \"tanto\",\n\t        \"te\",\n\t        \"tempo\",\n\t        \"terzo\",\n\t        \"tra\",\n\t        \"tre\",\n\t        \"triplo\",\n\t        \"ultimo\",\n\t        \"un\",\n\t        \"una\",\n\t        \"uno\",\n\t        \"va\",\n\t        \"vai\",\n\t        \"voi\",\n\t        \"volte\",\n\t        \"vostro\",\n\t        \"a\",\n\t        \"abbastanza\",\n\t        \"accidenti\",\n\t        \"ad\",\n\t        \"affinche\",\n\t        \"agli\",\n\t        \"ahime\",\n\t        \"ahimÃ\",\n\t        \"alcuna\",\n\t        \"alcuni\",\n\t        \"alcuno\",\n\t        \"all\",\n\t        \"alle\",\n\t        \"altrimenti\",\n\t        \"altrui\",\n\t        \"anni\",\n\t        \"anno\",\n\t        \"ansa\",\n\t        \"assai\",\n\t        \"attesa\",\n\t        \"avanti\",\n\t        \"avendo\",\n\t        \"avente\",\n\t        \"aver\",\n\t        \"avete\",\n\t        \"avuta\",\n\t        \"avute\",\n\t        \"avuti\",\n\t        \"avuto\",\n\t        \"basta\",\n\t        \"bene\",\n\t        \"benissimo\",\n\t        \"berlusconi\",\n\t        \"brava\",\n\t        \"bravo\",\n\t        \"c\",\n\t        \"casa\",\n\t        \"caso\",\n\t        \"cento\",\n\t        \"certa\",\n\t        \"certe\",\n\t        \"certi\",\n\t        \"certo\",\n\t        \"chicchessia\",\n\t        \"chiunque\",\n\t        \"ci\",\n\t        \"ciascuna\",\n\t        \"ciascuno\",\n\t        \"cima\",\n\t        \"cio\",\n\t        \"ciÃ\",\n\t        \"cioe\",\n\t        \"cioÃ\",\n\t        \"circa\",\n\t        \"citta\",\n\t        \"cittÃ\",\n\t        \"codesta\",\n\t        \"codesti\",\n\t        \"codesto\",\n\t        \"cogli\",\n\t        \"coi\",\n\t        \"col\",\n\t        \"colei\",\n\t        \"coll\",\n\t        \"coloro\",\n\t        \"colui\",\n\t        \"come\",\n\t        \"concernente\",\n\t        \"consiglio\",\n\t        \"contro\",\n\t        \"cortesia\",\n\t        \"cos\",\n\t        \"cosi\",\n\t        \"cosÃ\",\n\t        \"d\",\n\t        \"dagli\",\n\t        \"dai\",\n\t        \"dal\",\n\t        \"dall\",\n\t        \"dalla\",\n\t        \"dalle\",\n\t        \"dallo\",\n\t        \"davanti\",\n\t        \"degli\",\n\t        \"dei\",\n\t        \"dell\",\n\t        \"delle\",\n\t        \"detto\",\n\t        \"dice\",\n\t        \"dietro\",\n\t        \"dire\",\n\t        \"dirimpetto\",\n\t        \"dopo\",\n\t        \"dove\",\n\t        \"dovra\",\n\t        \"dovrÃ\",\n\t        \"dunque\",\n\t        \"durante\",\n\t        \"Ã\",\n\t        \"ed\",\n\t        \"egli\",\n\t        \"ella\",\n\t        \"eppure\",\n\t        \"era\",\n\t        \"erano\",\n\t        \"esse\",\n\t        \"essendo\",\n\t        \"esser\",\n\t        \"essere\",\n\t        \"essi\",\n\t        \"ex\",\n\t        \"fa\",\n\t        \"fatto\",\n\t        \"favore\",\n\t        \"fin\",\n\t        \"finalmente\",\n\t        \"finche\",\n\t        \"forse\",\n\t        \"fuori\",\n\t        \"gia\",\n\t        \"giÃ\",\n\t        \"giacche\",\n\t        \"giorni\",\n\t        \"giorno\",\n\t        \"gli\",\n\t        \"gliela\",\n\t        \"gliele\",\n\t        \"glieli\",\n\t        \"glielo\",\n\t        \"gliene\",\n\t        \"governo\",\n\t        \"grande\",\n\t        \"grazie\",\n\t        \"gruppo\",\n\t        \"i\",\n\t        \"ieri\",\n\t        \"improvviso\",\n\t        \"in\",\n\t        \"infatti\",\n\t        \"insieme\",\n\t        \"intanto\",\n\t        \"intorno\",\n\t        \"l\",\n\t        \"lÃ\",\n\t        \"li\",\n\t        \"lontano\",\n\t        \"macche\",\n\t        \"magari\",\n\t        \"mai\",\n\t        \"male\",\n\t        \"malgrado\",\n\t        \"malissimo\",\n\t        \"medesimo\",\n\t        \"mediante\",\n\t        \"meno\",\n\t        \"mentre\",\n\t        \"mesi\",\n\t        \"mezzo\",\n\t        \"mi\",\n\t        \"mia\",\n\t        \"mie\",\n\t        \"miei\",\n\t        \"mila\",\n\t        \"miliardi\",\n\t        \"milioni\",\n\t        \"ministro\",\n\t        \"mio\",\n\t        \"moltissimo\",\n\t        \"mondo\",\n\t        \"nazionale\",\n\t        \"ne\",\n\t        \"negli\",\n\t        \"nel\",\n\t        \"nell\",\n\t        \"nelle\",\n\t        \"nello\",\n\t        \"nemmeno\",\n\t        \"neppure\",\n\t        \"nessuna\",\n\t        \"nessuno\",\n\t        \"niente\",\n\t        \"non\",\n\t        \"nondimeno\",\n\t        \"nostra\",\n\t        \"nostre\",\n\t        \"nostri\",\n\t        \"nulla\",\n\t        \"od\",\n\t        \"oggi\",\n\t        \"ogni\",\n\t        \"ognuna\",\n\t        \"ognuno\",\n\t        \"oppure\",\n\t        \"ore\",\n\t        \"osi\",\n\t        \"ossia\",\n\t        \"paese\",\n\t        \"parecchi\",\n\t        \"parecchie\",\n\t        \"parecchio\",\n\t        \"parte\",\n\t        \"partendo\",\n\t        \"peccato\",\n\t        \"per\",\n\t        \"perche\",\n\t        \"perchÃ\",\n\t        \"percio\",\n\t        \"perciÃ\",\n\t        \"perfino\",\n\t        \"perÃ\",\n\t        \"piedi\",\n\t        \"pieno\",\n\t        \"piglia\",\n\t        \"piÃ\",\n\t        \"po\",\n\t        \"pochissimo\",\n\t        \"poi\",\n\t        \"poiche\",\n\t        \"press\",\n\t        \"prima\",\n\t        \"proprio\",\n\t        \"puo\",\n\t        \"puÃ\",\n\t        \"pure\",\n\t        \"purtroppo\",\n\t        \"qualche\",\n\t        \"qualcuna\",\n\t        \"qualcuno\",\n\t        \"quale\",\n\t        \"quali\",\n\t        \"qualunque\",\n\t        \"quando\",\n\t        \"quanta\",\n\t        \"quante\",\n\t        \"quanti\",\n\t        \"quanto\",\n\t        \"quantunque\",\n\t        \"quel\",\n\t        \"quella\",\n\t        \"quelli\",\n\t        \"quest\",\n\t        \"questa\",\n\t        \"queste\",\n\t        \"questi\",\n\t        \"riecco\",\n\t        \"salvo\",\n\t        \"sarÃ\",\n\t        \"sarebbe\",\n\t        \"scopo\",\n\t        \"scorso\",\n\t        \"se\",\n\t        \"seguente\",\n\t        \"sempre\",\n\t        \"si\",\n\t        \"solito\",\n\t        \"sta\",\n\t        \"staranno\",\n\t        \"stata\",\n\t        \"state\",\n\t        \"sua\",\n\t        \"successivo\",\n\t        \"sue\",\n\t        \"sugli\",\n\t        \"sui\",\n\t        \"sull\",\n\t        \"sulle\",\n\t        \"sullo\",\n\t        \"suo\",\n\t        \"suoi\",\n\t        \"tale\",\n\t        \"talvolta\",\n\t        \"ti\",\n\t        \"torino\",\n\t        \"tranne\",\n\t        \"troppo\",\n\t        \"tu\",\n\t        \"tua\",\n\t        \"tue\",\n\t        \"tuo\",\n\t        \"tuoi\",\n\t        \"tutta\",\n\t        \"tuttavia\",\n\t        \"tutte\",\n\t        \"tutti\",\n\t        \"tutto\",\n\t        \"uguali\",\n\t        \"uomo\",\n\t        \"vale\",\n\t        \"varia\",\n\t        \"varie\",\n\t        \"vario\",\n\t        \"verso\",\n\t        \"vi\",\n\t        \"via\",\n\t        \"vicino\",\n\t        \"visto\",\n\t        \"vita\",\n\t        \"volta\",\n\t        \"vostra\",\n\t        \"vostre\",\n\t        \"vostri\"\n\t    ]\n\t};\n\n\n/***/ }),\n\n/***/ 400:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by jan on 9-3-15.\n\t */\n\t// Dutch stopwords\n\t// via https://code.google.com/p/stop-words/\n\t\n\t\n\t\n\tmodule.exports = {\n\t    stopwords:[\n\t        \"aan\",\n\t        \"af\",\n\t        \"al\",\n\t        \"als\",\n\t        \"bij\",\n\t        \"dan\",\n\t        \"dat\",\n\t        \"die\",\n\t        \"dit\",\n\t        \"een\",\n\t        \"en\",\n\t        \"er\",\n\t        \"had\",\n\t        \"heb\",\n\t        \"hem\",\n\t        \"het\",\n\t        \"hij\",\n\t        \"hoe\",\n\t        \"hun\",\n\t        \"ik\",\n\t        \"in\",\n\t        \"is\",\n\t        \"je\",\n\t        \"kan\",\n\t        \"me\",\n\t        \"men\",\n\t        \"met\",\n\t        \"mij\",\n\t        \"nog\",\n\t        \"nu\",\n\t        \"of\",\n\t        \"ons\",\n\t        \"ook\",\n\t        \"te\",\n\t        \"tot\",\n\t        \"uit\",\n\t        \"van\",\n\t        \"was\",\n\t        \"wat\",\n\t        \"we\",\n\t        \"wel\",\n\t        \"wij\",\n\t        \"zal\",\n\t        \"ze\",\n\t        \"zei\",\n\t        \"zij\",\n\t        \"zo\",\n\t        \"zou\",\n\t        \"aan\",\n\t        \"aangaande\",\n\t        \"aangezien\",\n\t        \"achter\",\n\t        \"achterna\",\n\t        \"afgelopen\",\n\t        \"al\",\n\t        \"aldaar\",\n\t        \"aldus\",\n\t        \"alhoewel\",\n\t        \"alias\",\n\t        \"alle\",\n\t        \"allebei\",\n\t        \"alleen\",\n\t        \"alsnog\",\n\t        \"altijd\",\n\t        \"altoos\",\n\t        \"ander\",\n\t        \"andere\",\n\t        \"anders\",\n\t        \"anderszins\",\n\t        \"behalve\",\n\t        \"behoudens\",\n\t        \"beide\",\n\t        \"beiden\",\n\t        \"ben\",\n\t        \"beneden\",\n\t        \"bent\",\n\t        \"bepaald\",\n\t        \"betreffende\",\n\t        \"bij\",\n\t        \"binnen\",\n\t        \"binnenin\",\n\t        \"boven\",\n\t        \"bovenal\",\n\t        \"bovendien\",\n\t        \"bovengenoemd\",\n\t        \"bovenstaand\",\n\t        \"bovenvermeld\",\n\t        \"buiten\",\n\t        \"daar\",\n\t        \"daarheen\",\n\t        \"daarin\",\n\t        \"daarna\",\n\t        \"daarnet\",\n\t        \"daarom\",\n\t        \"daarop\",\n\t        \"daarvanlangs\",\n\t        \"dan\",\n\t        \"dat\",\n\t        \"de\",\n\t        \"die\",\n\t        \"dikwijls\",\n\t        \"dit\",\n\t        \"door\",\n\t        \"doorgaand\",\n\t        \"dus\",\n\t        \"echter\",\n\t        \"eer\",\n\t        \"eerdat\",\n\t        \"eerder\",\n\t        \"eerlang\",\n\t        \"eerst\",\n\t        \"elk\",\n\t        \"elke\",\n\t        \"en\",\n\t        \"enig\",\n\t        \"enigszins\",\n\t        \"enkel\",\n\t        \"er\",\n\t        \"erdoor\",\n\t        \"even\",\n\t        \"eveneens\",\n\t        \"evenwel\",\n\t        \"gauw\",\n\t        \"gedurende\",\n\t        \"geen\",\n\t        \"gehad\",\n\t        \"gekund\",\n\t        \"geleden\",\n\t        \"gelijk\",\n\t        \"gemoeten\",\n\t        \"gemogen\",\n\t        \"geweest\",\n\t        \"gewoon\",\n\t        \"gewoonweg\",\n\t        \"haar\",\n\t        \"had\",\n\t        \"hadden\",\n\t        \"hare\",\n\t        \"heb\",\n\t        \"hebben\",\n\t        \"hebt\",\n\t        \"heeft\",\n\t        \"hem\",\n\t        \"hen\",\n\t        \"het\",\n\t        \"hierbeneden\",\n\t        \"hierboven\",\n\t        \"hij\",\n\t        \"hoe\",\n\t        \"hoewel\",\n\t        \"hun\",\n\t        \"hunne\",\n\t        \"ik\",\n\t        \"ikzelf\",\n\t        \"in\",\n\t        \"inmiddels\",\n\t        \"inzake\",\n\t        \"is\",\n\t        \"jezelf\",\n\t        \"jij\",\n\t        \"jijzelf\",\n\t        \"jou\",\n\t        \"jouw\",\n\t        \"jouwe\",\n\t        \"juist\",\n\t        \"jullie\",\n\t        \"kan\",\n\t        \"klaar\",\n\t        \"kon\",\n\t        \"konden\",\n\t        \"krachtens\",\n\t        \"kunnen\",\n\t        \"kunt\",\n\t        \"later\",\n\t        \"liever\",\n\t        \"maar\",\n\t        \"mag\",\n\t        \"meer\",\n\t        \"met\",\n\t        \"mezelf\",\n\t        \"mij\",\n\t        \"mijn\",\n\t        \"mijnent\",\n\t        \"mijner\",\n\t        \"mijzelf\",\n\t        \"misschien\",\n\t        \"mocht\",\n\t        \"mochten\",\n\t        \"moest\",\n\t        \"moesten\",\n\t        \"moet\",\n\t        \"moeten\",\n\t        \"mogen\",\n\t        \"na\",\n\t        \"naar\",\n\t        \"nadat\",\n\t        \"net\",\n\t        \"niet\",\n\t        \"noch\",\n\t        \"nog\",\n\t        \"nogal\",\n\t        \"nu\",\n\t        \"of\",\n\t        \"ofschoon\",\n\t        \"om\",\n\t        \"omdat\",\n\t        \"omhoog\",\n\t        \"omlaag\",\n\t        \"omstreeks\",\n\t        \"omtrent\",\n\t        \"omver\",\n\t        \"onder\",\n\t        \"ondertussen\",\n\t        \"ongeveer\",\n\t        \"ons\",\n\t        \"onszelf\",\n\t        \"onze\",\n\t        \"ook\",\n\t        \"op\",\n\t        \"opnieuw\",\n\t        \"opzij\",\n\t        \"over\",\n\t        \"overeind\",\n\t        \"overigens\",\n\t        \"pas\",\n\t        \"precies\",\n\t        \"reeds\",\n\t        \"rond\",\n\t        \"rondom\",\n\t        \"sedert\",\n\t        \"sinds\",\n\t        \"sindsdien\",\n\t        \"slechts\",\n\t        \"sommige\",\n\t        \"spoedig\",\n\t        \"steeds\",\n\t        \"tamelijk\",\n\t        \"tenzij\",\n\t        \"terwijl\",\n\t        \"thans\",\n\t        \"tijdens\",\n\t        \"toch\",\n\t        \"toen\",\n\t        \"toenmaals\",\n\t        \"toenmalig\",\n\t        \"tot\",\n\t        \"totdat\",\n\t        \"tussen\",\n\t        \"uit\",\n\t        \"uitgezonderd\",\n\t        \"vaakwat\",\n\t        \"van\",\n\t        \"vandaan\",\n\t        \"vanuit\",\n\t        \"vanwege\",\n\t        \"veeleer\",\n\t        \"verder\",\n\t        \"vervolgens\",\n\t        \"vol\",\n\t        \"volgens\",\n\t        \"voor\",\n\t        \"vooraf\",\n\t        \"vooral\",\n\t        \"vooralsnog\",\n\t        \"voorbij\",\n\t        \"voordat\",\n\t        \"voordezen\",\n\t        \"voordien\",\n\t        \"voorheen\",\n\t        \"voorop\",\n\t        \"vooruit\",\n\t        \"vrij\",\n\t        \"vroeg\",\n\t        \"waar\",\n\t        \"waarom\",\n\t        \"wanneer\",\n\t        \"want\",\n\t        \"waren\",\n\t        \"was\",\n\t        \"weer\",\n\t        \"weg\",\n\t        \"wegens\",\n\t        \"wel\",\n\t        \"weldra\",\n\t        \"welk\",\n\t        \"welke\",\n\t        \"wie\",\n\t        \"wiens\",\n\t        \"wier\",\n\t        \"wij\",\n\t        \"wijzelf\",\n\t        \"zal\",\n\t        \"ze\",\n\t        \"zelfs\",\n\t        \"zichzelf\",\n\t        \"zij\",\n\t        \"zijn\",\n\t        \"zijne\",\n\t        \"zo\",\n\t        \"zodra\",\n\t        \"zonder\",\n\t        \"zou\",\n\t        \"zouden\",\n\t        \"zowat\",\n\t        \"zulke\",\n\t        \"zullen\",\n\t        \"zult\"\n\t    ]\n\t};\n\t\n\n\n/***/ }),\n\n/***/ 401:\n/***/ (function(module, exports) {\n\n\t// via http://hackage.haskell.org/package/glider-nlp-0.1/docs/src/Glider-NLP-Language-Polish-StopWords.html\n\tmodule.exports = {\n\t    stopwords:[\n\t        \"a\",\n\t\"aby\",\n\t\"ach\",\n\t\"acz\",\n\t\"aczkolwiek\",\n\t\"aj\",\n\t\"albo\",\n\t\"ale\",\n\t\"alez\",\n\t\"ależ\",\n\t\"ani\",\n\t\"az\",\n\t\"aż\",\n\t\"bardziej\",\n\t\"bardzo\",\n\t\"bo\",\n\t\"bowiem\",\n\t\"by\",\n\t\"byli\",\n\t\"bynajmniej\",\n\t\"byc\",\n\t\"być\",\n\t\"byl\",\n\t\"był\",\n\t\"byla\",\n\t\"bylo\",\n\t\"byly\",\n\t\"była\",\n\t\"było\",\n\t\"były\",\n\t\"bedzie\",\n\t\"będzie\",\n\t\"beda\",\n\t\"będą\",\n\t\"cali\",\n\t\"cala\",\n\t\"cała\",\n\t\"caly\",\n\t\"cały\",\n\t\"ci\",\n\t\"cie\",\n\t\"cię\",\n\t\"ciebie\",\n\t\"co\",\n\t\"cokolwiek\",\n\t\"cos\",\n\t\"coś\",\n\t\"czasami\",\n\t\"czasem\",\n\t\"czemu\",\n\t\"czy\",\n\t\"czyli\",\n\t\"daleko\",\n\t\"dla\",\n\t\"dlaczego\",\n\t\"dlatego\",\n\t\"do\",\n\t\"dobrze\",\n\t\"dokad\",\n\t\"dokąd\",\n\t\"dosc\",\n\t\"dość\",\n\t\"duzo\",\n\t\"dużo\",\n\t\"dwa\",\n\t\"dwaj\",\n\t\"dwie\",\n\t\"dwoje\",\n\t\"dzis\",\n\t\"dziś\",\n\t\"dzisiaj\",\n\t\"gdy\",\n\t\"gdyby\",\n\t\"gdyz\",\n\t\"gdyż\",\n\t\"gdzie\",\n\t\"gdziekolwiek\",\n\t\"gdzies\",\n\t\"gdzieś\",\n\t\"go\",\n\t\"i\",\n\t\"ich\",\n\t\"ile\",\n\t\"im\",\n\t\"inna\",\n\t\"inne\",\n\t\"inny\",\n\t\"innych\",\n\t\"iz\",\n\t\"iż\",\n\t\"ja\",\n\t\"ją\",\n\t\"jak\",\n\t\"jakas\",\n\t\"jakaś\",\n\t\"jakby\",\n\t\"jaki\",\n\t\"jakichs\",\n\t\"jakichś\",\n\t\"jakie\",\n\t\"jakis\",\n\t\"jakiś\",\n\t\"jakiz\",\n\t\"jakiż\",\n\t\"jakkolwiek\",\n\t\"jako\",\n\t\"jakos\",\n\t\"jakoś\",\n\t\"je\",\n\t\"jeden\",\n\t\"jedna\",\n\t\"jedno\",\n\t\"jednak\",\n\t\"jednakze\",\n\t\"jednakże\",\n\t\"jego\",\n\t\"jej\",\n\t\"jemu\",\n\t\"jest\",\n\t\"jestem\",\n\t\"jeszcze\",\n\t\"jesli\",\n\t\"jeśli\",\n\t\"jezeli\",\n\t\"jeżeli\",\n\t\"juz\",\n\t\"już\",\n\t\"kazdy\",\n\t\"każdy\",\n\t\"kiedy\",\n\t\"kilka\",\n\t\"kims\",\n\t\"kimś\",\n\t\"kto\",\n\t\"ktokolwiek\",\n\t\"ktos\",\n\t\"ktoś\",\n\t\"ktora\",\n\t\"ktore\",\n\t\"które\",\n\t\"ktorego\",\n\t\"ktorej\",\n\t\"ktory\",\n\t\"ktorych\",\n\t\"ktorym\",\n\t\"ktorzy\",\n\t\"która\",\n\t\"którego\",\n\t\"której\",\n\t\"który\",\n\t\"których\",\n\t\"którym\",\n\t\"którzy\",\n\t\"ku\",\n\t\"lat\",\n\t\"lecz\",\n\t\"lub\",\n\t\"ma\",\n\t\"mają\",\n\t\"mało\",\n\t\"mam\",\n\t\"mi\",\n\t\"mimo\",\n\t\"miedzy\",\n\t\"między\",\n\t\"mna\",\n\t\"mną\",\n\t\"mnie\",\n\t\"moga\",\n\t\"mogą\",\n\t\"moi\",\n\t\"moim\",\n\t\"moja\",\n\t\"moje\",\n\t\"moze\",\n\t\"może\",\n\t\"mozliwe\",\n\t\"mozna\",\n\t\"możliwe\",\n\t\"można\",\n\t\"moj\",\n\t\"mój\",\n\t\"mu\",\n\t\"musi\",\n\t\"my\",\n\t\"na\",\n\t\"nad\",\n\t\"nam\",\n\t\"nami\",\n\t\"nas\",\n\t\"nasi\",\n\t\"nasz\",\n\t\"nasza\",\n\t\"nasze\",\n\t\"naszego\",\n\t\"naszych\",\n\t\"natomiast\",\n\t\"natychmiast\",\n\t\"nawet\",\n\t\"nia\",\n\t\"nią\",\n\t\"nic\",\n\t\"nich\",\n\t\"nie\",\n\t\"niech\",\n\t\"niego\",\n\t\"niej\",\n\t\"niemu\",\n\t\"nigdy\",\n\t\"nim\",\n\t\"nimi\",\n\t\"niz\",\n\t\"niż\",\n\t\"no\",\n\t\"o\",\n\t\"obok\",\n\t\"od\",\n\t\"około\",\n\t\"on\",\n\t\"ona\",\n\t\"one\",\n\t\"oni\",\n\t\"ono\",\n\t\"oraz\",\n\t\"oto\",\n\t\"owszem\",\n\t\"pan\",\n\t\"pana\",\n\t\"pani\",\n\t\"po\",\n\t\"pod\",\n\t\"podczas\",\n\t\"pomimo\",\n\t\"ponad\",\n\t\"poniewaz\",\n\t\"ponieważ\",\n\t\"powinien\",\n\t\"powinna\",\n\t\"powinni\",\n\t\"powinno\",\n\t\"poza\",\n\t\"prawie\",\n\t\"przeciez\",\n\t\"przecież\",\n\t\"przed\",\n\t\"przede\",\n\t\"przedtem\",\n\t\"przez\",\n\t\"przy\",\n\t\"roku\",\n\t\"rowniez\",\n\t\"również\",\n\t\"sam\",\n\t\"sama\",\n\t\"są\",\n\t\"sie\",\n\t\"się\",\n\t\"skad\",\n\t\"skąd\",\n\t\"sobie\",\n\t\"soba\",\n\t\"sobą\",\n\t\"sposob\",\n\t\"sposób\",\n\t\"swoje\",\n\t\"ta\",\n\t\"tak\",\n\t\"taka\",\n\t\"taki\",\n\t\"takie\",\n\t\"takze\",\n\t\"także\",\n\t\"tam\",\n\t\"te\",\n\t\"tego\",\n\t\"tej\",\n\t\"ten\",\n\t\"teraz\",\n\t\"też\",\n\t\"to\",\n\t\"toba\",\n\t\"tobą\",\n\t\"tobie\",\n\t\"totez\",\n\t\"toteż\",\n\t\"trzeba\",\n\t\"tu\",\n\t\"tutaj\",\n\t\"twoi\",\n\t\"twoim\",\n\t\"twoja\",\n\t\"twoje\",\n\t\"twym\",\n\t\"twoj\",\n\t\"twój\",\n\t\"ty\",\n\t\"tych\",\n\t\"tylko\",\n\t\"tym\",\n\t\"u\",\n\t\"w\",\n\t\"wam\",\n\t\"wami\",\n\t\"was\",\n\t\"wasz\",\n\t\"wasza\",\n\t\"wasze\",\n\t\"we\",\n\t\"według\",\n\t\"wiele\",\n\t\"wielu\",\n\t\"więc\",\n\t\"więcej\",\n\t\"wszyscy\",\n\t\"wszystkich\",\n\t\"wszystkie\",\n\t\"wszystkim\",\n\t\"wszystko\",\n\t\"wtedy\",\n\t\"wy\",\n\t\"wlasnie\",\n\t\"właśnie\",\n\t\"z\",\n\t\"za\",\n\t\"zapewne\",\n\t\"zawsze\",\n\t\"ze\",\n\t\"znowu\",\n\t\"znow\",\n\t\"znów\",\n\t\"zostal\",\n\t\"został\",\n\t\"zaden\",\n\t\"zadna\",\n\t\"zadne\",\n\t\"zadnych\",\n\t\"ze\",\n\t\"zeby\",\n\t\"żaden\",\n\t\"żadna\",\n\t\"żadne\",\n\t\"żadnych\",\n\t\"że\",\n\t\"żeby\"\n\t    ]\n\t};\n\n\n/***/ }),\n\n/***/ 402:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by rodrigo on 01/10/15.\n\t */\n\t\n\t//Portuguese (BRAZIL) stopwords\n\t// via https://sites.google.com/site/kevinbouge/stopwords-lists\n\tmodule.exports = {\n\t    stopwords: [\n\t        \"a\",\n\t        \"à\",\n\t        \"adeus\",\n\t        \"agora\",\n\t        \"aí\",\n\t        \"ainda\",\n\t        \"além\",\n\t        \"algo\",\n\t        \"algumas\",\n\t        \"alguns\",\n\t        \"ali\",\n\t        \"ano\",\n\t        \"anos\",\n\t        \"antes\",\n\t        \"ao\",\n\t        \"aos\",\n\t        \"apenas\",\n\t        \"apoio\",\n\t        \"após\",\n\t        \"aquela\",\n\t        \"aquelas\",\n\t        \"aquele\",\n\t        \"aqueles\",\n\t        \"aqui\",\n\t        \"aquilo\",\n\t        \"área\",\n\t        \"as\",\n\t        \"às\",\n\t        \"assim\",\n\t        \"até\",\n\t        \"atrás\",\n\t        \"através\",\n\t        \"baixo\",\n\t        \"bastante\",\n\t        \"bem\",\n\t        \"boa\",\n\t        \"boas\",\n\t        \"bom\",\n\t        \"bons\",\n\t        \"breve\",\n\t        \"cá\",\n\t        \"cada\",\n\t        \"catorze\",\n\t        \"cedo\",\n\t        \"cento\",\n\t        \"certamente\",\n\t        \"certeza\",\n\t        \"cima\",\n\t        \"cinco\",\n\t        \"coisa\",\n\t        \"com\",\n\t        \"como\",\n\t        \"conselho\",\n\t        \"contra\",\n\t        \"custa\",\n\t        \"da\",\n\t        \"dá\",\n\t        \"dão\",\n\t        \"daquela\",\n\t        \"daquelas\",\n\t        \"daquele\",\n\t        \"daqueles\",\n\t        \"dar\",\n\t        \"das\",\n\t        \"de\",\n\t        \"debaixo\",\n\t        \"demais\",\n\t        \"dentro\",\n\t        \"depois\",\n\t        \"desde\",\n\t        \"dessa\",\n\t        \"dessas\",\n\t        \"desse\",\n\t        \"desses\",\n\t        \"desta\",\n\t        \"destas\",\n\t        \"deste\",\n\t        \"destes\",\n\t        \"deve\",\n\t        \"deverá\",\n\t        \"dez\",\n\t        \"dezanove\",\n\t        \"dezasseis\",\n\t        \"dezassete\",\n\t        \"dezoito\",\n\t        \"dia\",\n\t        \"diante\",\n\t        \"diz\",\n\t        \"dizem\",\n\t        \"dizer\",\n\t        \"do\",\n\t        \"dois\",\n\t        \"dos\",\n\t        \"doze\",\n\t        \"duas\",\n\t        \"dúvida\",\n\t        \"e\",\n\t        \"é\",\n\t        \"ela\",\n\t        \"elas\",\n\t        \"ele\",\n\t        \"eles\",\n\t        \"em\",\n\t        \"embora\",\n\t        \"entre\",\n\t        \"era\",\n\t        \"és\",\n\t        \"essa\",\n\t        \"essas\",\n\t        \"esse\",\n\t        \"esses\",\n\t        \"esta\",\n\t        \"está\",\n\t        \"estão\",\n\t        \"estar\",\n\t        \"estas\",\n\t        \"estás\",\n\t        \"estava\",\n\t        \"este\",\n\t        \"estes\",\n\t        \"esteve\",\n\t        \"estive\",\n\t        \"estivemos\",\n\t        \"estiveram\",\n\t        \"estiveste\",\n\t        \"estivestes\",\n\t        \"estou\",\n\t        \"eu\",\n\t        \"exemplo\",\n\t        \"faço\",\n\t        \"falta\",\n\t        \"favor\",\n\t        \"faz\",\n\t        \"fazeis\",\n\t        \"fazem\",\n\t        \"fazemos\",\n\t        \"fazer\",\n\t        \"fazes\",\n\t        \"fez\",\n\t        \"fim\",\n\t        \"final\",\n\t        \"foi\",\n\t        \"fomos\",\n\t        \"for\",\n\t        \"foram\",\n\t        \"forma\",\n\t        \"foste\",\n\t        \"fostes\",\n\t        \"fui\",\n\t        \"geral\",\n\t        \"grande\",\n\t        \"grandes\",\n\t        \"grupo\",\n\t        \"há\",\n\t        \"hoje\",\n\t        \"hora\",\n\t        \"horas\",\n\t        \"isso\",\n\t        \"isto\",\n\t        \"já\",\n\t        \"lá\",\n\t        \"lado\",\n\t        \"local\",\n\t        \"logo\",\n\t        \"longe\",\n\t        \"lugar\",\n\t        \"maior\",\n\t        \"maioria\",\n\t        \"mais\",\n\t        \"mal\",\n\t        \"mas\",\n\t        \"máximo\",\n\t        \"me\",\n\t        \"meio\",\n\t        \"menor\",\n\t        \"menos\",\n\t        \"mês\",\n\t        \"meses\",\n\t        \"meu\",\n\t        \"meus\",\n\t        \"mil\",\n\t        \"minha\",\n\t        \"minhas\",\n\t        \"momento\",\n\t        \"muito\",\n\t        \"muitos\",\n\t        \"na\",\n\t        \"nada\",\n\t        \"não\",\n\t        \"naquela\",\n\t        \"naquelas\",\n\t        \"naquele\",\n\t        \"naqueles\",\n\t        \"nas\",\n\t        \"nem\",\n\t        \"nenhuma\",\n\t        \"nessa\",\n\t        \"nessas\",\n\t        \"nesse\",\n\t        \"nesses\",\n\t        \"nesta\",\n\t        \"nestas\",\n\t        \"neste\",\n\t        \"nestes\",\n\t        \"nível\",\n\t        \"no\",\n\t        \"noite\",\n\t        \"nome\",\n\t        \"nos\",\n\t        \"nós\",\n\t        \"nossa\",\n\t        \"nossas\",\n\t        \"nosso\",\n\t        \"nossos\",\n\t        \"nova\",\n\t        \"novas\",\n\t        \"nove\",\n\t        \"novo\",\n\t        \"novos\",\n\t        \"num\",\n\t        \"numa\",\n\t        \"número\",\n\t        \"nunca\",\n\t        \"o\",\n\t        \"obra\",\n\t        \"obrigada\",\n\t        \"obrigado\",\n\t        \"oitava\",\n\t        \"oitavo\",\n\t        \"oito\",\n\t        \"onde\",\n\t        \"ontem\",\n\t        \"onze\",\n\t        \"os\",\n\t        \"ou\",\n\t        \"outra\",\n\t        \"outras\",\n\t        \"outro\",\n\t        \"outros\",\n\t        \"para\",\n\t        \"parece\",\n\t        \"parte\",\n\t        \"partir\",\n\t        \"paucas\",\n\t        \"pela\",\n\t        \"pelas\",\n\t        \"pelo\",\n\t        \"pelos\",\n\t        \"perto\",\n\t        \"pode\",\n\t        \"pôde\",\n\t        \"podem\",\n\t        \"poder\",\n\t        \"põe\",\n\t        \"põem\",\n\t        \"ponto\",\n\t        \"pontos\",\n\t        \"por\",\n\t        \"porque\",\n\t        \"porquê\",\n\t        \"posição\",\n\t        \"possível\",\n\t        \"possivelmente\",\n\t        \"posso\",\n\t        \"pouca\",\n\t        \"pouco\",\n\t        \"poucos\",\n\t        \"primeira\",\n\t        \"primeiras\",\n\t        \"primeiro\",\n\t        \"primeiros\",\n\t        \"própria\",\n\t        \"próprias\",\n\t        \"próprio\",\n\t        \"próprios\",\n\t        \"próxima\",\n\t        \"próximas\",\n\t        \"próximo\",\n\t        \"próximos\",\n\t        \"puderam\",\n\t        \"quáis\",\n\t        \"qual\",\n\t        \"quando\",\n\t        \"quanto\",\n\t        \"quarta\",\n\t        \"quarto\",\n\t        \"quatro\",\n\t        \"que\",\n\t        \"quê\",\n\t        \"quem\",\n\t        \"quer\",\n\t        \"quereis\",\n\t        \"querem\",\n\t        \"queremas\",\n\t        \"queres\",\n\t        \"quero\",\n\t        \"questão\",\n\t        \"quinta\",\n\t        \"quinto\",\n\t        \"quinze\",\n\t        \"relação\",\n\t        \"sabe\",\n\t        \"sabem\",\n\t        \"são\",\n\t        \"se\",\n\t        \"segunda\",\n\t        \"segundo\",\n\t        \"sei\",\n\t        \"seis\",\n\t        \"sem\",\n\t        \"sempre\",\n\t        \"ser\",\n\t        \"seria\",\n\t        \"sete\",\n\t        \"sétima\",\n\t        \"sétimo\",\n\t        \"seu\",\n\t        \"seus\",\n\t        \"sexta\",\n\t        \"sexto\",\n\t        \"sim\",\n\t        \"sistema\",\n\t        \"sob\",\n\t        \"sobre\",\n\t        \"sois\",\n\t        \"somos\",\n\t        \"sou\",\n\t        \"sua\",\n\t        \"suas\",\n\t        \"tal\",\n\t        \"talvez\",\n\t        \"também\",\n\t        \"tanta\",\n\t        \"tantas\",\n\t        \"tanto\",\n\t        \"tão\",\n\t        \"tarde\",\n\t        \"te\",\n\t        \"tem\",\n\t        \"têm\",\n\t        \"temos\",\n\t        \"tendes\",\n\t        \"tenho\",\n\t        \"tens\",\n\t        \"ter\",\n\t        \"terceira\",\n\t        \"terceiro\",\n\t        \"teu\",\n\t        \"teus\",\n\t        \"teve\",\n\t        \"tive\",\n\t        \"tivemos\",\n\t        \"tiveram\",\n\t        \"tiveste\",\n\t        \"tivestes\",\n\t        \"toda\",\n\t        \"todas\",\n\t        \"todo\",\n\t        \"todos\",\n\t        \"trabalho\",\n\t        \"três\",\n\t        \"treze\",\n\t        \"tu\",\n\t        \"tua\",\n\t        \"tuas\",\n\t        \"tudo\",\n\t        \"um\",\n\t        \"uma\",\n\t        \"umas\",\n\t        \"uns\",\n\t        \"vai\",\n\t        \"vais\",\n\t        \"vão\",\n\t        \"vários\",\n\t        \"vem\",\n\t        \"vêm\",\n\t        \"vens\",\n\t        \"ver\",\n\t        \"vez\",\n\t        \"vezes\",\n\t        \"viagem\",\n\t        \"vindo\",\n\t        \"vinte\",\n\t        \"você\",\n\t        \"vocês\",\n\t        \"vos\",\n\t        \"vós\",\n\t        \"vossa\",\n\t        \"vossas\",\n\t        \"vosso\",\n\t        \"vossos\",\n\t        \"zero\"\n\t    ]\n\t};\n\n/***/ }),\n\n/***/ 403:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by jan on 9-3-15.\n\t */\n\t// Russian stopwords\n\t// via https://code.google.com/p/stop-words/\n\t\n\tmodule.exports = {\n\t    stopwords: [\n\t        \"а\",\n\t        \"е\",\n\t        \"и\",\n\t        \"ж\",\n\t        \"м\",\n\t        \"о\",\n\t        \"на\",\n\t        \"не\",\n\t        \"ни\",\n\t        \"об\",\n\t        \"но\",\n\t        \"он\",\n\t        \"мне\",\n\t        \"мои\",\n\t        \"мож\",\n\t        \"она\",\n\t        \"они\",\n\t        \"оно\",\n\t        \"мной\",\n\t        \"много\",\n\t        \"многочисленное\",\n\t        \"многочисленная\",\n\t        \"многочисленные\",\n\t        \"многочисленный\",\n\t        \"мною\",\n\t        \"мой\",\n\t        \"мог\",\n\t        \"могут\",\n\t        \"можно\",\n\t        \"может\",\n\t        \"можхо\",\n\t        \"мор\",\n\t        \"моя\",\n\t        \"моё\",\n\t        \"мочь\",\n\t        \"над\",\n\t        \"нее\",\n\t        \"оба\",\n\t        \"нам\",\n\t        \"нем\",\n\t        \"нами\",\n\t        \"ними\",\n\t        \"мимо\",\n\t        \"немного\",\n\t        \"одной\",\n\t        \"одного\",\n\t        \"менее\",\n\t        \"однажды\",\n\t        \"однако\",\n\t        \"меня\",\n\t        \"нему\",\n\t        \"меньше\",\n\t        \"ней\",\n\t        \"наверху\",\n\t        \"него\",\n\t        \"ниже\",\n\t        \"мало\",\n\t        \"надо\",\n\t        \"один\",\n\t        \"одиннадцать\",\n\t        \"одиннадцатый\",\n\t        \"назад\",\n\t        \"наиболее\",\n\t        \"недавно\",\n\t        \"миллионов\",\n\t        \"недалеко\",\n\t        \"между\",\n\t        \"низко\",\n\t        \"меля\",\n\t        \"нельзя\",\n\t        \"нибудь\",\n\t        \"непрерывно\",\n\t        \"наконец\",\n\t        \"никогда\",\n\t        \"никуда\",\n\t        \"нас\",\n\t        \"наш\",\n\t        \"нет\",\n\t        \"нею\",\n\t        \"неё\",\n\t        \"них\",\n\t        \"мира\",\n\t        \"наша\",\n\t        \"наше\",\n\t        \"наши\",\n\t        \"ничего\",\n\t        \"начала\",\n\t        \"нередко\",\n\t        \"несколько\",\n\t        \"обычно\",\n\t        \"опять\",\n\t        \"около\",\n\t        \"мы\",\n\t        \"ну\",\n\t        \"нх\",\n\t        \"от\",\n\t        \"отовсюду\",\n\t        \"особенно\",\n\t        \"нужно\",\n\t        \"очень\",\n\t        \"отсюда\",\n\t        \"в\",\n\t        \"во\",\n\t        \"вон\",\n\t        \"вниз\",\n\t        \"внизу\",\n\t        \"вокруг\",\n\t        \"вот\",\n\t        \"восемнадцать\",\n\t        \"восемнадцатый\",\n\t        \"восемь\",\n\t        \"восьмой\",\n\t        \"вверх\",\n\t        \"вам\",\n\t        \"вами\",\n\t        \"важное\",\n\t        \"важная\",\n\t        \"важные\",\n\t        \"важный\",\n\t        \"вдали\",\n\t        \"везде\",\n\t        \"ведь\",\n\t        \"вас\",\n\t        \"ваш\",\n\t        \"ваша\",\n\t        \"ваше\",\n\t        \"ваши\",\n\t        \"впрочем\",\n\t        \"весь\",\n\t        \"вдруг\",\n\t        \"вы\",\n\t        \"все\",\n\t        \"второй\",\n\t        \"всем\",\n\t        \"всеми\",\n\t        \"времени\",\n\t        \"время\",\n\t        \"всему\",\n\t        \"всего\",\n\t        \"всегда\",\n\t        \"всех\",\n\t        \"всею\",\n\t        \"всю\",\n\t        \"вся\",\n\t        \"всё\",\n\t        \"всюду\",\n\t        \"г\",\n\t        \"год\",\n\t        \"говорил\",\n\t        \"говорит\",\n\t        \"года\",\n\t        \"году\",\n\t        \"где\",\n\t        \"да\",\n\t        \"ее\",\n\t        \"за\",\n\t        \"из\",\n\t        \"ли\",\n\t        \"же\",\n\t        \"им\",\n\t        \"до\",\n\t        \"по\",\n\t        \"ими\",\n\t        \"под\",\n\t        \"иногда\",\n\t        \"довольно\",\n\t        \"именно\",\n\t        \"долго\",\n\t        \"позже\",\n\t        \"более\",\n\t        \"должно\",\n\t        \"пожалуйста\",\n\t        \"значит\",\n\t        \"иметь\",\n\t        \"больше\",\n\t        \"пока\",\n\t        \"ему\",\n\t        \"имя\",\n\t        \"пор\",\n\t        \"пора\",\n\t        \"потом\",\n\t        \"потому\",\n\t        \"после\",\n\t        \"почему\",\n\t        \"почти\",\n\t        \"посреди\",\n\t        \"ей\",\n\t        \"два\",\n\t        \"две\",\n\t        \"двенадцать\",\n\t        \"двенадцатый\",\n\t        \"двадцать\",\n\t        \"двадцатый\",\n\t        \"двух\",\n\t        \"его\",\n\t        \"дел\",\n\t        \"или\",\n\t        \"без\",\n\t        \"день\",\n\t        \"занят\",\n\t        \"занята\",\n\t        \"занято\",\n\t        \"заняты\",\n\t        \"действительно\",\n\t        \"давно\",\n\t        \"девятнадцать\",\n\t        \"девятнадцатый\",\n\t        \"девять\",\n\t        \"девятый\",\n\t        \"даже\",\n\t        \"алло\",\n\t        \"жизнь\",\n\t        \"далеко\",\n\t        \"близко\",\n\t        \"здесь\",\n\t        \"дальше\",\n\t        \"для\",\n\t        \"лет\",\n\t        \"зато\",\n\t        \"даром\",\n\t        \"первый\",\n\t        \"перед\",\n\t        \"затем\",\n\t        \"зачем\",\n\t        \"лишь\",\n\t        \"десять\",\n\t        \"десятый\",\n\t        \"ею\",\n\t        \"её\",\n\t        \"их\",\n\t        \"бы\",\n\t        \"еще\",\n\t        \"при\",\n\t        \"был\",\n\t        \"про\",\n\t        \"процентов\",\n\t        \"против\",\n\t        \"просто\",\n\t        \"бывает\",\n\t        \"бывь\",\n\t        \"если\",\n\t        \"люди\",\n\t        \"была\",\n\t        \"были\",\n\t        \"было\",\n\t        \"будем\",\n\t        \"будет\",\n\t        \"будете\",\n\t        \"будешь\",\n\t        \"прекрасно\",\n\t        \"буду\",\n\t        \"будь\",\n\t        \"будто\",\n\t        \"будут\",\n\t        \"ещё\",\n\t        \"пятнадцать\",\n\t        \"пятнадцатый\",\n\t        \"друго\",\n\t        \"другое\",\n\t        \"другой\",\n\t        \"другие\",\n\t        \"другая\",\n\t        \"других\",\n\t        \"есть\",\n\t        \"пять\",\n\t        \"быть\",\n\t        \"лучше\",\n\t        \"пятый\",\n\t        \"к\",\n\t        \"ком\",\n\t        \"конечно\",\n\t        \"кому\",\n\t        \"кого\",\n\t        \"когда\",\n\t        \"которой\",\n\t        \"которого\",\n\t        \"которая\",\n\t        \"которые\",\n\t        \"который\",\n\t        \"которых\",\n\t        \"кем\",\n\t        \"каждое\",\n\t        \"каждая\",\n\t        \"каждые\",\n\t        \"каждый\",\n\t        \"кажется\",\n\t        \"как\",\n\t        \"какой\",\n\t        \"какая\",\n\t        \"кто\",\n\t        \"кроме\",\n\t        \"куда\",\n\t        \"кругом\",\n\t        \"с\",\n\t        \"т\",\n\t        \"у\",\n\t        \"я\",\n\t        \"та\",\n\t        \"те\",\n\t        \"уж\",\n\t        \"со\",\n\t        \"то\",\n\t        \"том\",\n\t        \"снова\",\n\t        \"тому\",\n\t        \"совсем\",\n\t        \"того\",\n\t        \"тогда\",\n\t        \"тоже\",\n\t        \"собой\",\n\t        \"тобой\",\n\t        \"собою\",\n\t        \"тобою\",\n\t        \"сначала\",\n\t        \"только\",\n\t        \"уметь\",\n\t        \"тот\",\n\t        \"тою\",\n\t        \"хорошо\",\n\t        \"хотеть\",\n\t        \"хочешь\",\n\t        \"хоть\",\n\t        \"хотя\",\n\t        \"свое\",\n\t        \"свои\",\n\t        \"твой\",\n\t        \"своей\",\n\t        \"своего\",\n\t        \"своих\",\n\t        \"свою\",\n\t        \"твоя\",\n\t        \"твоё\",\n\t        \"раз\",\n\t        \"уже\",\n\t        \"сам\",\n\t        \"там\",\n\t        \"тем\",\n\t        \"чем\",\n\t        \"сама\",\n\t        \"сами\",\n\t        \"теми\",\n\t        \"само\",\n\t        \"рано\",\n\t        \"самом\",\n\t        \"самому\",\n\t        \"самой\",\n\t        \"самого\",\n\t        \"семнадцать\",\n\t        \"семнадцатый\",\n\t        \"самим\",\n\t        \"самими\",\n\t        \"самих\",\n\t        \"саму\",\n\t        \"семь\",\n\t        \"чему\",\n\t        \"раньше\",\n\t        \"сейчас\",\n\t        \"чего\",\n\t        \"сегодня\",\n\t        \"себе\",\n\t        \"тебе\",\n\t        \"сеаой\",\n\t        \"человек\",\n\t        \"разве\",\n\t        \"теперь\",\n\t        \"себя\",\n\t        \"тебя\",\n\t        \"седьмой\",\n\t        \"спасибо\",\n\t        \"слишком\",\n\t        \"так\",\n\t        \"такое\",\n\t        \"такой\",\n\t        \"такие\",\n\t        \"также\",\n\t        \"такая\",\n\t        \"сих\",\n\t        \"тех\",\n\t        \"чаще\",\n\t        \"четвертый\",\n\t        \"через\",\n\t        \"часто\",\n\t        \"шестой\",\n\t        \"шестнадцать\",\n\t        \"шестнадцатый\",\n\t        \"шесть\",\n\t        \"четыре\",\n\t        \"четырнадцать\",\n\t        \"четырнадцатый\",\n\t        \"сколько\",\n\t        \"сказал\",\n\t        \"сказала\",\n\t        \"сказать\",\n\t        \"ту\",\n\t        \"ты\",\n\t        \"три\",\n\t        \"эта\",\n\t        \"эти\",\n\t        \"что\",\n\t        \"это\",\n\t        \"чтоб\",\n\t        \"этом\",\n\t        \"этому\",\n\t        \"этой\",\n\t        \"этого\",\n\t        \"чтобы\",\n\t        \"этот\",\n\t        \"стал\",\n\t        \"туда\",\n\t        \"этим\",\n\t        \"этими\",\n\t        \"рядом\",\n\t        \"тринадцать\",\n\t        \"тринадцатый\",\n\t        \"этих\",\n\t        \"третий\",\n\t        \"тут\",\n\t        \"эту\",\n\t        \"суть\",\n\t        \"чуть\",\n\t        \"тысяч\"\n\t    ]\n\t};\n\n\n/***/ }),\n\n/***/ 404:\n/***/ (function(module, exports) {\n\n\t/**\n\t * Created by jan on 9-3-15.\n\t */\n\t// Swedish stopwords\n\t// http://www.ranks.nl/stopwords/swedish\n\t// https://github.com/AlexGustafsson\n\t\n\tmodule.exports = {\n\t    stopwords: [\n\t        \"aderton\",\n\t        \"adertonde\",\n\t        \"adjö\",\n\t        \"aldrig\",\n\t        \"alla\",\n\t        \"allas\",\n\t        \"allt\",\n\t        \"alltid\",\n\t        \"alltså\",\n\t        \"än\",\n\t        \"andra\",\n\t        \"andras\",\n\t        \"annan\",\n\t        \"annat\",\n\t        \"ännu\",\n\t        \"artonde\",\n\t        \"artonn\",\n\t        \"åtminstone\",\n\t        \"att\",\n\t        \"åtta\",\n\t        \"åttio\",\n\t        \"åttionde\",\n\t        \"åttonde\",\n\t        \"av\",\n\t        \"även\",\n\t        \"båda\",\n\t        \"bådas\",\n\t        \"bakom\",\n\t        \"bara\",\n\t        \"bäst\",\n\t        \"bättre\",\n\t        \"behöva\",\n\t        \"behövas\",\n\t        \"behövde\",\n\t        \"behövt\",\n\t        \"beslut\",\n\t        \"beslutat\",\n\t        \"beslutit\",\n\t        \"bland\",\n\t        \"blev\",\n\t        \"bli\",\n\t        \"blir\",\n\t        \"blivit\",\n\t        \"bort\",\n\t        \"borta\",\n\t        \"bra\",\n\t        \"då\",\n\t        \"dag\",\n\t        \"dagar\",\n\t        \"dagarna\",\n\t        \"dagen\",\n\t        \"där\",\n\t        \"därför\",\n\t        \"de\",\n\t        \"del\",\n\t        \"delen\",\n\t        \"dem\",\n\t        \"den\",\n\t        \"deras\",\n\t        \"dess\",\n\t        \"det\",\n\t        \"detta\",\n\t        \"dig\",\n\t        \"din\",\n\t        \"dina\",\n\t        \"dit\",\n\t        \"ditt\",\n\t        \"dock\",\n\t        \"du\",\n\t        \"efter\",\n\t        \"eftersom\",\n\t        \"elfte\",\n\t        \"eller\",\n\t        \"elva\",\n\t        \"en\",\n\t        \"enkel\",\n\t        \"enkelt\",\n\t        \"enkla\",\n\t        \"enligt\",\n\t        \"er\",\n\t        \"era\",\n\t        \"ert\",\n\t        \"ett\",\n\t        \"ettusen\",\n\t        \"få\",\n\t        \"fanns\",\n\t        \"får\",\n\t        \"fått\",\n\t        \"fem\",\n\t        \"femte\",\n\t        \"femtio\",\n\t        \"femtionde\",\n\t        \"femton\",\n\t        \"femtonde\",\n\t        \"fick\",\n\t        \"fin\",\n\t        \"finnas\",\n\t        \"finns\",\n\t        \"fjärde\",\n\t        \"fjorton\",\n\t        \"fjortonde\",\n\t        \"fler\",\n\t        \"flera\",\n\t        \"flesta\",\n\t        \"följande\",\n\t        \"för\",\n\t        \"före\",\n\t        \"förlåt\",\n\t        \"förra\",\n\t        \"första\",\n\t        \"fram\",\n\t        \"framför\",\n\t        \"från\",\n\t        \"fyra\",\n\t        \"fyrtio\",\n\t        \"fyrtionde\",\n\t        \"gå\",\n\t        \"gälla\",\n\t        \"gäller\",\n\t        \"gällt\",\n\t        \"går\",\n\t        \"gärna\",\n\t        \"gått\",\n\t        \"genast\",\n\t        \"genom\",\n\t        \"gick\",\n\t        \"gjorde\",\n\t        \"gjort\",\n\t        \"god\",\n\t        \"goda\",\n\t        \"godare\",\n\t        \"godast\",\n\t        \"gör\",\n\t        \"göra\",\n\t        \"gott\",\n\t        \"ha\",\n\t        \"hade\",\n\t        \"haft\",\n\t        \"han\",\n\t        \"hans\",\n\t        \"har\",\n\t        \"här\",\n\t        \"heller\",\n\t        \"hellre\",\n\t        \"helst\",\n\t        \"helt\",\n\t        \"henne\",\n\t        \"hennes\",\n\t        \"hit\",\n\t        \"hög\",\n\t        \"höger\",\n\t        \"högre\",\n\t        \"högst\",\n\t        \"hon\",\n\t        \"honom\",\n\t        \"hundra\",\n\t        \"hundraen\",\n\t        \"hundraett\",\n\t        \"hur\",\n\t        \"i\",\n\t        \"ibland\",\n\t        \"idag\",\n\t        \"igår\",\n\t        \"igen\",\n\t        \"imorgon\",\n\t        \"in\",\n\t        \"inför\",\n\t        \"inga\",\n\t        \"ingen\",\n\t        \"ingenting\",\n\t        \"inget\",\n\t        \"innan\",\n\t        \"inne\",\n\t        \"inom\",\n\t        \"inte\",\n\t        \"inuti\",\n\t        \"ja\",\n\t        \"jag\",\n\t        \"jämfört\",\n\t        \"kan\",\n\t        \"kanske\",\n\t        \"knappast\",\n\t        \"kom\",\n\t        \"komma\",\n\t        \"kommer\",\n\t        \"kommit\",\n\t        \"kr\",\n\t        \"kunde\",\n\t        \"kunna\",\n\t        \"kunnat\",\n\t        \"kvar\",\n\t        \"länge\",\n\t        \"längre\",\n\t        \"långsam\",\n\t        \"långsammare\",\n\t        \"långsammast\",\n\t        \"långsamt\",\n\t        \"längst\",\n\t        \"långt\",\n\t        \"lätt\",\n\t        \"lättare\",\n\t        \"lättast\",\n\t        \"legat\",\n\t        \"ligga\",\n\t        \"ligger\",\n\t        \"lika\",\n\t        \"likställd\",\n\t        \"likställda\",\n\t        \"lilla\",\n\t        \"lite\",\n\t        \"liten\",\n\t        \"litet\",\n\t        \"man\",\n\t        \"många\",\n\t        \"måste\",\n\t        \"med\",\n\t        \"mellan\",\n\t        \"men\",\n\t        \"mer\",\n\t        \"mera\",\n\t        \"mest\",\n\t        \"mig\",\n\t        \"min\",\n\t        \"mina\",\n\t        \"mindre\",\n\t        \"minst\",\n\t        \"mitt\",\n\t        \"mittemot\",\n\t        \"möjlig\",\n\t        \"möjligen\",\n\t        \"möjligt\",\n\t        \"möjligtvis\",\n\t        \"mot\",\n\t        \"mycket\",\n\t        \"någon\",\n\t        \"någonting\",\n\t        \"något\",\n\t        \"några\",\n\t        \"när\",\n\t        \"nästa\",\n\t        \"ned\",\n\t        \"nederst\",\n\t        \"nedersta\",\n\t        \"nedre\",\n\t        \"nej\",\n\t        \"ner\",\n\t        \"ni\",\n\t        \"nio\",\n\t        \"nionde\",\n\t        \"nittio\",\n\t        \"nittionde\",\n\t        \"nitton\",\n\t        \"nittonde\",\n\t        \"nödvändig\",\n\t        \"nödvändiga\",\n\t        \"nödvändigt\",\n\t        \"nödvändigtvis\",\n\t        \"nog\",\n\t        \"noll\",\n\t        \"nr\",\n\t        \"nu\",\n\t        \"nummer\",\n\t        \"och\",\n\t        \"också\",\n\t        \"ofta\",\n\t        \"oftast\",\n\t        \"olika\",\n\t        \"olikt\",\n\t        \"om\",\n\t        \"oss\",\n\t        \"över\",\n\t        \"övermorgon\",\n\t        \"överst\",\n\t        \"övre\",\n\t        \"på\",\n\t        \"rakt\",\n\t        \"rätt\",\n\t        \"redan\",\n\t        \"redigera\",\n\t        \"så\",\n\t        \"sade\",\n\t        \"säga\",\n\t        \"säger\",\n\t        \"sagt\",\n\t        \"samma\",\n\t        \"sämre\",\n\t        \"sämst\",\n\t        \"se\",\n\t        \"sedan\",\n\t        \"senare\",\n\t        \"senast\",\n\t        \"sent\",\n\t        \"sex\",\n\t        \"sextio\",\n\t        \"sextionde\",\n\t        \"sexton\",\n\t        \"sextonde\",\n\t        \"sig\",\n\t        \"sin\",\n\t        \"sina\",\n\t        \"sist\",\n\t        \"sista\",\n\t        \"siste\",\n\t        \"sitt\",\n\t        \"sjätte\",\n\t        \"sju\",\n\t        \"sjunde\",\n\t        \"sjuttio\",\n\t        \"sjuttionde\",\n\t        \"sjutton\",\n\t        \"sjuttonde\",\n\t        \"ska\",\n\t        \"skall\",\n\t        \"skulle\",\n\t        \"slutligen\",\n\t        \"små\",\n\t        \"smått\",\n\t        \"snart\",\n\t        \"som\",\n\t        \"stor\",\n\t        \"stora\",\n\t        \"större\",\n\t        \"störst\",\n\t        \"stort\",\n\t        \"tack\",\n\t        \"tidig\",\n\t        \"tidigare\",\n\t        \"tidigast\",\n\t        \"tidigt\",\n\t        \"till\",\n\t        \"tills\",\n\t        \"tillsammans\",\n\t        \"tio\",\n\t        \"tionde\",\n\t        \"tjugo\",\n\t        \"tjugoen\",\n\t        \"tjugoett\",\n\t        \"tjugonde\",\n\t        \"tjugotre\",\n\t        \"tjugotvå\",\n\t        \"tjungo\",\n\t        \"tolfte\",\n\t        \"tolv\",\n\t        \"tre\",\n\t        \"tredje\",\n\t        \"trettio\",\n\t        \"trettionde\",\n\t        \"tretton\",\n\t        \"trettonde\",\n\t        \"två\",\n\t        \"tvåhundra\",\n\t        \"under\",\n\t        \"upp\",\n\t        \"ur\",\n\t        \"ursäkt\",\n\t        \"ut\",\n\t        \"utan\",\n\t        \"utanför\",\n\t        \"ute\",\n\t        \"vad\",\n\t        \"vänster\",\n\t        \"vänstra\",\n\t        \"vår\",\n\t        \"vara\",\n\t        \"våra\",\n\t        \"varför\",\n\t        \"varifrån\",\n\t        \"varit\",\n\t        \"varken\",\n\t        \"värre\",\n\t        \"varsågod\",\n\t        \"vart\",\n\t        \"vårt\",\n\t        \"vem\",\n\t        \"vems\",\n\t        \"verkligen\",\n\t        \"vi\",\n\t        \"vid\",\n\t        \"vidare\",\n\t        \"viktig\",\n\t        \"viktigare\",\n\t        \"viktigast\",\n\t        \"viktigt\",\n\t        \"vilka\",\n\t        \"vilken\",\n\t        \"vilket\",\n\t        \"vill\",\n\t        \"är\",\n\t        \"år\",\n\t\n\t        \"även\",\n\t        \"dessa\",\n\t        \"wikitext\",\n\t        \"wikipedia\",\n\t        \"tyngre\",\n\t        \"tung\",\n\t        \"tyngst\",\n\t        \"kall\",\n\t        \"var\",\n\t        \"minimum\",\n\t        \"min\",\n\t        \"max\",\n\t        \"maximum\",\n\t        \"ökning\",\n\t        \"öka\",\n\t        \"kallar\",\n\t        \"hjälp\",\n\t        \"använder\",\n\t        \"betydligt\",\n\t        \"sätt\",\n\t        \"denna\",\n\t        \"detta\",\n\t        \"det\",\n\t        \"hjälpa\",\n\t        \"används\",\n\t        \"består\",\n\t        \"tränger\",\n\t        \"igenom\",\n\t        \"denna\",\n\t        \"utöka\",\n\t        \"utarmat\",\n\t        \"ungefär\",\n\t        \"sprids\",\n\t        \"betydligt\",\n\t        \"omgivande\",\n\t        \"via\",\n\t        \"huvudartikel\",\n\t        \"exempel\",\n\t        \"exempelvis\",\n\t        \"vanligt\",\n\t        \"per\",\n\t        \"största\",\n\t        \"stor\",\n\t        \"ord\",\n\t        \"ordet\",\n\t        \"kallas\",\n\t        \"påbörjad\",\n\t        \"höra\",\n\t        \"främst\",\n\t        \"ihop\",\n\t        \"antalet\",\n\t        \"the\",\n\t        \"uttryck\",\n\t        \"uttrycket\",\n\t        \"ändra\",\n\t        \"presenteras\",\n\t        \"presenterades\",\n\t        \"tänka\",\n\t        \"delar\",\n\t        \"söka\",\n\t        \"hämta\",\n\t        \"innehåll\",\n\t        \"definera\",\n\t        \"använda\",\n\t        \"pekar\",\n\t        \"istället\",\n\t        \"stället\",\n\t        \"pekar\",\n\t        \"standard\",\n\t        \"vanligaste\",\n\t        \"heter\",\n\t        \"precist\",\n\t        \"felaktigt\",\n\t        \"källor\",\n\t        \"höga\",\n\t        \"mottagare\",\n\t        \"eng\",\n\t        \"bildade\",\n\t        \"bytte\",\n\t        \"bildades\",\n\t        \"grundades\",\n\t        \"svar\",\n\t        \"betyder\",\n\t        \"betydelse\",\n\t        \"möjligheter\",\n\t        \"möjlig\",\n\t        \"möjlighet\",\n\t        \"syfte\",\n\t        \"gamla\",\n\t        \"tioårig\",\n\t        \"år\",\n\t        \"övergångsperiod\",\n\t        \"ersättas\",\n\t        \"användes\",\n\t        \"används\",\n\t        \"utgörs\",\n\t        \"drygt\",\n\t        \"alla\",\n\t        \"allt\",\n\t        \"alltså\",\n\t        \"andra\",\n\t        \"att\",\n\t        \"bara\",\n\t        \"bli\",\n\t        \"blir\",\n\t        \"borde\",\n\t        \"bra\",\n\t        \"mitt\",\n\t        \"ser\",\n\t        \"dem\",\n\t        \"den\",\n\t        \"denna\",\n\t        \"det\",\n\t        \"detta\",\n\t        \"dig\",\n\t        \"din\",\n\t        \"dock\",\n\t        \"dom\",\n\t        \"där\",\n\t        \"edit\",\n\t        \"efter\",\n\t        \"eftersom\",\n\t        \"eller\",\n\t        \"ett\",\n\t        \"fast\",\n\t        \"fel\",\n\t        \"fick\",\n\t        \"finns\",\n\t        \"fram\",\n\t        \"från\",\n\t        \"får\",\n\t        \"fått\",\n\t        \"för\",\n\t        \"första\",\n\t        \"genom\",\n\t        \"ger\",\n\t        \"går\",\n\t        \"gör\",\n\t        \"göra\",\n\t        \"hade\",\n\t        \"han\",\n\t        \"har\",\n\t        \"hela\",\n\t        \"helt\",\n\t        \"honom\",\n\t        \"hur\",\n\t        \"här\",\n\t        \"iaf\",\n\t        \"igen\",\n\t        \"ingen\",\n\t        \"inget\",\n\t        \"inte\",\n\t        \"jag\",\n\t        \"kan\",\n\t        \"kanske\",\n\t        \"kommer\",\n\t        \"lika\",\n\t        \"lite\",\n\t        \"man\",\n\t        \"med\",\n\t        \"men\",\n\t        \"mer\",\n\t        \"mig\",\n\t        \"min\",\n\t        \"mot\",\n\t        \"mycket\",\n\t        \"många\",\n\t        \"måste\",\n\t        \"nog\",\n\t        \"när\",\n\t        \"någon\",\n\t        \"något\",\n\t        \"några\",\n\t        \"nån\",\n\t        \"nåt\",\n\t        \"och\",\n\t        \"också\",\n\t        \"rätt\",\n\t        \"samma\",\n\t        \"sedan\",\n\t        \"sen\",\n\t        \"sig\",\n\t        \"sin\",\n\t        \"själv\",\n\t        \"ska\",\n\t        \"skulle\",\n\t        \"som\",\n\t        \"sätt\",\n\t        \"tar\",\n\t        \"till\",\n\t        \"tror\",\n\t        \"tycker\",\n\t        \"typ\",\n\t        \"upp\",\n\t        \"utan\",\n\t        \"vad\",\n\t        \"var\",\n\t        \"vara\",\n\t        \"vet\",\n\t        \"vid\",\n\t        \"vilket\",\n\t        \"vill\",\n\t        \"väl\",\n\t        \"även\",\n\t        \"över\",\n\t        \"förekommer\",\n\t        \"varierar\",\n\t        \"representera\",\n\t        \"representerar\",\n\t        \"itu\",\n\t        \"påbörjades\",\n\t        \"le\",\n\t        \"åtgärder\",\n\t        \"åtgärd\",\n\t        \"sådant\",\n\t        \"särskilt\",\n\t        \"eftersom\",\n\t        \"som\",\n\t        \"efter\",\n\t        \"syftet\",\n\t        \"syfte\",\n\t        \"ersatts\",\n\t        \"ersätts\",\n\t        \"ersatt\",\n\t        \"ersätt\",\n\t        \"tagits\",\n\t        \"byter\",\n\t        \"benämningar\",\n\t        \"ler\",\n\t        \"ärvs\",\n\t        \"ärv\",\n\t        \"ärvd\",\n\t        \"januari\",\n\t        \"februari\",\n\t        \"mars\",\n\t        \"april\",\n\t        \"maj\",\n\t        \"juni\",\n\t        \"juli\",\n\t        \"augusti\",\n\t        \"september\",\n\t        \"oktober\",\n\t        \"november\",\n\t        \"december\",\n\t        \"on\",\n\t        \"övriga\",\n\t        \"använts\",\n\t        \"använd\",\n\t        \"används\",\n\t        \"använt\",\n\t        \"syftar\",\n\t        \"ex\",\n\t        \"svårt\",\n\t        \"svår\",\n\t        \"lätt\",\n\t        \"lätta\",\n\t        \"lättast\",\n\t        \"lättare\",\n\t        \"svårare\",\n\t        \"svårast\",\n\t        \"list\",\n\t        \"användningsområde\",\n\t        \"användningsområden\",\n\t        \"vissa\",\n\t        \"ii\",\n\t        \"hembyggda\",\n\t        \"krav\",\n\t        \"lugnt\",\n\t        \"ändå\",\n\t        \"stycken\",\n\t        \"styck\",\n\t        \"långa\",\n\t        \"korta\",\n\t        \"små\",\n\t        \"stora\",\n\t        \"smala\",\n\t        \"tjocka\",\n\t        \"början\",\n\t        \"tungt\",\n\t        \"lätt\",\n\t        \"tim\",\n\t        \"st\",\n\t        \"kg\",\n\t        \"km\",\n\t        \"tid\",\n\t        \"ny\",\n\t        \"gammal\",\n\t        \"nyare\",\n\t        \"antal\",\n\t        \"snabbare\",\n\t        \"började\",\n\t        \"ansvar\",\n\t        \"ansvarar\",\n\t        \"både\",\n\t        \"ca\",\n\t        \"låg\",\n\t        \"hög\",\n\t        \"ro\",\n\t        \"ton\",\n\t        \"kap\",\n\t        \"of\",\n\t        \"and\",\n\t        \"vars\",\n\t        \"kr/km\",\n\t        \"rör\",\n\t        \"gällande\",\n\t        \"placeras\",\n\t        \"placerades\",\n\t        \"täckt\",\n\t        \"samt\",\n\t        \"hos\",\n\t        \"sådana\",\n\t        \"endast\",\n\t        \"tillstånd\",\n\t        \"beror\",\n\t        \"på\",\n\t        \"marken\",\n\t        \"minska\",\n\t        \"orsaker\",\n\t        \"lösningar\",\n\t        \"problem\",\n\t        \"namn\",\n\t        \"förväntas\",\n\t        \"förväntan\",\n\t        \"förväntats\",\n\t        \"varning\",\n\t        \"utfärdas\",\n\t        \"utfärda\",\n\t        \"km/h\",\n\t        \"nådde\",\n\t        \"stod\",\n\t        \"området\",\n\t        \"områden\",\n\t        \"källa\",\n\t        \"behövs\",\n\t        \"drabbade\",\n\t        \"drabbat\",\n\t        \"which\",\n\t        \"top\",\n\t        \"that\",\n\t        \"lägre\",\n\t        \"allmänt\",\n\t        \"drog\",\n\t        \"drar\",\n\t        \"enorma\",\n\t        \"ända\",\n\t        \"enda\",\n\t        \"officiella\",\n\t        \"bekräftats\",\n\t        \"bekräftas\",\n\t        \"fall\",\n\t        \"sjunker\",\n\t        \"nedåt\",\n\t        \"värms\",\n\t        \"samtidigt\",\n\t        \"efterföljd\",\n\t        \"problematik\",\n\t        \"uppåt\",\n\t        \"utom\",\n\t        \"förutom\",\n\t        \"hörnet\",\n\t        \"söt\",\n\t        \"salt\",\n\t        \"svag\",\n\t        \"stark\",\n\t        \"ren\",\n\t        \"smutsig\",\n\t        \"förr\",\n\t        \"tiden\",\n\t        \"mångdag\",\n\t        \"tisdag\",\n\t        \"onsdag\",\n\t        \"torsdag\",\n\t        \"fredag\",\n\t        \"lördag\",\n\t        \"söndag\",\n\t        \"måndagar\",\n\t        \"tisdagar\",\n\t        \"onsdagar\",\n\t        \"torsdagar\",\n\t        \"fredagar\",\n\t        \"lördagar\",\n\t        \"söndagar\",\n\t        \"efterlikna\",\n\t        \"som\",\n\t        \"lik\",\n\t        \"bergis\",\n\t        \"bekymmer\",\n\t        \"så\",\n\t        \"lista\",\n\t        \"dig\",\n\t        \"dej\",\n\t        \"mig\",\n\t        \"mej\",\n\t        \"fri\",\n\t        \"vanlig\",\n\t        \"ovanlig\",\n\t        \"sällan\",\n\t        \"ofta\",\n\t        \"avskiljs\",\n\t        \"use\",\n\t        \"släkte\",\n\t        \"släktet\",\n\t        \"släkt\",\n\t        \"kategori\",\n\t        \"kategoriseras\",\n\t        \"rensas\",\n\t        \"renas\",\n\t        \"timmar\",\n\t        \"minuter\",\n\t        \"sekunder\"\n\t    ]\n\t};\n\n\n/***/ }),\n\n/***/ 405:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t\tdanish: __webpack_require__(393).stopwords,\n\t\tdutch: __webpack_require__(400).stopwords,\n\t\tenglish: __webpack_require__(395).stopwords,\n\t\tfrench: __webpack_require__(397).stopwords,\n\t\tgalician: __webpack_require__(398).stopwords,\n\t\tgerman: __webpack_require__(394).stopwords,\n\t\titalian: __webpack_require__(399).stopwords,\n\t\tpolish: __webpack_require__(401).stopwords,\n\t\tportuguese: __webpack_require__(402).stopwords,\n\t\trussian: __webpack_require__(403).stopwords,\n\t\tspanish: __webpack_require__(396).stopwords,\n\t\tswedish: __webpack_require__(404).stopwords\n\t};\n\n\n/***/ }),\n\n/***/ 522:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//  Underscore.string\n\t//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n\t//  Underscore.string is freely distributable under the terms of the MIT license.\n\t//  Documentation: https://github.com/epeli/underscore.string\n\t//  Some code is borrowed from MooTools and Alexandru Marasteanu.\n\t//  Version '2.3.2'\n\t\n\t!function(root, String){\n\t  'use strict';\n\t\n\t  // Defining helper functions.\n\t\n\t  var nativeTrim = String.prototype.trim;\n\t  var nativeTrimRight = String.prototype.trimRight;\n\t  var nativeTrimLeft = String.prototype.trimLeft;\n\t\n\t  var parseNumber = function(source) { return source * 1 || 0; };\n\t\n\t  var strRepeat = function(str, qty){\n\t    if (qty < 1) return '';\n\t    var result = '';\n\t    while (qty > 0) {\n\t      if (qty & 1) result += str;\n\t      qty >>= 1, str += str;\n\t    }\n\t    return result;\n\t  };\n\t\n\t  var slice = [].slice;\n\t\n\t  var defaultToWhiteSpace = function(characters) {\n\t    if (characters == null)\n\t      return '\\\\s';\n\t    else if (characters.source)\n\t      return characters.source;\n\t    else\n\t      return '[' + _s.escapeRegExp(characters) + ']';\n\t  };\n\t\n\t  // Helper for toBoolean\n\t  function boolMatch(s, matchers) {\n\t    var i, matcher, down = s.toLowerCase();\n\t    matchers = [].concat(matchers);\n\t    for (i = 0; i < matchers.length; i += 1) {\n\t      matcher = matchers[i];\n\t      if (!matcher) continue;\n\t      if (matcher.test && matcher.test(s)) return true;\n\t      if (matcher.toLowerCase() === down) return true;\n\t    }\n\t  }\n\t\n\t  var escapeChars = {\n\t    lt: '<',\n\t    gt: '>',\n\t    quot: '\"',\n\t    amp: '&',\n\t    apos: \"'\"\n\t  };\n\t\n\t  var reversedEscapeChars = {};\n\t  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;\n\t  reversedEscapeChars[\"'\"] = '#39';\n\t\n\t  // sprintf() for JavaScript 0.7-beta1\n\t  // http://www.diveintojavascript.com/projects/javascript-sprintf\n\t  //\n\t  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\n\t  // All rights reserved.\n\t\n\t  var sprintf = (function() {\n\t    function get_type(variable) {\n\t      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n\t    }\n\t\n\t    var str_repeat = strRepeat;\n\t\n\t    var str_format = function() {\n\t      if (!str_format.cache.hasOwnProperty(arguments[0])) {\n\t        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n\t      }\n\t      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n\t    };\n\t\n\t    str_format.format = function(parse_tree, argv) {\n\t      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n\t      for (i = 0; i < tree_length; i++) {\n\t        node_type = get_type(parse_tree[i]);\n\t        if (node_type === 'string') {\n\t          output.push(parse_tree[i]);\n\t        }\n\t        else if (node_type === 'array') {\n\t          match = parse_tree[i]; // convenience purposes only\n\t          if (match[2]) { // keyword argument\n\t            arg = argv[cursor];\n\t            for (k = 0; k < match[2].length; k++) {\n\t              if (!arg.hasOwnProperty(match[2][k])) {\n\t                throw new Error(sprintf('[_.sprintf] property \"%s\" does not exist', match[2][k]));\n\t              }\n\t              arg = arg[match[2][k]];\n\t            }\n\t          } else if (match[1]) { // positional argument (explicit)\n\t            arg = argv[match[1]];\n\t          }\n\t          else { // positional argument (implicit)\n\t            arg = argv[cursor++];\n\t          }\n\t\n\t          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n\t            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));\n\t          }\n\t          switch (match[8]) {\n\t            case 'b': arg = arg.toString(2); break;\n\t            case 'c': arg = String.fromCharCode(arg); break;\n\t            case 'd': arg = parseInt(arg, 10); break;\n\t            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n\t            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n\t            case 'o': arg = arg.toString(8); break;\n\t            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n\t            case 'u': arg = Math.abs(arg); break;\n\t            case 'x': arg = arg.toString(16); break;\n\t            case 'X': arg = arg.toString(16).toUpperCase(); break;\n\t          }\n\t          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n\t          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n\t          pad_length = match[6] - String(arg).length;\n\t          pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n\t          output.push(match[5] ? arg + pad : pad + arg);\n\t        }\n\t      }\n\t      return output.join('');\n\t    };\n\t\n\t    str_format.cache = {};\n\t\n\t    str_format.parse = function(fmt) {\n\t      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n\t      while (_fmt) {\n\t        if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n\t          parse_tree.push(match[0]);\n\t        }\n\t        else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n\t          parse_tree.push('%');\n\t        }\n\t        else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n\t          if (match[2]) {\n\t            arg_names |= 1;\n\t            var field_list = [], replacement_field = match[2], field_match = [];\n\t            if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t              field_list.push(field_match[1]);\n\t              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n\t                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t                  field_list.push(field_match[1]);\n\t                }\n\t                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n\t                  field_list.push(field_match[1]);\n\t                }\n\t                else {\n\t                  throw new Error('[_.sprintf] huh?');\n\t                }\n\t              }\n\t            }\n\t            else {\n\t              throw new Error('[_.sprintf] huh?');\n\t            }\n\t            match[2] = field_list;\n\t          }\n\t          else {\n\t            arg_names |= 2;\n\t          }\n\t          if (arg_names === 3) {\n\t            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');\n\t          }\n\t          parse_tree.push(match);\n\t        }\n\t        else {\n\t          throw new Error('[_.sprintf] huh?');\n\t        }\n\t        _fmt = _fmt.substring(match[0].length);\n\t      }\n\t      return parse_tree;\n\t    };\n\t\n\t    return str_format;\n\t  })();\n\t\n\t\n\t\n\t  // Defining underscore.string\n\t\n\t  var _s = {\n\t\n\t    VERSION: '2.3.0',\n\t\n\t    isBlank: function(str){\n\t      if (str == null) str = '';\n\t      return (/^\\s*$/).test(str);\n\t    },\n\t\n\t    stripTags: function(str){\n\t      if (str == null) return '';\n\t      return String(str).replace(/<\\/?[^>]+>/g, '');\n\t    },\n\t\n\t    capitalize : function(str){\n\t      str = str == null ? '' : String(str);\n\t      return str.charAt(0).toUpperCase() + str.slice(1);\n\t    },\n\t\n\t    chop: function(str, step){\n\t      if (str == null) return [];\n\t      str = String(str);\n\t      step = ~~step;\n\t      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\n\t    },\n\t\n\t    clean: function(str){\n\t      return _s.strip(str).replace(/\\s+/g, ' ');\n\t    },\n\t\n\t    count: function(str, substr){\n\t      if (str == null || substr == null) return 0;\n\t\n\t      str = String(str);\n\t      substr = String(substr);\n\t\n\t      var count = 0,\n\t        pos = 0,\n\t        length = substr.length;\n\t\n\t      while (true) {\n\t        pos = str.indexOf(substr, pos);\n\t        if (pos === -1) break;\n\t        count++;\n\t        pos += length;\n\t      }\n\t\n\t      return count;\n\t    },\n\t\n\t    chars: function(str) {\n\t      if (str == null) return [];\n\t      return String(str).split('');\n\t    },\n\t\n\t    swapCase: function(str) {\n\t      if (str == null) return '';\n\t      return String(str).replace(/\\S/g, function(c){\n\t        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n\t      });\n\t    },\n\t\n\t    escapeHTML: function(str) {\n\t      if (str == null) return '';\n\t      return String(str).replace(/[&<>\"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });\n\t    },\n\t\n\t    unescapeHTML: function(str) {\n\t      if (str == null) return '';\n\t      return String(str).replace(/\\&([^;]+);/g, function(entity, entityCode){\n\t        var match;\n\t\n\t        if (entityCode in escapeChars) {\n\t          return escapeChars[entityCode];\n\t        } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n\t          return String.fromCharCode(parseInt(match[1], 16));\n\t        } else if (match = entityCode.match(/^#(\\d+)$/)) {\n\t          return String.fromCharCode(~~match[1]);\n\t        } else {\n\t          return entity;\n\t        }\n\t      });\n\t    },\n\t\n\t    escapeRegExp: function(str){\n\t      if (str == null) return '';\n\t      return String(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n\t    },\n\t\n\t    splice: function(str, i, howmany, substr){\n\t      var arr = _s.chars(str);\n\t      arr.splice(~~i, ~~howmany, substr);\n\t      return arr.join('');\n\t    },\n\t\n\t    insert: function(str, i, substr){\n\t      return _s.splice(str, i, 0, substr);\n\t    },\n\t\n\t    include: function(str, needle){\n\t      if (needle === '') return true;\n\t      if (str == null) return false;\n\t      return String(str).indexOf(needle) !== -1;\n\t    },\n\t\n\t    join: function() {\n\t      var args = slice.call(arguments),\n\t        separator = args.shift();\n\t\n\t      if (separator == null) separator = '';\n\t\n\t      return args.join(separator);\n\t    },\n\t\n\t    lines: function(str) {\n\t      if (str == null) return [];\n\t      return String(str).split(\"\\n\");\n\t    },\n\t\n\t    reverse: function(str){\n\t      return _s.chars(str).reverse().join('');\n\t    },\n\t\n\t    startsWith: function(str, starts){\n\t      if (starts === '') return true;\n\t      if (str == null || starts == null) return false;\n\t      str = String(str); starts = String(starts);\n\t      return str.length >= starts.length && str.slice(0, starts.length) === starts;\n\t    },\n\t\n\t    endsWith: function(str, ends){\n\t      if (ends === '') return true;\n\t      if (str == null || ends == null) return false;\n\t      str = String(str); ends = String(ends);\n\t      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;\n\t    },\n\t\n\t    succ: function(str){\n\t      if (str == null) return '';\n\t      str = String(str);\n\t      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);\n\t    },\n\t\n\t    titleize: function(str){\n\t      if (str == null) return '';\n\t      str  = String(str).toLowerCase();\n\t      return str.replace(/(?:^|\\s|-)\\S/g, function(c){ return c.toUpperCase(); });\n\t    },\n\t\n\t    camelize: function(str){\n\t      return _s.trim(str).replace(/[-_\\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : \"\"; });\n\t    },\n\t\n\t    underscored: function(str){\n\t      return _s.trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n\t    },\n\t\n\t    dasherize: function(str){\n\t      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n\t    },\n\t\n\t    classify: function(str){\n\t      return _s.titleize(String(str).replace(/[\\W_]/g, ' ')).replace(/\\s/g, '');\n\t    },\n\t\n\t    humanize: function(str){\n\t      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));\n\t    },\n\t\n\t    trim: function(str, characters){\n\t      if (str == null) return '';\n\t      if (!characters && nativeTrim) return nativeTrim.call(str);\n\t      characters = defaultToWhiteSpace(characters);\n\t      return String(str).replace(new RegExp('\\^' + characters + '+|' + characters + '+$', 'g'), '');\n\t    },\n\t\n\t    ltrim: function(str, characters){\n\t      if (str == null) return '';\n\t      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);\n\t      characters = defaultToWhiteSpace(characters);\n\t      return String(str).replace(new RegExp('^' + characters + '+'), '');\n\t    },\n\t\n\t    rtrim: function(str, characters){\n\t      if (str == null) return '';\n\t      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);\n\t      characters = defaultToWhiteSpace(characters);\n\t      return String(str).replace(new RegExp(characters + '+$'), '');\n\t    },\n\t\n\t    truncate: function(str, length, truncateStr){\n\t      if (str == null) return '';\n\t      str = String(str); truncateStr = truncateStr || '...';\n\t      length = ~~length;\n\t      return str.length > length ? str.slice(0, length) + truncateStr : str;\n\t    },\n\t\n\t    /**\n\t     * _s.prune: a more elegant version of truncate\n\t     * prune extra chars, never leaving a half-chopped word.\n\t     * @author github.com/rwz\n\t     */\n\t    prune: function(str, length, pruneStr){\n\t      if (str == null) return '';\n\t\n\t      str = String(str); length = ~~length;\n\t      pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\t\n\t      if (str.length <= length) return str;\n\t\n\t      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },\n\t        template = str.slice(0, length+1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\t\n\t      if (template.slice(template.length-2).match(/\\w\\w/))\n\t        template = template.replace(/\\s*\\S+$/, '');\n\t      else\n\t        template = _s.rtrim(template.slice(0, template.length-1));\n\t\n\t      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;\n\t    },\n\t\n\t    words: function(str, delimiter) {\n\t      if (_s.isBlank(str)) return [];\n\t      return _s.trim(str, delimiter).split(delimiter || /\\s+/);\n\t    },\n\t\n\t    pad: function(str, length, padStr, type) {\n\t      str = str == null ? '' : String(str);\n\t      length = ~~length;\n\t\n\t      var padlen  = 0;\n\t\n\t      if (!padStr)\n\t        padStr = ' ';\n\t      else if (padStr.length > 1)\n\t        padStr = padStr.charAt(0);\n\t\n\t      switch(type) {\n\t        case 'right':\n\t          padlen = length - str.length;\n\t          return str + strRepeat(padStr, padlen);\n\t        case 'both':\n\t          padlen = length - str.length;\n\t          return strRepeat(padStr, Math.ceil(padlen/2)) + str\n\t                  + strRepeat(padStr, Math.floor(padlen/2));\n\t        default: // 'left'\n\t          padlen = length - str.length;\n\t          return strRepeat(padStr, padlen) + str;\n\t        }\n\t    },\n\t\n\t    lpad: function(str, length, padStr) {\n\t      return _s.pad(str, length, padStr);\n\t    },\n\t\n\t    rpad: function(str, length, padStr) {\n\t      return _s.pad(str, length, padStr, 'right');\n\t    },\n\t\n\t    lrpad: function(str, length, padStr) {\n\t      return _s.pad(str, length, padStr, 'both');\n\t    },\n\t\n\t    sprintf: sprintf,\n\t\n\t    vsprintf: function(fmt, argv){\n\t      argv.unshift(fmt);\n\t      return sprintf.apply(null, argv);\n\t    },\n\t\n\t    toNumber: function(str, decimals) {\n\t      if (!str) return 0;\n\t      str = _s.trim(str);\n\t      if (!str.match(/^-?\\d+(?:\\.\\d+)?$/)) return NaN;\n\t      return parseNumber(parseNumber(str).toFixed(~~decimals));\n\t    },\n\t\n\t    numberFormat : function(number, dec, dsep, tsep) {\n\t      if (isNaN(number) || number == null) return '';\n\t\n\t      number = number.toFixed(~~dec);\n\t      tsep = typeof tsep == 'string' ? tsep : ',';\n\t\n\t      var parts = number.split('.'), fnums = parts[0],\n\t        decimals = parts[1] ? (dsep || '.') + parts[1] : '';\n\t\n\t      return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;\n\t    },\n\t\n\t    strRight: function(str, sep){\n\t      if (str == null) return '';\n\t      str = String(str); sep = sep != null ? String(sep) : sep;\n\t      var pos = !sep ? -1 : str.indexOf(sep);\n\t      return ~pos ? str.slice(pos+sep.length, str.length) : str;\n\t    },\n\t\n\t    strRightBack: function(str, sep){\n\t      if (str == null) return '';\n\t      str = String(str); sep = sep != null ? String(sep) : sep;\n\t      var pos = !sep ? -1 : str.lastIndexOf(sep);\n\t      return ~pos ? str.slice(pos+sep.length, str.length) : str;\n\t    },\n\t\n\t    strLeft: function(str, sep){\n\t      if (str == null) return '';\n\t      str = String(str); sep = sep != null ? String(sep) : sep;\n\t      var pos = !sep ? -1 : str.indexOf(sep);\n\t      return ~pos ? str.slice(0, pos) : str;\n\t    },\n\t\n\t    strLeftBack: function(str, sep){\n\t      if (str == null) return '';\n\t      str += ''; sep = sep != null ? ''+sep : sep;\n\t      var pos = str.lastIndexOf(sep);\n\t      return ~pos ? str.slice(0, pos) : str;\n\t    },\n\t\n\t    toSentence: function(array, separator, lastSeparator, serial) {\n\t      separator = separator || ', ';\n\t      lastSeparator = lastSeparator || ' and ';\n\t      var a = array.slice(), lastMember = a.pop();\n\t\n\t      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;\n\t\n\t      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;\n\t    },\n\t\n\t    toSentenceSerial: function() {\n\t      var args = slice.call(arguments);\n\t      args[3] = true;\n\t      return _s.toSentence.apply(_s, args);\n\t    },\n\t\n\t    slugify: function(str) {\n\t      if (str == null) return '';\n\t\n\t      var from  = \"ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź\",\n\t          to    = \"aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz\",\n\t          regex = new RegExp(defaultToWhiteSpace(from), 'g');\n\t\n\t      str = String(str).toLowerCase().replace(regex, function(c){\n\t        var index = from.indexOf(c);\n\t        return to.charAt(index) || '-';\n\t      });\n\t\n\t      return _s.dasherize(str.replace(/[^\\w\\s-]/g, ''));\n\t    },\n\t\n\t    surround: function(str, wrapper) {\n\t      return [wrapper, str, wrapper].join('');\n\t    },\n\t\n\t    quote: function(str, quoteChar) {\n\t      return _s.surround(str, quoteChar || '\"');\n\t    },\n\t\n\t    unquote: function(str, quoteChar) {\n\t      quoteChar = quoteChar || '\"';\n\t      if (str[0] === quoteChar && str[str.length-1] === quoteChar)\n\t        return str.slice(1,str.length-1);\n\t      else return str;\n\t    },\n\t\n\t    exports: function() {\n\t      var result = {};\n\t\n\t      for (var prop in this) {\n\t        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;\n\t        result[prop] = this[prop];\n\t      }\n\t\n\t      return result;\n\t    },\n\t\n\t    repeat: function(str, qty, separator){\n\t      if (str == null) return '';\n\t\n\t      qty = ~~qty;\n\t\n\t      // using faster implementation if separator is not needed;\n\t      if (separator == null) return strRepeat(String(str), qty);\n\t\n\t      // this one is about 300x slower in Google Chrome\n\t      for (var repeat = []; qty > 0; repeat[--qty] = str) {}\n\t      return repeat.join(separator);\n\t    },\n\t\n\t    naturalCmp: function(str1, str2){\n\t      if (str1 == str2) return 0;\n\t      if (!str1) return -1;\n\t      if (!str2) return 1;\n\t\n\t      var cmpRegex = /(\\.\\d+)|(\\d+)|(\\D+)/g,\n\t        tokens1 = String(str1).toLowerCase().match(cmpRegex),\n\t        tokens2 = String(str2).toLowerCase().match(cmpRegex),\n\t        count = Math.min(tokens1.length, tokens2.length);\n\t\n\t      for(var i = 0; i < count; i++) {\n\t        var a = tokens1[i], b = tokens2[i];\n\t\n\t        if (a !== b){\n\t          var num1 = parseInt(a, 10);\n\t          if (!isNaN(num1)){\n\t            var num2 = parseInt(b, 10);\n\t            if (!isNaN(num2) && num1 - num2)\n\t              return num1 - num2;\n\t          }\n\t          return a < b ? -1 : 1;\n\t        }\n\t      }\n\t\n\t      if (tokens1.length === tokens2.length)\n\t        return tokens1.length - tokens2.length;\n\t\n\t      return str1 < str2 ? -1 : 1;\n\t    },\n\t\n\t    levenshtein: function(str1, str2) {\n\t      if (str1 == null && str2 == null) return 0;\n\t      if (str1 == null) return String(str2).length;\n\t      if (str2 == null) return String(str1).length;\n\t\n\t      str1 = String(str1); str2 = String(str2);\n\t\n\t      var current = [], prev, value;\n\t\n\t      for (var i = 0; i <= str2.length; i++)\n\t        for (var j = 0; j <= str1.length; j++) {\n\t          if (i && j)\n\t            if (str1.charAt(j - 1) === str2.charAt(i - 1))\n\t              value = prev;\n\t            else\n\t              value = Math.min(current[j], current[j - 1], prev) + 1;\n\t          else\n\t            value = i + j;\n\t\n\t          prev = current[j];\n\t          current[j] = value;\n\t        }\n\t\n\t      return current.pop();\n\t    },\n\t\n\t    toBoolean: function(str, trueValues, falseValues) {\n\t      if (typeof str === \"number\") str = \"\" + str;\n\t      if (typeof str !== \"string\") return !!str;\n\t      str = _s.trim(str);\n\t      if (boolMatch(str, trueValues || [\"true\", \"1\"])) return true;\n\t      if (boolMatch(str, falseValues || [\"false\", \"0\"])) return false;\n\t    }\n\t  };\n\t\n\t  // Aliases\n\t\n\t  _s.strip    = _s.trim;\n\t  _s.lstrip   = _s.ltrim;\n\t  _s.rstrip   = _s.rtrim;\n\t  _s.center   = _s.lrpad;\n\t  _s.rjust    = _s.lpad;\n\t  _s.ljust    = _s.rpad;\n\t  _s.contains = _s.include;\n\t  _s.q        = _s.quote;\n\t  _s.toBool   = _s.toBoolean;\n\t\n\t  // Exporting\n\t\n\t  // CommonJS module is defined\n\t  if (true) {\n\t    if (typeof module !== 'undefined' && module.exports)\n\t      module.exports = _s;\n\t\n\t    exports._s = _s;\n\t  }\n\t\n\t  // Register as a named module with AMD.\n\t  if (true)\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){ return _s; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t\n\t  // Integrate with Underscore.js if defined\n\t  // or create our own underscore object.\n\t  root._ = root._ || {};\n\t  root._.string = root._.str = _s;\n\t}(this, String);\n\n\n/***/ }),\n\n/***/ 523:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.7.0\n\t//     http://underscorejs.org\n\t//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t//     Underscore may be freely distributed under the MIT license.\n\t\n\t(function() {\n\t\n\t  // Baseline setup\n\t  // --------------\n\t\n\t  // Establish the root object, `window` in the browser, or `exports` on the server.\n\t  var root = this;\n\t\n\t  // Save the previous value of the `_` variable.\n\t  var previousUnderscore = root._;\n\t\n\t  // Save bytes in the minified (but not gzipped) version:\n\t  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\t\n\t  // Create quick reference variables for speed access to core prototypes.\n\t  var\n\t    push             = ArrayProto.push,\n\t    slice            = ArrayProto.slice,\n\t    concat           = ArrayProto.concat,\n\t    toString         = ObjProto.toString,\n\t    hasOwnProperty   = ObjProto.hasOwnProperty;\n\t\n\t  // All **ECMAScript 5** native function implementations that we hope to use\n\t  // are declared here.\n\t  var\n\t    nativeIsArray      = Array.isArray,\n\t    nativeKeys         = Object.keys,\n\t    nativeBind         = FuncProto.bind;\n\t\n\t  // Create a safe reference to the Underscore object for use below.\n\t  var _ = function(obj) {\n\t    if (obj instanceof _) return obj;\n\t    if (!(this instanceof _)) return new _(obj);\n\t    this._wrapped = obj;\n\t  };\n\t\n\t  // Export the Underscore object for **Node.js**, with\n\t  // backwards-compatibility for the old `require()` API. If we're in\n\t  // the browser, add `_` as a global object.\n\t  if (true) {\n\t    if (typeof module !== 'undefined' && module.exports) {\n\t      exports = module.exports = _;\n\t    }\n\t    exports._ = _;\n\t  } else {\n\t    root._ = _;\n\t  }\n\t\n\t  // Current version.\n\t  _.VERSION = '1.7.0';\n\t\n\t  // Internal function that returns an efficient (for current engines) version\n\t  // of the passed-in callback, to be repeatedly applied in other Underscore\n\t  // functions.\n\t  var createCallback = function(func, context, argCount) {\n\t    if (context === void 0) return func;\n\t    switch (argCount == null ? 3 : argCount) {\n\t      case 1: return function(value) {\n\t        return func.call(context, value);\n\t      };\n\t      case 2: return function(value, other) {\n\t        return func.call(context, value, other);\n\t      };\n\t      case 3: return function(value, index, collection) {\n\t        return func.call(context, value, index, collection);\n\t      };\n\t      case 4: return function(accumulator, value, index, collection) {\n\t        return func.call(context, accumulator, value, index, collection);\n\t      };\n\t    }\n\t    return function() {\n\t      return func.apply(context, arguments);\n\t    };\n\t  };\n\t\n\t  // A mostly-internal function to generate callbacks that can be applied\n\t  // to each element in a collection, returning the desired result — either\n\t  // identity, an arbitrary callback, a property matcher, or a property accessor.\n\t  _.iteratee = function(value, context, argCount) {\n\t    if (value == null) return _.identity;\n\t    if (_.isFunction(value)) return createCallback(value, context, argCount);\n\t    if (_.isObject(value)) return _.matches(value);\n\t    return _.property(value);\n\t  };\n\t\n\t  // Collection Functions\n\t  // --------------------\n\t\n\t  // The cornerstone, an `each` implementation, aka `forEach`.\n\t  // Handles raw objects in addition to array-likes. Treats all\n\t  // sparse array-likes as if they were dense.\n\t  _.each = _.forEach = function(obj, iteratee, context) {\n\t    if (obj == null) return obj;\n\t    iteratee = createCallback(iteratee, context);\n\t    var i, length = obj.length;\n\t    if (length === +length) {\n\t      for (i = 0; i < length; i++) {\n\t        iteratee(obj[i], i, obj);\n\t      }\n\t    } else {\n\t      var keys = _.keys(obj);\n\t      for (i = 0, length = keys.length; i < length; i++) {\n\t        iteratee(obj[keys[i]], keys[i], obj);\n\t      }\n\t    }\n\t    return obj;\n\t  };\n\t\n\t  // Return the results of applying the iteratee to each element.\n\t  _.map = _.collect = function(obj, iteratee, context) {\n\t    if (obj == null) return [];\n\t    iteratee = _.iteratee(iteratee, context);\n\t    var keys = obj.length !== +obj.length && _.keys(obj),\n\t        length = (keys || obj).length,\n\t        results = Array(length),\n\t        currentKey;\n\t    for (var index = 0; index < length; index++) {\n\t      currentKey = keys ? keys[index] : index;\n\t      results[index] = iteratee(obj[currentKey], currentKey, obj);\n\t    }\n\t    return results;\n\t  };\n\t\n\t  var reduceError = 'Reduce of empty array with no initial value';\n\t\n\t  // **Reduce** builds up a single result from a list of values, aka `inject`,\n\t  // or `foldl`.\n\t  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {\n\t    if (obj == null) obj = [];\n\t    iteratee = createCallback(iteratee, context, 4);\n\t    var keys = obj.length !== +obj.length && _.keys(obj),\n\t        length = (keys || obj).length,\n\t        index = 0, currentKey;\n\t    if (arguments.length < 3) {\n\t      if (!length) throw new TypeError(reduceError);\n\t      memo = obj[keys ? keys[index++] : index++];\n\t    }\n\t    for (; index < length; index++) {\n\t      currentKey = keys ? keys[index] : index;\n\t      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n\t    }\n\t    return memo;\n\t  };\n\t\n\t  // The right-associative version of reduce, also known as `foldr`.\n\t  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n\t    if (obj == null) obj = [];\n\t    iteratee = createCallback(iteratee, context, 4);\n\t    var keys = obj.length !== + obj.length && _.keys(obj),\n\t        index = (keys || obj).length,\n\t        currentKey;\n\t    if (arguments.length < 3) {\n\t      if (!index) throw new TypeError(reduceError);\n\t      memo = obj[keys ? keys[--index] : --index];\n\t    }\n\t    while (index--) {\n\t      currentKey = keys ? keys[index] : index;\n\t      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n\t    }\n\t    return memo;\n\t  };\n\t\n\t  // Return the first value which passes a truth test. Aliased as `detect`.\n\t  _.find = _.detect = function(obj, predicate, context) {\n\t    var result;\n\t    predicate = _.iteratee(predicate, context);\n\t    _.some(obj, function(value, index, list) {\n\t      if (predicate(value, index, list)) {\n\t        result = value;\n\t        return true;\n\t      }\n\t    });\n\t    return result;\n\t  };\n\t\n\t  // Return all the elements that pass a truth test.\n\t  // Aliased as `select`.\n\t  _.filter = _.select = function(obj, predicate, context) {\n\t    var results = [];\n\t    if (obj == null) return results;\n\t    predicate = _.iteratee(predicate, context);\n\t    _.each(obj, function(value, index, list) {\n\t      if (predicate(value, index, list)) results.push(value);\n\t    });\n\t    return results;\n\t  };\n\t\n\t  // Return all the elements for which a truth test fails.\n\t  _.reject = function(obj, predicate, context) {\n\t    return _.filter(obj, _.negate(_.iteratee(predicate)), context);\n\t  };\n\t\n\t  // Determine whether all of the elements match a truth test.\n\t  // Aliased as `all`.\n\t  _.every = _.all = function(obj, predicate, context) {\n\t    if (obj == null) return true;\n\t    predicate = _.iteratee(predicate, context);\n\t    var keys = obj.length !== +obj.length && _.keys(obj),\n\t        length = (keys || obj).length,\n\t        index, currentKey;\n\t    for (index = 0; index < length; index++) {\n\t      currentKey = keys ? keys[index] : index;\n\t      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n\t    }\n\t    return true;\n\t  };\n\t\n\t  // Determine if at least one element in the object matches a truth test.\n\t  // Aliased as `any`.\n\t  _.some = _.any = function(obj, predicate, context) {\n\t    if (obj == null) return false;\n\t    predicate = _.iteratee(predicate, context);\n\t    var keys = obj.length !== +obj.length && _.keys(obj),\n\t        length = (keys || obj).length,\n\t        index, currentKey;\n\t    for (index = 0; index < length; index++) {\n\t      currentKey = keys ? keys[index] : index;\n\t      if (predicate(obj[currentKey], currentKey, obj)) return true;\n\t    }\n\t    return false;\n\t  };\n\t\n\t  // Determine if the array or object contains a given value (using `===`).\n\t  // Aliased as `include`.\n\t  _.contains = _.include = function(obj, target) {\n\t    if (obj == null) return false;\n\t    if (obj.length !== +obj.length) obj = _.values(obj);\n\t    return _.indexOf(obj, target) >= 0;\n\t  };\n\t\n\t  // Invoke a method (with arguments) on every item in a collection.\n\t  _.invoke = function(obj, method) {\n\t    var args = slice.call(arguments, 2);\n\t    var isFunc = _.isFunction(method);\n\t    return _.map(obj, function(value) {\n\t      return (isFunc ? method : value[method]).apply(value, args);\n\t    });\n\t  };\n\t\n\t  // Convenience version of a common use case of `map`: fetching a property.\n\t  _.pluck = function(obj, key) {\n\t    return _.map(obj, _.property(key));\n\t  };\n\t\n\t  // Convenience version of a common use case of `filter`: selecting only objects\n\t  // containing specific `key:value` pairs.\n\t  _.where = function(obj, attrs) {\n\t    return _.filter(obj, _.matches(attrs));\n\t  };\n\t\n\t  // Convenience version of a common use case of `find`: getting the first object\n\t  // containing specific `key:value` pairs.\n\t  _.findWhere = function(obj, attrs) {\n\t    return _.find(obj, _.matches(attrs));\n\t  };\n\t\n\t  // Return the maximum element (or element-based computation).\n\t  _.max = function(obj, iteratee, context) {\n\t    var result = -Infinity, lastComputed = -Infinity,\n\t        value, computed;\n\t    if (iteratee == null && obj != null) {\n\t      obj = obj.length === +obj.length ? obj : _.values(obj);\n\t      for (var i = 0, length = obj.length; i < length; i++) {\n\t        value = obj[i];\n\t        if (value > result) {\n\t          result = value;\n\t        }\n\t      }\n\t    } else {\n\t      iteratee = _.iteratee(iteratee, context);\n\t      _.each(obj, function(value, index, list) {\n\t        computed = iteratee(value, index, list);\n\t        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n\t          result = value;\n\t          lastComputed = computed;\n\t        }\n\t      });\n\t    }\n\t    return result;\n\t  };\n\t\n\t  // Return the minimum element (or element-based computation).\n\t  _.min = function(obj, iteratee, context) {\n\t    var result = Infinity, lastComputed = Infinity,\n\t        value, computed;\n\t    if (iteratee == null && obj != null) {\n\t      obj = obj.length === +obj.length ? obj : _.values(obj);\n\t      for (var i = 0, length = obj.length; i < length; i++) {\n\t        value = obj[i];\n\t        if (value < result) {\n\t          result = value;\n\t        }\n\t      }\n\t    } else {\n\t      iteratee = _.iteratee(iteratee, context);\n\t      _.each(obj, function(value, index, list) {\n\t        computed = iteratee(value, index, list);\n\t        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n\t          result = value;\n\t          lastComputed = computed;\n\t        }\n\t      });\n\t    }\n\t    return result;\n\t  };\n\t\n\t  // Shuffle a collection, using the modern version of the\n\t  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n\t  _.shuffle = function(obj) {\n\t    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n\t    var length = set.length;\n\t    var shuffled = Array(length);\n\t    for (var index = 0, rand; index < length; index++) {\n\t      rand = _.random(0, index);\n\t      if (rand !== index) shuffled[index] = shuffled[rand];\n\t      shuffled[rand] = set[index];\n\t    }\n\t    return shuffled;\n\t  };\n\t\n\t  // Sample **n** random values from a collection.\n\t  // If **n** is not specified, returns a single random element.\n\t  // The internal `guard` argument allows it to work with `map`.\n\t  _.sample = function(obj, n, guard) {\n\t    if (n == null || guard) {\n\t      if (obj.length !== +obj.length) obj = _.values(obj);\n\t      return obj[_.random(obj.length - 1)];\n\t    }\n\t    return _.shuffle(obj).slice(0, Math.max(0, n));\n\t  };\n\t\n\t  // Sort the object's values by a criterion produced by an iteratee.\n\t  _.sortBy = function(obj, iteratee, context) {\n\t    iteratee = _.iteratee(iteratee, context);\n\t    return _.pluck(_.map(obj, function(value, index, list) {\n\t      return {\n\t        value: value,\n\t        index: index,\n\t        criteria: iteratee(value, index, list)\n\t      };\n\t    }).sort(function(left, right) {\n\t      var a = left.criteria;\n\t      var b = right.criteria;\n\t      if (a !== b) {\n\t        if (a > b || a === void 0) return 1;\n\t        if (a < b || b === void 0) return -1;\n\t      }\n\t      return left.index - right.index;\n\t    }), 'value');\n\t  };\n\t\n\t  // An internal function used for aggregate \"group by\" operations.\n\t  var group = function(behavior) {\n\t    return function(obj, iteratee, context) {\n\t      var result = {};\n\t      iteratee = _.iteratee(iteratee, context);\n\t      _.each(obj, function(value, index) {\n\t        var key = iteratee(value, index, obj);\n\t        behavior(result, value, key);\n\t      });\n\t      return result;\n\t    };\n\t  };\n\t\n\t  // Groups the object's values by a criterion. Pass either a string attribute\n\t  // to group by, or a function that returns the criterion.\n\t  _.groupBy = group(function(result, value, key) {\n\t    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n\t  });\n\t\n\t  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n\t  // when you know that your index values will be unique.\n\t  _.indexBy = group(function(result, value, key) {\n\t    result[key] = value;\n\t  });\n\t\n\t  // Counts instances of an object that group by a certain criterion. Pass\n\t  // either a string attribute to count by, or a function that returns the\n\t  // criterion.\n\t  _.countBy = group(function(result, value, key) {\n\t    if (_.has(result, key)) result[key]++; else result[key] = 1;\n\t  });\n\t\n\t  // Use a comparator function to figure out the smallest index at which\n\t  // an object should be inserted so as to maintain order. Uses binary search.\n\t  _.sortedIndex = function(array, obj, iteratee, context) {\n\t    iteratee = _.iteratee(iteratee, context, 1);\n\t    var value = iteratee(obj);\n\t    var low = 0, high = array.length;\n\t    while (low < high) {\n\t      var mid = low + high >>> 1;\n\t      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n\t    }\n\t    return low;\n\t  };\n\t\n\t  // Safely create a real, live array from anything iterable.\n\t  _.toArray = function(obj) {\n\t    if (!obj) return [];\n\t    if (_.isArray(obj)) return slice.call(obj);\n\t    if (obj.length === +obj.length) return _.map(obj, _.identity);\n\t    return _.values(obj);\n\t  };\n\t\n\t  // Return the number of elements in an object.\n\t  _.size = function(obj) {\n\t    if (obj == null) return 0;\n\t    return obj.length === +obj.length ? obj.length : _.keys(obj).length;\n\t  };\n\t\n\t  // Split a collection into two arrays: one whose elements all satisfy the given\n\t  // predicate, and one whose elements all do not satisfy the predicate.\n\t  _.partition = function(obj, predicate, context) {\n\t    predicate = _.iteratee(predicate, context);\n\t    var pass = [], fail = [];\n\t    _.each(obj, function(value, key, obj) {\n\t      (predicate(value, key, obj) ? pass : fail).push(value);\n\t    });\n\t    return [pass, fail];\n\t  };\n\t\n\t  // Array Functions\n\t  // ---------------\n\t\n\t  // Get the first element of an array. Passing **n** will return the first N\n\t  // values in the array. Aliased as `head` and `take`. The **guard** check\n\t  // allows it to work with `_.map`.\n\t  _.first = _.head = _.take = function(array, n, guard) {\n\t    if (array == null) return void 0;\n\t    if (n == null || guard) return array[0];\n\t    if (n < 0) return [];\n\t    return slice.call(array, 0, n);\n\t  };\n\t\n\t  // Returns everything but the last entry of the array. Especially useful on\n\t  // the arguments object. Passing **n** will return all the values in\n\t  // the array, excluding the last N. The **guard** check allows it to work with\n\t  // `_.map`.\n\t  _.initial = function(array, n, guard) {\n\t    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n\t  };\n\t\n\t  // Get the last element of an array. Passing **n** will return the last N\n\t  // values in the array. The **guard** check allows it to work with `_.map`.\n\t  _.last = function(array, n, guard) {\n\t    if (array == null) return void 0;\n\t    if (n == null || guard) return array[array.length - 1];\n\t    return slice.call(array, Math.max(array.length - n, 0));\n\t  };\n\t\n\t  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n\t  // Especially useful on the arguments object. Passing an **n** will return\n\t  // the rest N values in the array. The **guard**\n\t  // check allows it to work with `_.map`.\n\t  _.rest = _.tail = _.drop = function(array, n, guard) {\n\t    return slice.call(array, n == null || guard ? 1 : n);\n\t  };\n\t\n\t  // Trim out all falsy values from an array.\n\t  _.compact = function(array) {\n\t    return _.filter(array, _.identity);\n\t  };\n\t\n\t  // Internal implementation of a recursive `flatten` function.\n\t  var flatten = function(input, shallow, strict, output) {\n\t    if (shallow && _.every(input, _.isArray)) {\n\t      return concat.apply(output, input);\n\t    }\n\t    for (var i = 0, length = input.length; i < length; i++) {\n\t      var value = input[i];\n\t      if (!_.isArray(value) && !_.isArguments(value)) {\n\t        if (!strict) output.push(value);\n\t      } else if (shallow) {\n\t        push.apply(output, value);\n\t      } else {\n\t        flatten(value, shallow, strict, output);\n\t      }\n\t    }\n\t    return output;\n\t  };\n\t\n\t  // Flatten out an array, either recursively (by default), or just one level.\n\t  _.flatten = function(array, shallow) {\n\t    return flatten(array, shallow, false, []);\n\t  };\n\t\n\t  // Return a version of the array that does not contain the specified value(s).\n\t  _.without = function(array) {\n\t    return _.difference(array, slice.call(arguments, 1));\n\t  };\n\t\n\t  // Produce a duplicate-free version of the array. If the array has already\n\t  // been sorted, you have the option of using a faster algorithm.\n\t  // Aliased as `unique`.\n\t  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n\t    if (array == null) return [];\n\t    if (!_.isBoolean(isSorted)) {\n\t      context = iteratee;\n\t      iteratee = isSorted;\n\t      isSorted = false;\n\t    }\n\t    if (iteratee != null) iteratee = _.iteratee(iteratee, context);\n\t    var result = [];\n\t    var seen = [];\n\t    for (var i = 0, length = array.length; i < length; i++) {\n\t      var value = array[i];\n\t      if (isSorted) {\n\t        if (!i || seen !== value) result.push(value);\n\t        seen = value;\n\t      } else if (iteratee) {\n\t        var computed = iteratee(value, i, array);\n\t        if (_.indexOf(seen, computed) < 0) {\n\t          seen.push(computed);\n\t          result.push(value);\n\t        }\n\t      } else if (_.indexOf(result, value) < 0) {\n\t        result.push(value);\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t\n\t  // Produce an array that contains the union: each distinct element from all of\n\t  // the passed-in arrays.\n\t  _.union = function() {\n\t    return _.uniq(flatten(arguments, true, true, []));\n\t  };\n\t\n\t  // Produce an array that contains every item shared between all the\n\t  // passed-in arrays.\n\t  _.intersection = function(array) {\n\t    if (array == null) return [];\n\t    var result = [];\n\t    var argsLength = arguments.length;\n\t    for (var i = 0, length = array.length; i < length; i++) {\n\t      var item = array[i];\n\t      if (_.contains(result, item)) continue;\n\t      for (var j = 1; j < argsLength; j++) {\n\t        if (!_.contains(arguments[j], item)) break;\n\t      }\n\t      if (j === argsLength) result.push(item);\n\t    }\n\t    return result;\n\t  };\n\t\n\t  // Take the difference between one array and a number of other arrays.\n\t  // Only the elements present in just the first array will remain.\n\t  _.difference = function(array) {\n\t    var rest = flatten(slice.call(arguments, 1), true, true, []);\n\t    return _.filter(array, function(value){\n\t      return !_.contains(rest, value);\n\t    });\n\t  };\n\t\n\t  // Zip together multiple lists into a single array -- elements that share\n\t  // an index go together.\n\t  _.zip = function(array) {\n\t    if (array == null) return [];\n\t    var length = _.max(arguments, 'length').length;\n\t    var results = Array(length);\n\t    for (var i = 0; i < length; i++) {\n\t      results[i] = _.pluck(arguments, i);\n\t    }\n\t    return results;\n\t  };\n\t\n\t  // Converts lists into objects. Pass either a single array of `[key, value]`\n\t  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n\t  // the corresponding values.\n\t  _.object = function(list, values) {\n\t    if (list == null) return {};\n\t    var result = {};\n\t    for (var i = 0, length = list.length; i < length; i++) {\n\t      if (values) {\n\t        result[list[i]] = values[i];\n\t      } else {\n\t        result[list[i][0]] = list[i][1];\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t\n\t  // Return the position of the first occurrence of an item in an array,\n\t  // or -1 if the item is not included in the array.\n\t  // If the array is large and already in sort order, pass `true`\n\t  // for **isSorted** to use binary search.\n\t  _.indexOf = function(array, item, isSorted) {\n\t    if (array == null) return -1;\n\t    var i = 0, length = array.length;\n\t    if (isSorted) {\n\t      if (typeof isSorted == 'number') {\n\t        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n\t      } else {\n\t        i = _.sortedIndex(array, item);\n\t        return array[i] === item ? i : -1;\n\t      }\n\t    }\n\t    for (; i < length; i++) if (array[i] === item) return i;\n\t    return -1;\n\t  };\n\t\n\t  _.lastIndexOf = function(array, item, from) {\n\t    if (array == null) return -1;\n\t    var idx = array.length;\n\t    if (typeof from == 'number') {\n\t      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);\n\t    }\n\t    while (--idx >= 0) if (array[idx] === item) return idx;\n\t    return -1;\n\t  };\n\t\n\t  // Generate an integer Array containing an arithmetic progression. A port of\n\t  // the native Python `range()` function. See\n\t  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n\t  _.range = function(start, stop, step) {\n\t    if (arguments.length <= 1) {\n\t      stop = start || 0;\n\t      start = 0;\n\t    }\n\t    step = step || 1;\n\t\n\t    var length = Math.max(Math.ceil((stop - start) / step), 0);\n\t    var range = Array(length);\n\t\n\t    for (var idx = 0; idx < length; idx++, start += step) {\n\t      range[idx] = start;\n\t    }\n\t\n\t    return range;\n\t  };\n\t\n\t  // Function (ahem) Functions\n\t  // ------------------\n\t\n\t  // Reusable constructor function for prototype setting.\n\t  var Ctor = function(){};\n\t\n\t  // Create a function bound to a given object (assigning `this`, and arguments,\n\t  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n\t  // available.\n\t  _.bind = function(func, context) {\n\t    var args, bound;\n\t    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n\t    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n\t    args = slice.call(arguments, 2);\n\t    bound = function() {\n\t      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n\t      Ctor.prototype = func.prototype;\n\t      var self = new Ctor;\n\t      Ctor.prototype = null;\n\t      var result = func.apply(self, args.concat(slice.call(arguments)));\n\t      if (_.isObject(result)) return result;\n\t      return self;\n\t    };\n\t    return bound;\n\t  };\n\t\n\t  // Partially apply a function by creating a version that has had some of its\n\t  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n\t  // as a placeholder, allowing any combination of arguments to be pre-filled.\n\t  _.partial = function(func) {\n\t    var boundArgs = slice.call(arguments, 1);\n\t    return function() {\n\t      var position = 0;\n\t      var args = boundArgs.slice();\n\t      for (var i = 0, length = args.length; i < length; i++) {\n\t        if (args[i] === _) args[i] = arguments[position++];\n\t      }\n\t      while (position < arguments.length) args.push(arguments[position++]);\n\t      return func.apply(this, args);\n\t    };\n\t  };\n\t\n\t  // Bind a number of an object's methods to that object. Remaining arguments\n\t  // are the method names to be bound. Useful for ensuring that all callbacks\n\t  // defined on an object belong to it.\n\t  _.bindAll = function(obj) {\n\t    var i, length = arguments.length, key;\n\t    if (length <= 1) throw new Error('bindAll must be passed function names');\n\t    for (i = 1; i < length; i++) {\n\t      key = arguments[i];\n\t      obj[key] = _.bind(obj[key], obj);\n\t    }\n\t    return obj;\n\t  };\n\t\n\t  // Memoize an expensive function by storing its results.\n\t  _.memoize = function(func, hasher) {\n\t    var memoize = function(key) {\n\t      var cache = memoize.cache;\n\t      var address = hasher ? hasher.apply(this, arguments) : key;\n\t      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n\t      return cache[address];\n\t    };\n\t    memoize.cache = {};\n\t    return memoize;\n\t  };\n\t\n\t  // Delays a function for the given number of milliseconds, and then calls\n\t  // it with the arguments supplied.\n\t  _.delay = function(func, wait) {\n\t    var args = slice.call(arguments, 2);\n\t    return setTimeout(function(){\n\t      return func.apply(null, args);\n\t    }, wait);\n\t  };\n\t\n\t  // Defers a function, scheduling it to run after the current call stack has\n\t  // cleared.\n\t  _.defer = function(func) {\n\t    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n\t  };\n\t\n\t  // Returns a function, that, when invoked, will only be triggered at most once\n\t  // during a given window of time. Normally, the throttled function will run\n\t  // as much as it can, without ever going more than once per `wait` duration;\n\t  // but if you'd like to disable the execution on the leading edge, pass\n\t  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n\t  _.throttle = function(func, wait, options) {\n\t    var context, args, result;\n\t    var timeout = null;\n\t    var previous = 0;\n\t    if (!options) options = {};\n\t    var later = function() {\n\t      previous = options.leading === false ? 0 : _.now();\n\t      timeout = null;\n\t      result = func.apply(context, args);\n\t      if (!timeout) context = args = null;\n\t    };\n\t    return function() {\n\t      var now = _.now();\n\t      if (!previous && options.leading === false) previous = now;\n\t      var remaining = wait - (now - previous);\n\t      context = this;\n\t      args = arguments;\n\t      if (remaining <= 0 || remaining > wait) {\n\t        clearTimeout(timeout);\n\t        timeout = null;\n\t        previous = now;\n\t        result = func.apply(context, args);\n\t        if (!timeout) context = args = null;\n\t      } else if (!timeout && options.trailing !== false) {\n\t        timeout = setTimeout(later, remaining);\n\t      }\n\t      return result;\n\t    };\n\t  };\n\t\n\t  // Returns a function, that, as long as it continues to be invoked, will not\n\t  // be triggered. The function will be called after it stops being called for\n\t  // N milliseconds. If `immediate` is passed, trigger the function on the\n\t  // leading edge, instead of the trailing.\n\t  _.debounce = function(func, wait, immediate) {\n\t    var timeout, args, context, timestamp, result;\n\t\n\t    var later = function() {\n\t      var last = _.now() - timestamp;\n\t\n\t      if (last < wait && last > 0) {\n\t        timeout = setTimeout(later, wait - last);\n\t      } else {\n\t        timeout = null;\n\t        if (!immediate) {\n\t          result = func.apply(context, args);\n\t          if (!timeout) context = args = null;\n\t        }\n\t      }\n\t    };\n\t\n\t    return function() {\n\t      context = this;\n\t      args = arguments;\n\t      timestamp = _.now();\n\t      var callNow = immediate && !timeout;\n\t      if (!timeout) timeout = setTimeout(later, wait);\n\t      if (callNow) {\n\t        result = func.apply(context, args);\n\t        context = args = null;\n\t      }\n\t\n\t      return result;\n\t    };\n\t  };\n\t\n\t  // Returns the first function passed as an argument to the second,\n\t  // allowing you to adjust arguments, run code before and after, and\n\t  // conditionally execute the original function.\n\t  _.wrap = function(func, wrapper) {\n\t    return _.partial(wrapper, func);\n\t  };\n\t\n\t  // Returns a negated version of the passed-in predicate.\n\t  _.negate = function(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    };\n\t  };\n\t\n\t  // Returns a function that is the composition of a list of functions, each\n\t  // consuming the return value of the function that follows.\n\t  _.compose = function() {\n\t    var args = arguments;\n\t    var start = args.length - 1;\n\t    return function() {\n\t      var i = start;\n\t      var result = args[start].apply(this, arguments);\n\t      while (i--) result = args[i].call(this, result);\n\t      return result;\n\t    };\n\t  };\n\t\n\t  // Returns a function that will only be executed after being called N times.\n\t  _.after = function(times, func) {\n\t    return function() {\n\t      if (--times < 1) {\n\t        return func.apply(this, arguments);\n\t      }\n\t    };\n\t  };\n\t\n\t  // Returns a function that will only be executed before being called N times.\n\t  _.before = function(times, func) {\n\t    var memo;\n\t    return function() {\n\t      if (--times > 0) {\n\t        memo = func.apply(this, arguments);\n\t      } else {\n\t        func = null;\n\t      }\n\t      return memo;\n\t    };\n\t  };\n\t\n\t  // Returns a function that will be executed at most one time, no matter how\n\t  // often you call it. Useful for lazy initialization.\n\t  _.once = _.partial(_.before, 2);\n\t\n\t  // Object Functions\n\t  // ----------------\n\t\n\t  // Retrieve the names of an object's properties.\n\t  // Delegates to **ECMAScript 5**'s native `Object.keys`\n\t  _.keys = function(obj) {\n\t    if (!_.isObject(obj)) return [];\n\t    if (nativeKeys) return nativeKeys(obj);\n\t    var keys = [];\n\t    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n\t    return keys;\n\t  };\n\t\n\t  // Retrieve the values of an object's properties.\n\t  _.values = function(obj) {\n\t    var keys = _.keys(obj);\n\t    var length = keys.length;\n\t    var values = Array(length);\n\t    for (var i = 0; i < length; i++) {\n\t      values[i] = obj[keys[i]];\n\t    }\n\t    return values;\n\t  };\n\t\n\t  // Convert an object into a list of `[key, value]` pairs.\n\t  _.pairs = function(obj) {\n\t    var keys = _.keys(obj);\n\t    var length = keys.length;\n\t    var pairs = Array(length);\n\t    for (var i = 0; i < length; i++) {\n\t      pairs[i] = [keys[i], obj[keys[i]]];\n\t    }\n\t    return pairs;\n\t  };\n\t\n\t  // Invert the keys and values of an object. The values must be serializable.\n\t  _.invert = function(obj) {\n\t    var result = {};\n\t    var keys = _.keys(obj);\n\t    for (var i = 0, length = keys.length; i < length; i++) {\n\t      result[obj[keys[i]]] = keys[i];\n\t    }\n\t    return result;\n\t  };\n\t\n\t  // Return a sorted list of the function names available on the object.\n\t  // Aliased as `methods`\n\t  _.functions = _.methods = function(obj) {\n\t    var names = [];\n\t    for (var key in obj) {\n\t      if (_.isFunction(obj[key])) names.push(key);\n\t    }\n\t    return names.sort();\n\t  };\n\t\n\t  // Extend a given object with all the properties in passed-in object(s).\n\t  _.extend = function(obj) {\n\t    if (!_.isObject(obj)) return obj;\n\t    var source, prop;\n\t    for (var i = 1, length = arguments.length; i < length; i++) {\n\t      source = arguments[i];\n\t      for (prop in source) {\n\t        if (hasOwnProperty.call(source, prop)) {\n\t            obj[prop] = source[prop];\n\t        }\n\t      }\n\t    }\n\t    return obj;\n\t  };\n\t\n\t  // Return a copy of the object only containing the whitelisted properties.\n\t  _.pick = function(obj, iteratee, context) {\n\t    var result = {}, key;\n\t    if (obj == null) return result;\n\t    if (_.isFunction(iteratee)) {\n\t      iteratee = createCallback(iteratee, context);\n\t      for (key in obj) {\n\t        var value = obj[key];\n\t        if (iteratee(value, key, obj)) result[key] = value;\n\t      }\n\t    } else {\n\t      var keys = concat.apply([], slice.call(arguments, 1));\n\t      obj = new Object(obj);\n\t      for (var i = 0, length = keys.length; i < length; i++) {\n\t        key = keys[i];\n\t        if (key in obj) result[key] = obj[key];\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t\n\t   // Return a copy of the object without the blacklisted properties.\n\t  _.omit = function(obj, iteratee, context) {\n\t    if (_.isFunction(iteratee)) {\n\t      iteratee = _.negate(iteratee);\n\t    } else {\n\t      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);\n\t      iteratee = function(value, key) {\n\t        return !_.contains(keys, key);\n\t      };\n\t    }\n\t    return _.pick(obj, iteratee, context);\n\t  };\n\t\n\t  // Fill in a given object with default properties.\n\t  _.defaults = function(obj) {\n\t    if (!_.isObject(obj)) return obj;\n\t    for (var i = 1, length = arguments.length; i < length; i++) {\n\t      var source = arguments[i];\n\t      for (var prop in source) {\n\t        if (obj[prop] === void 0) obj[prop] = source[prop];\n\t      }\n\t    }\n\t    return obj;\n\t  };\n\t\n\t  // Create a (shallow-cloned) duplicate of an object.\n\t  _.clone = function(obj) {\n\t    if (!_.isObject(obj)) return obj;\n\t    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n\t  };\n\t\n\t  // Invokes interceptor with the obj, and then returns obj.\n\t  // The primary purpose of this method is to \"tap into\" a method chain, in\n\t  // order to perform operations on intermediate results within the chain.\n\t  _.tap = function(obj, interceptor) {\n\t    interceptor(obj);\n\t    return obj;\n\t  };\n\t\n\t  // Internal recursive comparison function for `isEqual`.\n\t  var eq = function(a, b, aStack, bStack) {\n\t    // Identical objects are equal. `0 === -0`, but they aren't identical.\n\t    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n\t    if (a === b) return a !== 0 || 1 / a === 1 / b;\n\t    // A strict comparison is necessary because `null == undefined`.\n\t    if (a == null || b == null) return a === b;\n\t    // Unwrap any wrapped objects.\n\t    if (a instanceof _) a = a._wrapped;\n\t    if (b instanceof _) b = b._wrapped;\n\t    // Compare `[[Class]]` names.\n\t    var className = toString.call(a);\n\t    if (className !== toString.call(b)) return false;\n\t    switch (className) {\n\t      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n\t      case '[object RegExp]':\n\t      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\t      case '[object String]':\n\t        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n\t        // equivalent to `new String(\"5\")`.\n\t        return '' + a === '' + b;\n\t      case '[object Number]':\n\t        // `NaN`s are equivalent, but non-reflexive.\n\t        // Object(NaN) is equivalent to NaN\n\t        if (+a !== +a) return +b !== +b;\n\t        // An `egal` comparison is performed for other numeric values.\n\t        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\t      case '[object Date]':\n\t      case '[object Boolean]':\n\t        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n\t        // millisecond representations. Note that invalid dates with millisecond representations\n\t        // of `NaN` are not equivalent.\n\t        return +a === +b;\n\t    }\n\t    if (typeof a != 'object' || typeof b != 'object') return false;\n\t    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n\t    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\t    var length = aStack.length;\n\t    while (length--) {\n\t      // Linear search. Performance is inversely proportional to the number of\n\t      // unique nested structures.\n\t      if (aStack[length] === a) return bStack[length] === b;\n\t    }\n\t    // Objects with different constructors are not equivalent, but `Object`s\n\t    // from different frames are.\n\t    var aCtor = a.constructor, bCtor = b.constructor;\n\t    if (\n\t      aCtor !== bCtor &&\n\t      // Handle Object.create(x) cases\n\t      'constructor' in a && 'constructor' in b &&\n\t      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n\t        _.isFunction(bCtor) && bCtor instanceof bCtor)\n\t    ) {\n\t      return false;\n\t    }\n\t    // Add the first object to the stack of traversed objects.\n\t    aStack.push(a);\n\t    bStack.push(b);\n\t    var size, result;\n\t    // Recursively compare objects and arrays.\n\t    if (className === '[object Array]') {\n\t      // Compare array lengths to determine if a deep comparison is necessary.\n\t      size = a.length;\n\t      result = size === b.length;\n\t      if (result) {\n\t        // Deep compare the contents, ignoring non-numeric properties.\n\t        while (size--) {\n\t          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n\t        }\n\t      }\n\t    } else {\n\t      // Deep compare objects.\n\t      var keys = _.keys(a), key;\n\t      size = keys.length;\n\t      // Ensure that both objects contain the same number of properties before comparing deep equality.\n\t      result = _.keys(b).length === size;\n\t      if (result) {\n\t        while (size--) {\n\t          // Deep compare each member\n\t          key = keys[size];\n\t          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n\t        }\n\t      }\n\t    }\n\t    // Remove the first object from the stack of traversed objects.\n\t    aStack.pop();\n\t    bStack.pop();\n\t    return result;\n\t  };\n\t\n\t  // Perform a deep comparison to check if two objects are equal.\n\t  _.isEqual = function(a, b) {\n\t    return eq(a, b, [], []);\n\t  };\n\t\n\t  // Is a given array, string, or object empty?\n\t  // An \"empty\" object has no enumerable own-properties.\n\t  _.isEmpty = function(obj) {\n\t    if (obj == null) return true;\n\t    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;\n\t    for (var key in obj) if (_.has(obj, key)) return false;\n\t    return true;\n\t  };\n\t\n\t  // Is a given value a DOM element?\n\t  _.isElement = function(obj) {\n\t    return !!(obj && obj.nodeType === 1);\n\t  };\n\t\n\t  // Is a given value an array?\n\t  // Delegates to ECMA5's native Array.isArray\n\t  _.isArray = nativeIsArray || function(obj) {\n\t    return toString.call(obj) === '[object Array]';\n\t  };\n\t\n\t  // Is a given variable an object?\n\t  _.isObject = function(obj) {\n\t    var type = typeof obj;\n\t    return type === 'function' || type === 'object' && !!obj;\n\t  };\n\t\n\t  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n\t  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n\t    _['is' + name] = function(obj) {\n\t      return toString.call(obj) === '[object ' + name + ']';\n\t    };\n\t  });\n\t\n\t  // Define a fallback version of the method in browsers (ahem, IE), where\n\t  // there isn't any inspectable \"Arguments\" type.\n\t  if (!_.isArguments(arguments)) {\n\t    _.isArguments = function(obj) {\n\t      return _.has(obj, 'callee');\n\t    };\n\t  }\n\t\n\t  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.\n\t  if (true) {\n\t    _.isFunction = function(obj) {\n\t      return typeof obj == 'function' || false;\n\t    };\n\t  }\n\t\n\t  // Is a given object a finite number?\n\t  _.isFinite = function(obj) {\n\t    return isFinite(obj) && !isNaN(parseFloat(obj));\n\t  };\n\t\n\t  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n\t  _.isNaN = function(obj) {\n\t    return _.isNumber(obj) && obj !== +obj;\n\t  };\n\t\n\t  // Is a given value a boolean?\n\t  _.isBoolean = function(obj) {\n\t    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n\t  };\n\t\n\t  // Is a given value equal to null?\n\t  _.isNull = function(obj) {\n\t    return obj === null;\n\t  };\n\t\n\t  // Is a given variable undefined?\n\t  _.isUndefined = function(obj) {\n\t    return obj === void 0;\n\t  };\n\t\n\t  // Shortcut function for checking if an object has a given property directly\n\t  // on itself (in other words, not on a prototype).\n\t  _.has = function(obj, key) {\n\t    return obj != null && hasOwnProperty.call(obj, key);\n\t  };\n\t\n\t  // Utility Functions\n\t  // -----------------\n\t\n\t  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n\t  // previous owner. Returns a reference to the Underscore object.\n\t  _.noConflict = function() {\n\t    root._ = previousUnderscore;\n\t    return this;\n\t  };\n\t\n\t  // Keep the identity function around for default iteratees.\n\t  _.identity = function(value) {\n\t    return value;\n\t  };\n\t\n\t  _.constant = function(value) {\n\t    return function() {\n\t      return value;\n\t    };\n\t  };\n\t\n\t  _.noop = function(){};\n\t\n\t  _.property = function(key) {\n\t    return function(obj) {\n\t      return obj[key];\n\t    };\n\t  };\n\t\n\t  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n\t  _.matches = function(attrs) {\n\t    var pairs = _.pairs(attrs), length = pairs.length;\n\t    return function(obj) {\n\t      if (obj == null) return !length;\n\t      obj = new Object(obj);\n\t      for (var i = 0; i < length; i++) {\n\t        var pair = pairs[i], key = pair[0];\n\t        if (pair[1] !== obj[key] || !(key in obj)) return false;\n\t      }\n\t      return true;\n\t    };\n\t  };\n\t\n\t  // Run a function **n** times.\n\t  _.times = function(n, iteratee, context) {\n\t    var accum = Array(Math.max(0, n));\n\t    iteratee = createCallback(iteratee, context, 1);\n\t    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n\t    return accum;\n\t  };\n\t\n\t  // Return a random integer between min and max (inclusive).\n\t  _.random = function(min, max) {\n\t    if (max == null) {\n\t      max = min;\n\t      min = 0;\n\t    }\n\t    return min + Math.floor(Math.random() * (max - min + 1));\n\t  };\n\t\n\t  // A (possibly faster) way to get the current timestamp as an integer.\n\t  _.now = Date.now || function() {\n\t    return new Date().getTime();\n\t  };\n\t\n\t   // List of HTML entities for escaping.\n\t  var escapeMap = {\n\t    '&': '&amp;',\n\t    '<': '&lt;',\n\t    '>': '&gt;',\n\t    '\"': '&quot;',\n\t    \"'\": '&#x27;',\n\t    '`': '&#x60;'\n\t  };\n\t  var unescapeMap = _.invert(escapeMap);\n\t\n\t  // Functions for escaping and unescaping strings to/from HTML interpolation.\n\t  var createEscaper = function(map) {\n\t    var escaper = function(match) {\n\t      return map[match];\n\t    };\n\t    // Regexes for identifying a key that needs to be escaped\n\t    var source = '(?:' + _.keys(map).join('|') + ')';\n\t    var testRegexp = RegExp(source);\n\t    var replaceRegexp = RegExp(source, 'g');\n\t    return function(string) {\n\t      string = string == null ? '' : '' + string;\n\t      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n\t    };\n\t  };\n\t  _.escape = createEscaper(escapeMap);\n\t  _.unescape = createEscaper(unescapeMap);\n\t\n\t  // If the value of the named `property` is a function then invoke it with the\n\t  // `object` as context; otherwise, return it.\n\t  _.result = function(object, property) {\n\t    if (object == null) return void 0;\n\t    var value = object[property];\n\t    return _.isFunction(value) ? object[property]() : value;\n\t  };\n\t\n\t  // Generate a unique integer id (unique within the entire client session).\n\t  // Useful for temporary DOM ids.\n\t  var idCounter = 0;\n\t  _.uniqueId = function(prefix) {\n\t    var id = ++idCounter + '';\n\t    return prefix ? prefix + id : id;\n\t  };\n\t\n\t  // By default, Underscore uses ERB-style template delimiters, change the\n\t  // following template settings to use alternative delimiters.\n\t  _.templateSettings = {\n\t    evaluate    : /<%([\\s\\S]+?)%>/g,\n\t    interpolate : /<%=([\\s\\S]+?)%>/g,\n\t    escape      : /<%-([\\s\\S]+?)%>/g\n\t  };\n\t\n\t  // When customizing `templateSettings`, if you don't want to define an\n\t  // interpolation, evaluation or escaping regex, we need one that is\n\t  // guaranteed not to match.\n\t  var noMatch = /(.)^/;\n\t\n\t  // Certain characters need to be escaped so that they can be put into a\n\t  // string literal.\n\t  var escapes = {\n\t    \"'\":      \"'\",\n\t    '\\\\':     '\\\\',\n\t    '\\r':     'r',\n\t    '\\n':     'n',\n\t    '\\u2028': 'u2028',\n\t    '\\u2029': 'u2029'\n\t  };\n\t\n\t  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\t\n\t  var escapeChar = function(match) {\n\t    return '\\\\' + escapes[match];\n\t  };\n\t\n\t  // JavaScript micro-templating, similar to John Resig's implementation.\n\t  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n\t  // and correctly escapes quotes within interpolated code.\n\t  // NB: `oldSettings` only exists for backwards compatibility.\n\t  _.template = function(text, settings, oldSettings) {\n\t    if (!settings && oldSettings) settings = oldSettings;\n\t    settings = _.defaults({}, settings, _.templateSettings);\n\t\n\t    // Combine delimiters into one regular expression via alternation.\n\t    var matcher = RegExp([\n\t      (settings.escape || noMatch).source,\n\t      (settings.interpolate || noMatch).source,\n\t      (settings.evaluate || noMatch).source\n\t    ].join('|') + '|$', 'g');\n\t\n\t    // Compile the template source, escaping string literals appropriately.\n\t    var index = 0;\n\t    var source = \"__p+='\";\n\t    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n\t      source += text.slice(index, offset).replace(escaper, escapeChar);\n\t      index = offset + match.length;\n\t\n\t      if (escape) {\n\t        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n\t      } else if (interpolate) {\n\t        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n\t      } else if (evaluate) {\n\t        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n\t      }\n\t\n\t      // Adobe VMs need the match returned to produce the correct offest.\n\t      return match;\n\t    });\n\t    source += \"';\\n\";\n\t\n\t    // If a variable is not specified, place data values in local scope.\n\t    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\t\n\t    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n\t      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n\t      source + 'return __p;\\n';\n\t\n\t    try {\n\t      var render = new Function(settings.variable || 'obj', '_', source);\n\t    } catch (e) {\n\t      e.source = source;\n\t      throw e;\n\t    }\n\t\n\t    var template = function(data) {\n\t      return render.call(this, data, _);\n\t    };\n\t\n\t    // Provide the compiled source as a convenience for precompilation.\n\t    var argument = settings.variable || 'obj';\n\t    template.source = 'function(' + argument + '){\\n' + source + '}';\n\t\n\t    return template;\n\t  };\n\t\n\t  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n\t  _.chain = function(obj) {\n\t    var instance = _(obj);\n\t    instance._chain = true;\n\t    return instance;\n\t  };\n\t\n\t  // OOP\n\t  // ---------------\n\t  // If Underscore is called as a function, it returns a wrapped object that\n\t  // can be used OO-style. This wrapper holds altered versions of all the\n\t  // underscore functions. Wrapped objects may be chained.\n\t\n\t  // Helper function to continue chaining intermediate results.\n\t  var result = function(obj) {\n\t    return this._chain ? _(obj).chain() : obj;\n\t  };\n\t\n\t  // Add your own custom functions to the Underscore object.\n\t  _.mixin = function(obj) {\n\t    _.each(_.functions(obj), function(name) {\n\t      var func = _[name] = obj[name];\n\t      _.prototype[name] = function() {\n\t        var args = [this._wrapped];\n\t        push.apply(args, arguments);\n\t        return result.call(this, func.apply(_, args));\n\t      };\n\t    });\n\t  };\n\t\n\t  // Add all of the Underscore functions to the wrapper object.\n\t  _.mixin(_);\n\t\n\t  // Add all mutator Array functions to the wrapper.\n\t  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n\t    var method = ArrayProto[name];\n\t    _.prototype[name] = function() {\n\t      var obj = this._wrapped;\n\t      method.apply(obj, arguments);\n\t      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n\t      return result.call(this, obj);\n\t    };\n\t  });\n\t\n\t  // Add all accessor Array functions to the wrapper.\n\t  _.each(['concat', 'join', 'slice'], function(name) {\n\t    var method = ArrayProto[name];\n\t    _.prototype[name] = function() {\n\t      return result.call(this, method.apply(this._wrapped, arguments));\n\t    };\n\t  });\n\t\n\t  // Extracts the result from a wrapped and chained object.\n\t  _.prototype.value = function() {\n\t    return this._wrapped;\n\t  };\n\t\n\t  // AMD registration happens at the end for compatibility with AMD loaders\n\t  // that may not enforce next-turn semantics on modules. Even though general\n\t  // practice for AMD registration is to be anonymous, underscore registers\n\t  // as a named module because, like jQuery, it is a base library that is\n\t  // popular enough to be bundled in a third party lib, but not be part of\n\t  // an AMD load request. Those cases could generate an error when an\n\t  // anonymous define() is called outside of a loader request.\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return _;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  }\n\t}.call(this));\n\n\n/***/ }),\n\n/***/ 226:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _advancedSearchResultModule = __webpack_require__(349);\n\t\n\tvar _advancedSearchResultModule2 = _interopRequireDefault(_advancedSearchResultModule);\n\t\n\tvar _reactBootstrap = __webpack_require__(24);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction SearchList(props) {\n\t    var results = props.results;\n\t    console.log(results);\n\t\n\t    //let resultsList = [];\n\t\n\t    var resultsList = results.map(function (item, index) {\n\t        return _react2.default.createElement(\n\t            'div',\n\t            { className: _advancedSearchResultModule2.default.podcast },\n\t            _react2.default.createElement(\n\t                'h4',\n\t                null,\n\t                item.title\n\t            ),\n\t            _react2.default.createElement(\n\t                _reactBootstrap.Button,\n\t                { bsStyle: 'link' },\n\t                _react2.default.createElement(\n\t                    'a',\n\t                    { href: item.url },\n\t                    'link to podcast'\n\t                )\n\t            )\n\t        );\n\t    });\n\t\n\t    return _react2.default.createElement(\n\t        'div',\n\t        { id: 'resultslist', style: { height: '30vh', overflowY: 'auto' } },\n\t        _react2.default.createElement(\n\t            'ul',\n\t            null,\n\t            resultsList\n\t        )\n\t    );\n\t}\n\t\n\tvar AdvSearchResult = function (_Component) {\n\t    _inherits(AdvSearchResult, _Component);\n\t\n\t    function AdvSearchResult(props) {\n\t        _classCallCheck(this, AdvSearchResult);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\t\n\t        _this.handleShow = _this.handleShow.bind(_this);\n\t        _this.handleClose = _this.handleClose.bind(_this);\n\t\n\t        _this.state = {\n\t            show: false,\n\t            word: _this.props.word,\n\t            result: _this.props.result\n\t        };\n\t        return _this;\n\t    }\n\t\n\t    AdvSearchResult.prototype.handleClose = function handleClose() {\n\t        this.setState({ show: false });\n\t    };\n\t\n\t    AdvSearchResult.prototype.handleShow = function handleShow() {\n\t        this.setState({ show: true });\n\t    };\n\t\n\t    AdvSearchResult.prototype.render = function render() {\n\t        return _react2.default.createElement(\n\t            'div',\n\t            { className: _advancedSearchResultModule2.default.card },\n\t            _react2.default.createElement(\n\t                'h4',\n\t                null,\n\t                this.state.word\n\t            ),\n\t            _react2.default.createElement(\n\t                _reactBootstrap.Button,\n\t                { bsStyle: 'default', onClick: this.handleShow },\n\t                'show podcasts'\n\t            ),\n\t            _react2.default.createElement(\n\t                _reactBootstrap.Modal,\n\t                { show: this.state.show, onHide: this.handleClose },\n\t                _react2.default.createElement(\n\t                    _reactBootstrap.Modal.Header,\n\t                    { closeButton: true },\n\t                    _react2.default.createElement(\n\t                        _reactBootstrap.Modal.Title,\n\t                        null,\n\t                        this.state.word\n\t                    )\n\t                ),\n\t                _react2.default.createElement(\n\t                    _reactBootstrap.Modal.Body,\n\t                    null,\n\t                    _react2.default.createElement(SearchList, { results: this.state.result })\n\t                )\n\t            )\n\t        );\n\t    };\n\t\n\t    return AdvSearchResult;\n\t}(_react.Component);\n\t\n\texports.default = AdvSearchResult;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 349:\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\tmodule.exports = {\"card\":\"src-components----advanced-search-result-module---card---Ap0yd\",\"podcast\":\"src-components----advanced-search-result-module---podcast---fsGue\"};\n\n/***/ }),\n\n/***/ 227:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _advancedSearchResult = __webpack_require__(226);\n\t\n\tvar _advancedSearchResult2 = _interopRequireDefault(_advancedSearchResult);\n\t\n\tvar _reactBootstrap = __webpack_require__(24);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar axios = __webpack_require__(27);\n\tvar baseUrl = \"https://www.gpodder.net\";\n\tvar ke = __webpack_require__(391);\n\t\n\tfunction AdvSearchList(props) {\n\t    var results = props.results;\n\t\n\t    var resultsList = results.map(function (item, index) {\n\t        return _react2.default.createElement(_advancedSearchResult2.default, { key: index, word: item[0], result: item[1] });\n\t    });\n\t\n\t    return _react2.default.createElement(\n\t        \"div\",\n\t        { style: { width: '50vh', height: '50vh', overflowY: 'auto' } },\n\t        _react2.default.createElement(\n\t            \"ul\",\n\t            null,\n\t            resultsList\n\t        )\n\t    );\n\t}\n\t\n\tvar DescSearch = function (_Component) {\n\t    _inherits(DescSearch, _Component);\n\t\n\t    function DescSearch(props) {\n\t        _classCallCheck(this, DescSearch);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\t\n\t        _this.state = { duplicates: [], properNouns: [] };\n\t        _this.search = _this.search.bind(_this);\n\t\n\t        _this.handleChange = _this.handleChange.bind(_this);\n\t        _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t        _this.parseDescriptions = _this.parseDescriptions.bind(_this);\n\t        return _this;\n\t    }\n\t\n\t    DescSearch.prototype.handleChange = function handleChange(event) {\n\t        this.setState({ value: event.target.value });\n\t    };\n\t\n\t    DescSearch.prototype.handleSubmit = function handleSubmit(event) {\n\t        this.search(this.state.value);\n\t        event.preventDefault();\n\t    };\n\t\n\t    DescSearch.prototype.search = function search(term) {\n\t        var _this2 = this;\n\t\n\t        axios.get(baseUrl + \"/search.json\", {\n\t            params: {\n\t                q: term\n\t            }\n\t        }).then(function (response) {\n\t            _this2.parseDescriptions(response.data);\n\t        }).catch(function (error) {\n\t            console.log(error);\n\t        });\n\t    };\n\t\n\t    DescSearch.prototype.parseDescriptions = function parseDescriptions(data) {\n\t        var allWords = new Map();\n\t        var allProperNouns = new Map();\n\t        for (var i = 0; i < data.length; i++) {\n\t\n\t            var desc = data[i].description;\n\t            var extraction_result = ke.extract(desc, {\n\t                language: \"english\",\n\t                remove_digits: true,\n\t                return_changed_case: false,\n\t                remove_duplicates: false\n\t            });\n\t\n\t            for (var j = 0; j < extraction_result.length; j++) {\n\t                var word = extraction_result[j];\n\t                var char = word.charAt(0);\n\t\n\t                if (word.length > 2) {\n\t                    if (char == char.toUpperCase() && typeof char != \"number\") {\n\t                        if (!allProperNouns.has(word)) {\n\t                            allProperNouns.set(word, [data[i]]);\n\t                        } else {\n\t                            allProperNouns.get(word).push(data[i]);\n\t                        }\n\t                    } else {\n\t                        if (!allWords.has(word)) {\n\t                            allWords.set(word, [data[i]]);\n\t                        } else {\n\t                            allWords.get(word).push(data[i]);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        var duplicates = new Map();\n\t        allWords.forEach(function (value, key) {\n\t            if (value.length > 4) {\n\t                duplicates.set(key, value);\n\t            }\n\t        });\n\t\n\t        var properNouns = new Map();\n\t        allProperNouns.forEach(function (value, key) {\n\t            if (value.length > 4) {\n\t                properNouns.set(key, value);\n\t            }\n\t        });\n\t\n\t        this.setState({ duplicates: Array.from(duplicates), properNouns: Array.from(properNouns) });\n\t    };\n\t\n\t    DescSearch.prototype.render = function render() {\n\t        var _this3 = this;\n\t\n\t        return _react2.default.createElement(\n\t            \"div\",\n\t            { style: { display: 'flex-column', justifyContent: 'center' } },\n\t            _react2.default.createElement(\n\t                _reactBootstrap.Form,\n\t                { inline: true, onSubmit: function onSubmit(e) {\n\t                        return _this3.handleSubmit(e);\n\t                    } },\n\t                _react2.default.createElement(\n\t                    _reactBootstrap.FormGroup,\n\t                    { controlId: \"formInlineQuery\" },\n\t                    _react2.default.createElement(\n\t                        _reactBootstrap.ControlLabel,\n\t                        { style: { marginRight: '5px', marginTop: '5px', marginBottom: '5px' } },\n\t                        \"term:\"\n\t                    ),\n\t                    _react2.default.createElement(_reactBootstrap.FormControl, { style: { marginTop: '5px', marginBottom: '5px' }, type: \"text\", onChange: this.handleChange })\n\t                ),\n\t                ' ',\n\t                _react2.default.createElement(\n\t                    _reactBootstrap.Button,\n\t                    { bsStyle: \"primary\", style: { marginTop: '5px', marginBottom: '5px' }, type: \"submit\" },\n\t                    \"search\"\n\t                )\n\t            ),\n\t            _react2.default.createElement(\n\t                \"div\",\n\t                { style: { display: 'flex', alignItems: 'center', justifyContent: 'center' } },\n\t                _react2.default.createElement(\n\t                    \"div\",\n\t                    { style: { margin: '10px' } },\n\t                    _react2.default.createElement(\n\t                        \"h4\",\n\t                        null,\n\t                        \"most observed description phrases\"\n\t                    ),\n\t                    _react2.default.createElement(AdvSearchList, { results: this.state.duplicates })\n\t                ),\n\t                _react2.default.createElement(\n\t                    \"div\",\n\t                    { style: { margin: '10px' } },\n\t                    _react2.default.createElement(\n\t                        \"h4\",\n\t                        null,\n\t                        \"most observed proper nouns\"\n\t                    ),\n\t                    _react2.default.createElement(AdvSearchList, { results: this.state.properNouns })\n\t                )\n\t            )\n\t        );\n\t    };\n\t\n\t    return DescSearch;\n\t}(_react.Component);\n\t\n\texports.default = DescSearch;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n\n/***/ 236:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactBootstrap = __webpack_require__(24);\n\t\n\tvar _advancedSearch = __webpack_require__(227);\n\t\n\tvar _advancedSearch2 = _interopRequireDefault(_advancedSearch);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar AdvancedSearchPage = function AdvancedSearchPage() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'container', style: { width: '100%', textAlign: 'center' } },\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      'deep search for podcasts by term'\n\t    ),\n\t    _react2.default.createElement(\n\t      _reactBootstrap.Tab.Container,\n\t      { id: 'search-type', defaultActiveKey: 'first' },\n\t      _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(\n\t          _reactBootstrap.Row,\n\t          { className: 'clearfix', key: 'type' },\n\t          _react2.default.createElement(\n\t            _reactBootstrap.Col,\n\t            { sm: 12 },\n\t            _react2.default.createElement(\n\t              _reactBootstrap.Nav,\n\t              { bsStyle: 'pills', style: { display: 'flex', alignItems: 'center', justifyContent: 'center' } },\n\t              _react2.default.createElement(\n\t                _reactBootstrap.NavItem,\n\t                { eventKey: 'desc' },\n\t                'by description'\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _reactBootstrap.Row,\n\t          { className: 'clearfix', key: 'content' },\n\t          _react2.default.createElement(\n\t            _reactBootstrap.Col,\n\t            { sm: 12 },\n\t            _react2.default.createElement(\n\t              _reactBootstrap.Tab.Content,\n\t              { animation: true },\n\t              _react2.default.createElement(\n\t                _reactBootstrap.Tab.Pane,\n\t                { eventKey: 'desc' },\n\t                _react2.default.createElement(_advancedSearch2.default, null)\n\t              )\n\t            )\n\t          )\n\t        )\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\texports.default = AdvancedSearchPage;\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-advanced-js-1ff6d6bf005ab5f2c246.js","module.exports = require('./lib/keyword_extractor');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/index.js\n// module id = 391\n// module chunks = 176202273623472","var _ = require(\"underscore\");\n_.str = require('underscore.string');\nvar supported_languages = [\"danish\",\"dutch\",\"english\",\"french\",\"galician\",\"german\",\"italian\",\"polish\",\"portuguese\",\"russian\",\"spanish\",\"swedish\"];\nvar stopwords = require(\"./stopwords/stopwords\");\n\nfunction _extract(str, options){\n    if(_.isEmpty(str)){\n        return [];\n    }\n    if(_.isEmpty(options)){\n        options = {\n            remove_digits: true,\n            return_changed_case: true\n        };\n    }\n    var return_changed_case = options.return_changed_case;\n    var return_chained_words = options.return_chained_words;\n    var remove_digits = options.remove_digits;\n    var _language = options.language || \"english\";\n    var _remove_duplicates = options.remove_duplicates || false;\n    var return_max_ngrams = options.return_max_ngrams;\n\n    if(supported_languages.indexOf(_language) < 0){\n        throw new Error(\"Language must be one of [\"+supported_languages.join(\",\")+\"]\");\n    }\n\n    //  strip any HTML and trim whitespace\n    var text = _.str.trim(_.str.stripTags(str));\n    if(_.isEmpty(text)){\n        return [];\n    }else{\n        var words = text.split(/\\s/);\n        var unchanged_words = [];\n        var low_words = [];\n        //  change the case of all the words\n        for(var x = 0;x < words.length; x++){\n            var w = words[x].match(/https?:\\/\\/.*[\\r\\n]*/g) ? words[x] : words[x].replace(/\\.|,|;|!|\\?|\\(|\\)|:|\"|^'|'$|“|”|‘|’/g,'');\n            //  remove periods, question marks, exclamation points, commas, and semi-colons\n            //  if this is a short result, make sure it's not a single character or something 'odd'\n            if(w.length === 1){\n                w = w.replace(/-|_|@|&|#/g,'');\n            }\n            //  if it's a number, remove it\n            var digits_match = w.match(/\\d/g);\n            if(remove_digits && digits_match && digits_match.length === w.length){\n                w = \"\";\n            }\n            if(w.length > 0){\n                low_words.push(w.toLowerCase());\n                unchanged_words.push(w);\n            }\n        }\n        var results = [];\n        var _stopwords = options.stopwords || _getStopwords({ language: _language });\n        var _last_result_word_index = 0;\n        var _start_result_word_index = 0;\n\tvar _unbroken_word_chain = false;\n        for(var y = 0; y < low_words.length; y++){\n\n            if(_stopwords.indexOf(low_words[y]) < 0){\n                \n                if(_last_result_word_index !== y - 1){\n                    _start_result_word_index = y;\n                    _unbroken_word_chain = false; \n\t\t} else {\n\t            _unbroken_word_chain = true;\n\t\t}\n                var result_word = return_changed_case && !unchanged_words[y].match(/https?:\\/\\/.*[\\r\\n]*/g) ? low_words[y] : unchanged_words[y];\n                \n                if (return_max_ngrams && _unbroken_word_chain && !return_chained_words && return_max_ngrams > (y - _start_result_word_index) && _last_result_word_index === y - 1){\n                    var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n                    results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n                } else if (return_chained_words && _last_result_word_index === y - 1) {\n                  var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n                  results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n                } else {\n                  results.push(result_word);\n                }\n\n                _last_result_word_index = y;\n            } else {\n\t\t_unbroken_word_chain = false;\n\t    }\n        }\n\n        if(_remove_duplicates) {\n            results= _.uniq(results, function (item) {\n                return item;\n            });\n        }\n\n        return results;\n    }\n}\n\nfunction _getStopwords(options){\n    options = options || {};\n\n    var _language = options.language || \"english\";\n    if(supported_languages.indexOf(_language) < 0){\n        throw new Error(\"Language must be one of [\"+supported_languages.join(\",\")+\"]\");\n    }\n\n    return stopwords[_language];\n}\n\nmodule.exports = {\n    extract:_extract,\n    getStopwords: _getStopwords\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/keyword_extractor.js\n// module id = 392\n// module chunks = 176202273623472","// Danish stopwords\n// http://www.ranks.nl/stopwords/danish\n// https://github.com/dnohr\n\nmodule.exports = {\n    stopwords: [\n\t\t\"ad\",\n\t\t\"af\",\n\t\t\"aldrig\",\n\t\t\"alle\",\n\t\t\"alt\",\n\t\t\"altid\",\n\t\t\"anden\",\n\t\t\"andet\",\n\t\t\"andre\",\n\t\t\"at\",\n\t\t\"bagved\",\n\t\t\"begge\",\n\t\t\"blev\",\n\t\t\"blive\",\n\t\t\"bliver\",\n\t\t\"da\",\n\t\t\"de\",\n\t\t\"dem\",\n\t\t\"den\",\n\t\t\"denne\",\n\t\t\"der\",\n\t\t\"deres\",\n\t\t\"det\",\n\t\t\"dette\",\n\t\t\"dig\",\n\t\t\"din\",\n\t\t\"disse\",\n\t\t\"dog\",\n\t\t\"du\",\n\t\t\"efter\",\n\t\t\"ej\",\n\t\t\"eller\",\n\t\t\"en\",\n\t\t\"end\",\n\t\t\"endnu\",\n\t\t\"ene\",\n\t\t\"eneste\",\n\t\t\"enhver\",\n\t\t\"er\",\n\t\t\"et\",\n\t\t\"fem\",\n\t\t\"fire\",\n\t\t\"fjernt\",\n\t\t\"flere\",\n\t\t\"fleste\",\n\t\t\"for\",\n\t\t\"foran\",\n\t\t\"fordi\",\n\t\t\"forrige\",\n\t\t\"fra\",\n\t\t\"få\",\n\t\t\"før\",\n\t\t\"gennem\",\n\t\t\"god\",\n\t\t\"ham\",\n\t\t\"han\",\n\t\t\"hans\",\n\t\t\"har\",\n\t\t\"havde\",\n\t\t\"have\",\n\t\t\"hende\",\n\t\t\"hendes\",\n\t\t\"her\",\n\t\t\"hos\",\n\t\t\"hovfor\",\n\t\t\"hun\",\n\t\t\"hurtig\",\n\t\t\"hvad\",\n\t\t\"hvem\",\n\t\t\"hver\",\n\t\t\"hvilken\",\n\t\t\"hvis\",\n\t\t\"hvonår\",\n\t\t\"hvor\",\n\t\t\"hvordan\",\n\t\t\"hvorfor\",\n\t\t\"hvorhen\",\n\t\t\"hvornår\",\n\t\t\"i\",\n\t\t\"ikke\",\n\t\t\"imod\",\n\t\t\"ind\",\n\t\t\"ingen\",\n\t\t\"intet\",\n\t\t\"ja\",\n\t\t\"jeg\",\n\t\t\"jer\",\n\t\t\"jeres\",\n\t\t\"jo\",\n\t\t\"kan\",\n\t\t\"kom\",\n\t\t\"kommer\",\n\t\t\"kunne\",\n\t\t\"langsom\",\n\t\t\"lav\",\n\t\t\"lidt\",\n\t\t\"lille\",\n\t\t\"man\",\n\t\t\"mand\",\n\t\t\"mange\",\n\t\t\"med\",\n\t\t\"meget\",\n\t\t\"mellem\",\n\t\t\"men\",\n\t\t\"mens\",\n\t\t\"mere\",\n\t\t\"mig\",\n\t\t\"min\",\n\t\t\"mindre\",\n\t\t\"mine\",\n\t\t\"mit\",\n\t\t\"mod\",\n\t\t\"måske\",\n\t\t\"ned\",\n\t\t\"nede\",\n\t\t\"nej\",\n\t\t\"ni\",\n\t\t\"nogen\",\n\t\t\"noget\",\n\t\t\"nogle\",\n\t\t\"nok\",\n\t\t\"nu\",\n\t\t\"ny\",\n\t\t\"nyt\",\n\t\t\"når\",\n\t\t\"nær\",\n\t\t\"næste\",\n\t\t\"næsten\",\n\t\t\"og\",\n\t\t\"også\",\n\t\t\"om\",\n\t\t\"op\",\n\t\t\"oppe\",\n\t\t\"os\",\n\t\t\"otte\",\n\t\t\"over\",\n\t\t\"på\",\n\t\t\"rask\",\n\t\t\"sammen\",\n\t\t\"se\",\n\t\t\"seks\",\n\t\t\"selv\",\n\t\t\"ses\",\n\t\t\"sig\",\n\t\t\"sin\",\n\t\t\"sine\",\n\t\t\"sit\",\n\t\t\"skal\",\n\t\t\"skulle\",\n\t\t\"som\",\n\t\t\"stor\",\n\t\t\"store\",\n\t\t\"syv\",\n\t\t\"sådan\",\n\t\t\"temmelig\",\n\t\t\"thi\",\n\t\t\"ti\",\n\t\t\"til\",\n\t\t\"to\",\n\t\t\"tre\",\n\t\t\"ud\",\n\t\t\"uden\",\n\t\t\"udenfor\",\n\t\t\"under\",\n\t\t\"var\",\n\t\t\"ved\",\n\t\t\"vi\",\n\t\t\"vil\",\n\t\t\"ville\",\n\t\t\"vor\",\n\t\t\"være\",\n\t\t\"været\"\n    ]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/da.js\n// module id = 393\n// module chunks = 176202273623472","/**\n * Created by jan on 9-3-15.\n */\n// German stopwords\n// via https://code.google.com/p/stop-words/\nmodule.exports = {\n    stopwords: [\n        \"a\",\n        \"ab\",\n        \"aber\",\n        \"ach\",\n        \"acht\",\n        \"achte\",\n        \"achten\",\n        \"achter\",\n        \"achtes\",\n        \"ag\",\n        \"alle\",\n        \"allein\",\n        \"allem\",\n        \"allen\",\n        \"aller\",\n        \"allerdings\",\n        \"alles\",\n        \"allgemeinen\",\n        \"als\",\n        \"also\",\n        \"am\",\n        \"an\",\n        \"andere\",\n        \"anderen\",\n        \"andern\",\n        \"anders\",\n        \"au\",\n        \"auch\",\n        \"auf\",\n        \"aus\",\n        \"ausser\",\n        \"außer\",\n        \"ausserdem\",\n        \"außerdem\",\n        \"b\",\n        \"bald\",\n        \"bei\",\n        \"beide\",\n        \"beiden\",\n        \"beim\",\n        \"beispiel\",\n        \"bekannt\",\n        \"bereits\",\n        \"besonders\",\n        \"besser\",\n        \"besten\",\n        \"bin\",\n        \"bis\",\n        \"bisher\",\n        \"bist\",\n        \"c\",\n        \"d\",\n        \"da\",\n        \"dabei\",\n        \"dadurch\",\n        \"dafür\",\n        \"dagegen\",\n        \"daher\",\n        \"dahin\",\n        \"dahinter\",\n        \"damals\",\n        \"damit\",\n        \"danach\",\n        \"daneben\",\n        \"dank\",\n        \"dann\",\n        \"daran\",\n        \"darauf\",\n        \"daraus\",\n        \"darf\",\n        \"darfst\",\n        \"darin\",\n        \"darüber\",\n        \"darum\",\n        \"darunter\",\n        \"das\",\n        \"dasein\",\n        \"daselbst\",\n        \"dass\",\n        \"daß\",\n        \"dasselbe\",\n        \"davon\",\n        \"davor\",\n        \"dazu\",\n        \"dazwischen\",\n        \"dein\",\n        \"deine\",\n        \"deinem\",\n        \"deiner\",\n        \"dem\",\n        \"dementsprechend\",\n        \"demgegenüber\",\n        \"demgemäss\",\n        \"demgemäß\",\n        \"demselben\",\n        \"demzufolge\",\n        \"den\",\n        \"denen\",\n        \"denn\",\n        \"denselben\",\n        \"der\",\n        \"deren\",\n        \"derjenige\",\n        \"derjenigen\",\n        \"dermassen\",\n        \"dermaßen\",\n        \"derselbe\",\n        \"derselben\",\n        \"des\",\n        \"deshalb\",\n        \"desselben\",\n        \"dessen\",\n        \"deswegen\",\n        \"d.h\",\n        \"dich\",\n        \"die\",\n        \"diejenige\",\n        \"diejenigen\",\n        \"dies\",\n        \"diese\",\n        \"dieselbe\",\n        \"dieselben\",\n        \"diesem\",\n        \"diesen\",\n        \"dieser\",\n        \"dieses\",\n        \"dir\",\n        \"doch\",\n        \"dort\",\n        \"drei\",\n        \"drin\",\n        \"dritte\",\n        \"dritten\",\n        \"dritter\",\n        \"drittes\",\n        \"du\",\n        \"durch\",\n        \"durchaus\",\n        \"dürfen\",\n        \"dürft\",\n        \"durfte\",\n        \"durften\",\n        \"e\",\n        \"eben\",\n        \"ebenso\",\n        \"ehrlich\",\n        \"ei\",\n        \"ei,\",\n        \"eigen\",\n        \"eigene\",\n        \"eigenen\",\n        \"eigener\",\n        \"eigenes\",\n        \"ein\",\n        \"einander\",\n        \"eine\",\n        \"einem\",\n        \"einen\",\n        \"einer\",\n        \"eines\",\n        \"einige\",\n        \"einigen\",\n        \"einiger\",\n        \"einiges\",\n        \"einmal\",\n        \"eins\",\n        \"elf\",\n        \"en\",\n        \"ende\",\n        \"endlich\",\n        \"entweder\",\n        \"er\",\n        \"Ernst\",\n        \"erst\",\n        \"erste\",\n        \"ersten\",\n        \"erster\",\n        \"erstes\",\n        \"es\",\n        \"etwa\",\n        \"etwas\",\n        \"euch\",\n        \"f\",\n        \"früher\",\n        \"fünf\",\n        \"fünfte\",\n        \"fünften\",\n        \"fünfter\",\n        \"fünftes\",\n        \"für\",\n        \"g\",\n        \"gab\",\n        \"ganz\",\n        \"ganze\",\n        \"ganzen\",\n        \"ganzer\",\n        \"ganzes\",\n        \"gar\",\n        \"gedurft\",\n        \"gegen\",\n        \"gegenüber\",\n        \"gehabt\",\n        \"gehen\",\n        \"geht\",\n        \"gekannt\",\n        \"gekonnt\",\n        \"gemacht\",\n        \"gemocht\",\n        \"gemusst\",\n        \"genug\",\n        \"gerade\",\n        \"gern\",\n        \"gesagt\",\n        \"geschweige\",\n        \"gewesen\",\n        \"gewollt\",\n        \"geworden\",\n        \"gibt\",\n        \"ging\",\n        \"gleich\",\n        \"gott\",\n        \"gross\",\n        \"groß\",\n        \"grosse\",\n        \"große\",\n        \"grossen\",\n        \"großen\",\n        \"grosser\",\n        \"großer\",\n        \"grosses\",\n        \"großes\",\n        \"gut\",\n        \"gute\",\n        \"guter\",\n        \"gutes\",\n        \"h\",\n        \"habe\",\n        \"haben\",\n        \"habt\",\n        \"hast\",\n        \"hat\",\n        \"hatte\",\n        \"hätte\",\n        \"hatten\",\n        \"hätten\",\n        \"heisst\",\n        \"her\",\n        \"heute\",\n        \"hier\",\n        \"hin\",\n        \"hinter\",\n        \"hoch\",\n        \"i\",\n        \"ich\",\n        \"ihm\",\n        \"ihn\",\n        \"ihnen\",\n        \"ihr\",\n        \"ihre\",\n        \"ihrem\",\n        \"ihren\",\n        \"ihrer\",\n        \"ihres\",\n        \"im\",\n        \"immer\",\n        \"in\",\n        \"indem\",\n        \"infolgedessen\",\n        \"ins\",\n        \"irgend\",\n        \"ist\",\n        \"j\",\n        \"ja\",\n        \"jahr\",\n        \"jahre\",\n        \"jahren\",\n        \"je\",\n        \"jede\",\n        \"jedem\",\n        \"jeden\",\n        \"jeder\",\n        \"jedermann\",\n        \"jedermanns\",\n        \"jedoch\",\n        \"jemand\",\n        \"jemandem\",\n        \"jemanden\",\n        \"jene\",\n        \"jenem\",\n        \"jenen\",\n        \"jener\",\n        \"jenes\",\n        \"jetzt\",\n        \"k\",\n        \"kam\",\n        \"kann\",\n        \"kannst\",\n        \"kaum\",\n        \"kein\",\n        \"keine\",\n        \"keinem\",\n        \"keinen\",\n        \"keiner\",\n        \"kleine\",\n        \"kleinen\",\n        \"kleiner\",\n        \"kleines\",\n        \"kommen\",\n        \"kommt\",\n        \"können\",\n        \"könnt\",\n        \"konnte\",\n        \"könnte\",\n        \"konnten\",\n        \"kurz\",\n        \"l\",\n        \"lang\",\n        \"lange\",\n        \"leicht\",\n        \"leide\",\n        \"lieber\",\n        \"los\",\n        \"m\",\n        \"machen\",\n        \"macht\",\n        \"machte\",\n        \"mag\",\n        \"magst\",\n        \"mahn\",\n        \"man\",\n        \"manche\",\n        \"manchem\",\n        \"manchen\",\n        \"mancher\",\n        \"manches\",\n        \"mann\",\n        \"mehr\",\n        \"mein\",\n        \"meine\",\n        \"meinem\",\n        \"meinen\",\n        \"meiner\",\n        \"meines\",\n        \"mensch\",\n        \"menschen\",\n        \"mich\",\n        \"mir\",\n        \"mit\",\n        \"mittel\",\n        \"mochte\",\n        \"möchte\",\n        \"mochten\",\n        \"mögen\",\n        \"möglich\",\n        \"mögt\",\n        \"morgen\",\n        \"muss\",\n        \"muß\",\n        \"müssen\",\n        \"musst\",\n        \"müsst\",\n        \"musste\",\n        \"mussten\",\n        \"n\",\n        \"na\",\n        \"nach\",\n        \"nachdem\",\n        \"nahm\",\n        \"natürlich\",\n        \"neben\",\n        \"nein\",\n        \"neue\",\n        \"neuen\",\n        \"neun\",\n        \"neunte\",\n        \"neunten\",\n        \"neunter\",\n        \"neuntes\",\n        \"nicht\",\n        \"nichts\",\n        \"nie\",\n        \"niemand\",\n        \"niemandem\",\n        \"niemanden\",\n        \"noch\",\n        \"nun\",\n        \"nur\",\n        \"o\",\n        \"ob\",\n        \"oben\",\n        \"oder\",\n        \"offen\",\n        \"oft\",\n        \"ohne\",\n        \"Ordnung\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"recht\",\n        \"rechte\",\n        \"rechten\",\n        \"rechter\",\n        \"rechtes\",\n        \"richtig\",\n        \"rund\",\n        \"s\",\n        \"sa\",\n        \"sache\",\n        \"sagt\",\n        \"sagte\",\n        \"sah\",\n        \"satt\",\n        \"schlecht\",\n        \"Schluss\",\n        \"schon\",\n        \"sechs\",\n        \"sechste\",\n        \"sechsten\",\n        \"sechster\",\n        \"sechstes\",\n        \"sehr\",\n        \"sei\",\n        \"seid\",\n        \"seien\",\n        \"sein\",\n        \"seine\",\n        \"seinem\",\n        \"seinen\",\n        \"seiner\",\n        \"seines\",\n        \"seit\",\n        \"seitdem\",\n        \"selbst\",\n        \"sich\",\n        \"sie\",\n        \"sieben\",\n        \"siebente\",\n        \"siebenten\",\n        \"siebenter\",\n        \"siebentes\",\n        \"sind\",\n        \"so\",\n        \"solang\",\n        \"solche\",\n        \"solchem\",\n        \"solchen\",\n        \"solcher\",\n        \"solches\",\n        \"soll\",\n        \"sollen\",\n        \"sollte\",\n        \"sollten\",\n        \"sondern\",\n        \"sonst\",\n        \"sowie\",\n        \"später\",\n        \"statt\",\n        \"t\",\n        \"tag\",\n        \"tage\",\n        \"tagen\",\n        \"tat\",\n        \"teil\",\n        \"tel\",\n        \"tritt\",\n        \"trotzdem\",\n        \"tun\",\n        \"u\",\n        \"über\",\n        \"überhaupt\",\n        \"übrigens\",\n        \"uhr\",\n        \"um\",\n        \"und\",\n        \"und?\",\n        \"uns\",\n        \"unser\",\n        \"unsere\",\n        \"unserer\",\n        \"unter\",\n        \"v\",\n        \"vergangenen\",\n        \"viel\",\n        \"viele\",\n        \"vielem\",\n        \"vielen\",\n        \"vielleicht\",\n        \"vier\",\n        \"vierte\",\n        \"vierten\",\n        \"vierter\",\n        \"viertes\",\n        \"vom\",\n        \"von\",\n        \"vor\",\n        \"w\",\n        \"wahr?\",\n        \"während\",\n        \"währenddem\",\n        \"währenddessen\",\n        \"wann\",\n        \"war\",\n        \"wäre\",\n        \"waren\",\n        \"wart\",\n        \"warum\",\n        \"was\",\n        \"wegen\",\n        \"weil\",\n        \"weit\",\n        \"weiter\",\n        \"weitere\",\n        \"weiteren\",\n        \"weiteres\",\n        \"welche\",\n        \"welchem\",\n        \"welchen\",\n        \"welcher\",\n        \"welches\",\n        \"wem\",\n        \"wen\",\n        \"wenig\",\n        \"wenige\",\n        \"weniger\",\n        \"weniges\",\n        \"wenigstens\",\n        \"wenn\",\n        \"wer\",\n        \"werde\",\n        \"werden\",\n        \"werdet\",\n        \"wessen\",\n        \"wie\",\n        \"wieder\",\n        \"will\",\n        \"willst\",\n        \"wir\",\n        \"wird\",\n        \"wirklich\",\n        \"wirst\",\n        \"wo\",\n        \"wohl\",\n        \"wollen\",\n        \"wollt\",\n        \"wollte\",\n        \"wollten\",\n        \"worden\",\n        \"wurde\",\n        \"würde\",\n        \"wurden\",\n        \"würden\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"z.b\",\n        \"zehn\",\n        \"zehnte\",\n        \"zehnten\",\n        \"zehnter\",\n        \"zehntes\",\n        \"zeit\",\n        \"zu\",\n        \"zuerst\",\n        \"zugleich\",\n        \"zum\",\n        \"zunächst\",\n        \"zur\",\n        \"zurück\",\n        \"zusammen\",\n        \"zwanzig\",\n        \"zwar\",\n        \"zwei\",\n        \"zweite\",\n        \"zweiten\",\n        \"zweiter\",\n        \"zweites\",\n        \"zwischen\",\n        \"zwölf\",\n        \"﻿aber\",\n        \"euer\",\n        \"eure\",\n        \"hattest\",\n        \"hattet\",\n        \"jedes\",\n        \"mußt\",\n        \"müßt\",\n        \"sollst\",\n        \"sollt\",\n        \"soweit\",\n        \"weshalb\",\n        \"wieso\",\n        \"woher\",\n        \"wohin\"\n    ]\n\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/de.js\n// module id = 394\n// module chunks = 176202273623472","// via http://jmlr.org/papers/volume5/lewis04a/a11-smart-stop-list/english.stop\nmodule.exports = {\n    stopwords:[\n        \"a\",\n        \"a's\",\n        \"able\",\n        \"about\",\n        \"above\",\n        \"according\",\n        \"accordingly\",\n        \"across\",\n        \"actually\",\n        \"after\",\n        \"afterwards\",\n        \"again\",\n        \"against\",\n        \"ain't\",\n        \"all\",\n        \"allow\",\n        \"allows\",\n        \"almost\",\n        \"alone\",\n        \"along\",\n        \"already\",\n        \"also\",\n        \"although\",\n        \"always\",\n        \"am\",\n        \"among\",\n        \"amongst\",\n        \"an\",\n        \"and\",\n        \"another\",\n        \"any\",\n        \"anybody\",\n        \"anyhow\",\n        \"anyone\",\n        \"anything\",\n        \"anyway\",\n        \"anyways\",\n        \"anywhere\",\n        \"apart\",\n        \"appear\",\n        \"appreciate\",\n        \"appropriate\",\n        \"are\",\n        \"aren't\",\n        \"around\",\n        \"as\",\n        \"aside\",\n        \"ask\",\n        \"asking\",\n        \"associated\",\n        \"at\",\n        \"available\",\n        \"away\",\n        \"awfully\",\n        \"b\",\n        \"be\",\n        \"became\",\n        \"because\",\n        \"become\",\n        \"becomes\",\n        \"becoming\",\n        \"been\",\n        \"before\",\n        \"beforehand\",\n        \"behind\",\n        \"being\",\n        \"believe\",\n        \"below\",\n        \"beside\",\n        \"besides\",\n        \"best\",\n        \"better\",\n        \"between\",\n        \"beyond\",\n        \"both\",\n        \"brief\",\n        \"but\",\n        \"by\",\n        \"c\",\n        \"c'mon\",\n        \"c's\",\n        \"came\",\n        \"can\",\n        \"can't\",\n        \"cannot\",\n        \"cant\",\n        \"cause\",\n        \"causes\",\n        \"certain\",\n        \"certainly\",\n        \"changes\",\n        \"clearly\",\n        \"co\",\n        \"com\",\n        \"come\",\n        \"comes\",\n        \"concerning\",\n        \"consequently\",\n        \"consider\",\n        \"considering\",\n        \"contain\",\n        \"containing\",\n        \"contains\",\n        \"corresponding\",\n        \"could\",\n        \"couldn't\",\n        \"course\",\n        \"currently\",\n        \"d\",\n        \"definitely\",\n        \"described\",\n        \"despite\",\n        \"did\",\n        \"didn't\",\n        \"different\",\n        \"do\",\n        \"does\",\n        \"doesn't\",\n        \"doing\",\n        \"don't\",\n        \"done\",\n        \"down\",\n        \"downwards\",\n        \"during\",\n        \"e\",\n        \"each\",\n        \"edu\",\n        \"eg\",\n        \"eight\",\n        \"either\",\n        \"else\",\n        \"elsewhere\",\n        \"enough\",\n        \"entirely\",\n        \"especially\",\n        \"et\",\n        \"etc\",\n        \"even\",\n        \"ever\",\n        \"every\",\n        \"everybody\",\n        \"everyone\",\n        \"everything\",\n        \"everywhere\",\n        \"ex\",\n        \"exactly\",\n        \"example\",\n        \"except\",\n        \"f\",\n        \"far\",\n        \"few\",\n        \"fifth\",\n        \"first\",\n        \"five\",\n        \"followed\",\n        \"following\",\n        \"follows\",\n        \"for\",\n        \"former\",\n        \"formerly\",\n        \"forth\",\n        \"four\",\n        \"from\",\n        \"further\",\n        \"furthermore\",\n        \"g\",\n        \"get\",\n        \"gets\",\n        \"getting\",\n        \"given\",\n        \"gives\",\n        \"go\",\n        \"goes\",\n        \"going\",\n        \"gone\",\n        \"got\",\n        \"gotten\",\n        \"greetings\",\n        \"h\",\n        \"had\",\n        \"hadn't\",\n        \"happens\",\n        \"hardly\",\n        \"has\",\n        \"hasn't\",\n        \"have\",\n        \"haven't\",\n        \"having\",\n        \"he\",\n        \"he's\",\n        \"hello\",\n        \"help\",\n        \"hence\",\n        \"her\",\n        \"here\",\n        \"here's\",\n        \"hereafter\",\n        \"hereby\",\n        \"herein\",\n        \"hereupon\",\n        \"hers\",\n        \"herself\",\n        \"hi\",\n        \"him\",\n        \"himself\",\n        \"his\",\n        \"hither\",\n        \"hopefully\",\n        \"how\",\n        \"howbeit\",\n        \"however\",\n        \"i\",\n        \"i'd\",\n        \"i'll\",\n        \"i'm\",\n        \"i've\",\n        \"ie\",\n        \"if\",\n        \"ignored\",\n        \"immediate\",\n        \"in\",\n        \"inasmuch\",\n        \"inc\",\n        \"indeed\",\n        \"indicate\",\n        \"indicated\",\n        \"indicates\",\n        \"inner\",\n        \"insofar\",\n        \"instead\",\n        \"into\",\n        \"inward\",\n        \"is\",\n        \"isn't\",\n        \"it\",\n        \"it'd\",\n        \"it'll\",\n        \"it's\",\n        \"its\",\n        \"itself\",\n        \"j\",\n        \"just\",\n        \"k\",\n        \"keep\",\n        \"keeps\",\n        \"kept\",\n        \"know\",\n        \"knows\",\n        \"known\",\n        \"l\",\n        \"last\",\n        \"lately\",\n        \"later\",\n        \"latter\",\n        \"latterly\",\n        \"least\",\n        \"less\",\n        \"lest\",\n        \"let\",\n        \"let's\",\n        \"like\",\n        \"liked\",\n        \"likely\",\n        \"little\",\n        \"look\",\n        \"looking\",\n        \"looks\",\n        \"ltd\",\n        \"m\",\n        \"mainly\",\n        \"many\",\n        \"may\",\n        \"maybe\",\n        \"me\",\n        \"mean\",\n        \"meanwhile\",\n        \"merely\",\n        \"might\",\n        \"more\",\n        \"moreover\",\n        \"most\",\n        \"mostly\",\n        \"much\",\n        \"must\",\n        \"my\",\n        \"myself\",\n        \"n\",\n        \"name\",\n        \"namely\",\n        \"nd\",\n        \"near\",\n        \"nearly\",\n        \"necessary\",\n        \"need\",\n        \"needs\",\n        \"neither\",\n        \"never\",\n        \"nevertheless\",\n        \"new\",\n        \"next\",\n        \"nine\",\n        \"no\",\n        \"nobody\",\n        \"non\",\n        \"none\",\n        \"noone\",\n        \"nor\",\n        \"normally\",\n        \"not\",\n        \"nothing\",\n        \"novel\",\n        \"now\",\n        \"nowhere\",\n        \"o\",\n        \"obviously\",\n        \"of\",\n        \"off\",\n        \"often\",\n        \"oh\",\n        \"ok\",\n        \"okay\",\n        \"old\",\n        \"on\",\n        \"once\",\n        \"one\",\n        \"ones\",\n        \"only\",\n        \"onto\",\n        \"or\",\n        \"other\",\n        \"others\",\n        \"otherwise\",\n        \"ought\",\n        \"our\",\n        \"ours\",\n        \"ourselves\",\n        \"out\",\n        \"outside\",\n        \"over\",\n        \"overall\",\n        \"own\",\n        \"p\",\n        \"particular\",\n        \"particularly\",\n        \"per\",\n        \"perhaps\",\n        \"placed\",\n        \"please\",\n        \"plus\",\n        \"possible\",\n        \"presumably\",\n        \"probably\",\n        \"provides\",\n        \"q\",\n        \"que\",\n        \"quite\",\n        \"qv\",\n        \"r\",\n        \"rather\",\n        \"rd\",\n        \"re\",\n        \"really\",\n        \"reasonably\",\n        \"regarding\",\n        \"regardless\",\n        \"regards\",\n        \"relatively\",\n        \"respectively\",\n        \"right\",\n        \"s\",\n        \"said\",\n        \"same\",\n        \"saw\",\n        \"say\",\n        \"saying\",\n        \"says\",\n        \"second\",\n        \"secondly\",\n        \"see\",\n        \"seeing\",\n        \"seem\",\n        \"seemed\",\n        \"seeming\",\n        \"seems\",\n        \"seen\",\n        \"self\",\n        \"selves\",\n        \"sensible\",\n        \"sent\",\n        \"serious\",\n        \"seriously\",\n        \"seven\",\n        \"several\",\n        \"shall\",\n        \"she\",\n        \"should\",\n        \"shouldn't\",\n        \"since\",\n        \"six\",\n        \"so\",\n        \"some\",\n        \"somebody\",\n        \"somehow\",\n        \"someone\",\n        \"something\",\n        \"sometime\",\n        \"sometimes\",\n        \"somewhat\",\n        \"somewhere\",\n        \"soon\",\n        \"sorry\",\n        \"specified\",\n        \"specify\",\n        \"specifying\",\n        \"still\",\n        \"sub\",\n        \"such\",\n        \"sup\",\n        \"sure\",\n        \"t\",\n        \"t's\",\n        \"take\",\n        \"taken\",\n        \"tell\",\n        \"tends\",\n        \"th\",\n        \"than\",\n        \"thank\",\n        \"thanks\",\n        \"thanx\",\n        \"that\",\n        \"that's\",\n        \"thats\",\n        \"the\",\n        \"their\",\n        \"theirs\",\n        \"them\",\n        \"themselves\",\n        \"then\",\n        \"thence\",\n        \"there\",\n        \"there's\",\n        \"thereafter\",\n        \"thereby\",\n        \"therefore\",\n        \"therein\",\n        \"theres\",\n        \"thereupon\",\n        \"these\",\n        \"they\",\n        \"they'd\",\n        \"they'll\",\n        \"they're\",\n        \"they've\",\n        \"think\",\n        \"third\",\n        \"this\",\n        \"thorough\",\n        \"thoroughly\",\n        \"those\",\n        \"though\",\n        \"three\",\n        \"through\",\n        \"throughout\",\n        \"thru\",\n        \"thus\",\n        \"to\",\n        \"together\",\n        \"too\",\n        \"took\",\n        \"toward\",\n        \"towards\",\n        \"tried\",\n        \"tries\",\n        \"truly\",\n        \"try\",\n        \"trying\",\n        \"twice\",\n        \"two\",\n        \"u\",\n        \"un\",\n        \"under\",\n        \"unfortunately\",\n        \"unless\",\n        \"unlikely\",\n        \"until\",\n        \"unto\",\n        \"up\",\n        \"upon\",\n        \"us\",\n        \"use\",\n        \"used\",\n        \"useful\",\n        \"uses\",\n        \"using\",\n        \"usually\",\n        \"uucp\",\n        \"v\",\n        \"value\",\n        \"various\",\n        \"very\",\n        \"via\",\n        \"viz\",\n        \"vs\",\n        \"w\",\n        \"want\",\n        \"wants\",\n        \"was\",\n        \"wasn't\",\n        \"way\",\n        \"we\",\n        \"we'd\",\n        \"we'll\",\n        \"we're\",\n        \"we've\",\n        \"welcome\",\n        \"well\",\n        \"went\",\n        \"were\",\n        \"weren't\",\n        \"what\",\n        \"what's\",\n        \"whatever\",\n        \"when\",\n        \"whence\",\n        \"whenever\",\n        \"where\",\n        \"where's\",\n        \"whereafter\",\n        \"whereas\",\n        \"whereby\",\n        \"wherein\",\n        \"whereupon\",\n        \"wherever\",\n        \"whether\",\n        \"which\",\n        \"while\",\n        \"whither\",\n        \"who\",\n        \"who's\",\n        \"whoever\",\n        \"whole\",\n        \"whom\",\n        \"whose\",\n        \"why\",\n        \"will\",\n        \"willing\",\n        \"wish\",\n        \"with\",\n        \"within\",\n        \"without\",\n        \"won't\",\n        \"wonder\",\n        \"would\",\n        \"would\",\n        \"wouldn't\",\n        \"x\",\n        \"y\",\n        \"yes\",\n        \"yet\",\n        \"you\",\n        \"you'd\",\n        \"you'll\",\n        \"you're\",\n        \"you've\",\n        \"your\",\n        \"yours\",\n        \"yourself\",\n        \"yourselves\",\n        \"z\",\n        \"zero\"\n    ]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/en.js\n// module id = 395\n// module chunks = 176202273623472","//  via https://stop-words.googlecode.com/svn/trunk/stop-words/stop-words/stop-words-spanish.txt\nmodule.exports = {\n    stopwords: [\n        '0',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '_',\n        'a',\n        'actualmente',\n        'acuerdo',\n        'adelante',\n        'ademas',\n        'además',\n        'adrede',\n        'afirmó',\n        'agregó',\n        'ahi',\n        'ahora',\n        'ahí',\n        'al',\n        'algo',\n        'alguna',\n        'algunas',\n        'alguno',\n        'algunos',\n        'algún',\n        'alli',\n        'allí',\n        'alrededor',\n        'ambos',\n        'ampleamos',\n        'antano',\n        'antaño',\n        'ante',\n        'anterior',\n        'antes',\n        'apenas',\n        'aproximadamente',\n        'aquel',\n        'aquella',\n        'aquellas',\n        'aquello',\n        'aquellos',\n        'aqui',\n        'aquél',\n        'aquélla',\n        'aquéllas',\n        'aquéllos',\n        'aquí',\n        'arriba',\n        'arribaabajo',\n        'aseguró',\n        'asi',\n        'así',\n        'atras',\n        'aun',\n        'aunque',\n        'ayer',\n        'añadió',\n        'aún',\n        'b',\n        'bajo',\n        'bastante',\n        'bien',\n        'breve',\n        'buen',\n        'buena',\n        'buenas',\n        'bueno',\n        'buenos',\n        'c',\n        'cada',\n        'casi',\n        'cerca',\n        'cierta',\n        'ciertas',\n        'cierto',\n        'ciertos',\n        'cinco',\n        'claro',\n        'comentó',\n        'como',\n        'con',\n        'conmigo',\n        'conocer',\n        'conseguimos',\n        'conseguir',\n        'considera',\n        'consideró',\n        'consigo',\n        'consigue',\n        'consiguen',\n        'consigues',\n        'contigo',\n        'contra',\n        'cosas',\n        'creo',\n        'cual',\n        'cuales',\n        'cualquier',\n        'cuando',\n        'cuanta',\n        'cuantas',\n        'cuanto',\n        'cuantos',\n        'cuatro',\n        'cuenta',\n        'cuál',\n        'cuáles',\n        'cuándo',\n        'cuánta',\n        'cuántas',\n        'cuánto',\n        'cuántos',\n        'cómo',\n        'd',\n        'da',\n        'dado',\n        'dan',\n        'dar',\n        'de',\n        'debajo',\n        'debe',\n        'deben',\n        'debido',\n        'decir',\n        'dejó',\n        'del',\n        'delante',\n        'demasiado',\n        'demás',\n        'dentro',\n        'deprisa',\n        'desde',\n        'despacio',\n        'despues',\n        'después',\n        'detras',\n        'detrás',\n        'dia',\n        'dias',\n        'dice',\n        'dicen',\n        'dicho',\n        'dieron',\n        'diferente',\n        'diferentes',\n        'dijeron',\n        'dijo',\n        'dio',\n        'donde',\n        'dos',\n        'durante',\n        'día',\n        'días',\n        'dónde',\n        'e',\n        'ejemplo',\n        'el',\n        'ella',\n        'ellas',\n        'ello',\n        'ellos',\n        'embargo',\n        'empleais',\n        'emplean',\n        'emplear',\n        'empleas',\n        'empleo',\n        'en',\n        'encima',\n        'encuentra',\n        'enfrente',\n        'enseguida',\n        'entonces',\n        'entre',\n        'era',\n        'erais',\n        'eramos',\n        'eran',\n        'eras',\n        'eres',\n        'es',\n        'esa',\n        'esas',\n        'ese',\n        'eso',\n        'esos',\n        'esta',\n        'estaba',\n        'estabais',\n        'estaban',\n        'estabas',\n        'estad',\n        'estada',\n        'estadas',\n        'estado',\n        'estados',\n        'estais',\n        'estamos',\n        'estan',\n        'estando',\n        'estar',\n        'estaremos',\n        'estará',\n        'estarán',\n        'estarás',\n        'estaré',\n        'estaréis',\n        'estaría',\n        'estaríais',\n        'estaríamos',\n        'estarían',\n        'estarías',\n        'estas',\n        'este',\n        'estemos',\n        'esto',\n        'estos',\n        'estoy',\n        'estuve',\n        'estuviera',\n        'estuvierais',\n        'estuvieran',\n        'estuvieras',\n        'estuvieron',\n        'estuviese',\n        'estuvieseis',\n        'estuviesen',\n        'estuvieses',\n        'estuvimos',\n        'estuviste',\n        'estuvisteis',\n        'estuviéramos',\n        'estuviésemos',\n        'estuvo',\n        'está',\n        'estábamos',\n        'estáis',\n        'están',\n        'estás',\n        'esté',\n        'estéis',\n        'estén',\n        'estés',\n        'ex',\n        'excepto',\n        'existe',\n        'existen',\n        'explicó',\n        'expresó',\n        'f',\n        'fin',\n        'final',\n        'fue',\n        'fuera',\n        'fuerais',\n        'fueran',\n        'fueras',\n        'fueron',\n        'fuese',\n        'fueseis',\n        'fuesen',\n        'fueses',\n        'fui',\n        'fuimos',\n        'fuiste',\n        'fuisteis',\n        'fuéramos',\n        'fuésemos',\n        'g',\n        'general',\n        'gran',\n        'grandes',\n        'gueno',\n        'h',\n        'ha',\n        'haber',\n        'habia',\n        'habida',\n        'habidas',\n        'habido',\n        'habidos',\n        'habiendo',\n        'habla',\n        'hablan',\n        'habremos',\n        'habrá',\n        'habrán',\n        'habrás',\n        'habré',\n        'habréis',\n        'habría',\n        'habríais',\n        'habríamos',\n        'habrían',\n        'habrías',\n        'habéis',\n        'había',\n        'habíais',\n        'habíamos',\n        'habían',\n        'habías',\n        'hace',\n        'haceis',\n        'hacemos',\n        'hacen',\n        'hacer',\n        'hacerlo',\n        'haces',\n        'hacia',\n        'haciendo',\n        'hago',\n        'han',\n        'has',\n        'hasta',\n        'hay',\n        'haya',\n        'hayamos',\n        'hayan',\n        'hayas',\n        'hayáis',\n        'he',\n        'hecho',\n        'hemos',\n        'hicieron',\n        'hizo',\n        'horas',\n        'hoy',\n        'hube',\n        'hubiera',\n        'hubierais',\n        'hubieran',\n        'hubieras',\n        'hubieron',\n        'hubiese',\n        'hubieseis',\n        'hubiesen',\n        'hubieses',\n        'hubimos',\n        'hubiste',\n        'hubisteis',\n        'hubiéramos',\n        'hubiésemos',\n        'hubo',\n        'i',\n        'igual',\n        'incluso',\n        'indicó',\n        'informo',\n        'informó',\n        'intenta',\n        'intentais',\n        'intentamos',\n        'intentan',\n        'intentar',\n        'intentas',\n        'intento',\n        'ir',\n        'j',\n        'junto',\n        'k',\n        'l',\n        'la',\n        'lado',\n        'largo',\n        'las',\n        'le',\n        'lejos',\n        'les',\n        'llegó',\n        'lleva',\n        'llevar',\n        'lo',\n        'los',\n        'luego',\n        'lugar',\n        'm',\n        'mal',\n        'manera',\n        'manifestó',\n        'mas',\n        'mayor',\n        'me',\n        'mediante',\n        'medio',\n        'mejor',\n        'mencionó',\n        'menos',\n        'menudo',\n        'mi',\n        'mia',\n        'mias',\n        'mientras',\n        'mio',\n        'mios',\n        'mis',\n        'misma',\n        'mismas',\n        'mismo',\n        'mismos',\n        'modo',\n        'momento',\n        'mucha',\n        'muchas',\n        'mucho',\n        'muchos',\n        'muy',\n        'más',\n        'mí',\n        'mía',\n        'mías',\n        'mío',\n        'míos',\n        'n',\n        'nada',\n        'nadie',\n        'ni',\n        'ninguna',\n        'ningunas',\n        'ninguno',\n        'ningunos',\n        'ningún',\n        'no',\n        'nos',\n        'nosotras',\n        'nosotros',\n        'nuestra',\n        'nuestras',\n        'nuestro',\n        'nuestros',\n        'nueva',\n        'nuevas',\n        'nuevo',\n        'nuevos',\n        'nunca',\n        'o',\n        'ocho',\n        'os',\n        'otra',\n        'otras',\n        'otro',\n        'otros',\n        'p',\n        'pais',\n        'para',\n        'parece',\n        'parte',\n        'partir',\n        'pasada',\n        'pasado',\n        'paìs',\n        'peor',\n        'pero',\n        'pesar',\n        'poca',\n        'pocas',\n        'poco',\n        'pocos',\n        'podeis',\n        'podemos',\n        'poder',\n        'podria',\n        'podriais',\n        'podriamos',\n        'podrian',\n        'podrias',\n        'podrá',\n        'podrán',\n        'podría',\n        'podrían',\n        'poner',\n        'por',\n        'por qué',\n        'porque',\n        'posible',\n        'primer',\n        'primera',\n        'primero',\n        'primeros',\n        'principalmente',\n        'pronto',\n        'propia',\n        'propias',\n        'propio',\n        'propios',\n        'proximo',\n        'próximo',\n        'próximos',\n        'pudo',\n        'pueda',\n        'puede',\n        'pueden',\n        'puedo',\n        'pues',\n        'q',\n        'qeu',\n        'que',\n        'quedó',\n        'queremos',\n        'quien',\n        'quienes',\n        'quiere',\n        'quiza',\n        'quizas',\n        'quizá',\n        'quizás',\n        'quién',\n        'quiénes',\n        'qué',\n        'r',\n        'raras',\n        'realizado',\n        'realizar',\n        'realizó',\n        'repente',\n        'respecto',\n        's',\n        'sabe',\n        'sabeis',\n        'sabemos',\n        'saben',\n        'saber',\n        'sabes',\n        'sal',\n        'salvo',\n        'se',\n        'sea',\n        'seamos',\n        'sean',\n        'seas',\n        'segun',\n        'segunda',\n        'segundo',\n        'según',\n        'seis',\n        'ser',\n        'sera',\n        'seremos',\n        'será',\n        'serán',\n        'serás',\n        'seré',\n        'seréis',\n        'sería',\n        'seríais',\n        'seríamos',\n        'serían',\n        'serías',\n        'seáis',\n        'señaló',\n        'si',\n        'sido',\n        'siempre',\n        'siendo',\n        'siete',\n        'sigue',\n        'siguiente',\n        'sin',\n        'sino',\n        'sobre',\n        'sois',\n        'sola',\n        'solamente',\n        'solas',\n        'solo',\n        'solos',\n        'somos',\n        'son',\n        'soy',\n        'soyos',\n        'su',\n        'supuesto',\n        'sus',\n        'suya',\n        'suyas',\n        'suyo',\n        'suyos',\n        'sé',\n        'sí',\n        'sólo',\n        't',\n        'tal',\n        'tambien',\n        'también',\n        'tampoco',\n        'tan',\n        'tanto',\n        'tarde',\n        'te',\n        'temprano',\n        'tendremos',\n        'tendrá',\n        'tendrán',\n        'tendrás',\n        'tendré',\n        'tendréis',\n        'tendría',\n        'tendríais',\n        'tendríamos',\n        'tendrían',\n        'tendrías',\n        'tened',\n        'teneis',\n        'tenemos',\n        'tener',\n        'tenga',\n        'tengamos',\n        'tengan',\n        'tengas',\n        'tengo',\n        'tengáis',\n        'tenida',\n        'tenidas',\n        'tenido',\n        'tenidos',\n        'teniendo',\n        'tenéis',\n        'tenía',\n        'teníais',\n        'teníamos',\n        'tenían',\n        'tenías',\n        'tercera',\n        'ti',\n        'tiempo',\n        'tiene',\n        'tienen',\n        'tienes',\n        'toda',\n        'todas',\n        'todavia',\n        'todavía',\n        'todo',\n        'todos',\n        'total',\n        'trabaja',\n        'trabajais',\n        'trabajamos',\n        'trabajan',\n        'trabajar',\n        'trabajas',\n        'trabajo',\n        'tras',\n        'trata',\n        'través',\n        'tres',\n        'tu',\n        'tus',\n        'tuve',\n        'tuviera',\n        'tuvierais',\n        'tuvieran',\n        'tuvieras',\n        'tuvieron',\n        'tuviese',\n        'tuvieseis',\n        'tuviesen',\n        'tuvieses',\n        'tuvimos',\n        'tuviste',\n        'tuvisteis',\n        'tuviéramos',\n        'tuviésemos',\n        'tuvo',\n        'tuya',\n        'tuyas',\n        'tuyo',\n        'tuyos',\n        'tú',\n        'u',\n        'ultimo',\n        'un',\n        'una',\n        'unas',\n        'uno',\n        'unos',\n        'usa',\n        'usais',\n        'usamos',\n        'usan',\n        'usar',\n        'usas',\n        'uso',\n        'usted',\n        'ustedes',\n        'v',\n        'va',\n        'vais',\n        'valor',\n        'vamos',\n        'van',\n        'varias',\n        'varios',\n        'vaya',\n        'veces',\n        'ver',\n        'verdad',\n        'verdadera',\n        'verdadero',\n        'vez',\n        'vosotras',\n        'vosotros',\n        'voy',\n        'vuestra',\n        'vuestras',\n        'vuestro',\n        'vuestros',\n        'w',\n        'x',\n        'y',\n        'ya',\n        'yo',\n        'z',\n        'él',\n        'éramos',\n        'ésa',\n        'ésas',\n        'ése',\n        'ésos',\n        'ésta',\n        'éstas',\n        'éste',\n        'éstos',\n        'última',\n        'últimas',\n        'último',\n        'últimos'\n    ]\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/es.js\n// module id = 396\n// module chunks = 176202273623472","/**\n * Created by jan on 9-3-15.\n */\n// French stopwords\n// via https://code.google.com/p/stop-words/\n\nmodule.exports = {\n    stopwords: [\n        \"a\",\n        \"à\",\n        \"â\",\n        \"abord\",\n        \"afin\",\n        \"ah\",\n        \"ai\",\n        \"aie\",\n        \"ainsi\",\n        \"allaient\",\n        \"allo\",\n        \"allô\",\n        \"allons\",\n        \"après\",\n        \"assez\",\n        \"attendu\",\n        \"au\",\n        \"aucun\",\n        \"aucune\",\n        \"aujourd\",\n        \"aujourd'hui\",\n        \"auquel\",\n        \"aura\",\n        \"auront\",\n        \"aussi\",\n        \"autre\",\n        \"autres\",\n        \"aux\",\n        \"auxquelles\",\n        \"auxquels\",\n        \"avaient\",\n        \"avais\",\n        \"avait\",\n        \"avant\",\n        \"avec\",\n        \"avoir\",\n        \"ayant\",\n        \"b\",\n        \"bah\",\n        \"beaucoup\",\n        \"bien\",\n        \"bigre\",\n        \"boum\",\n        \"bravo\",\n        \"brrr\",\n        \"c\",\n        \"ça\",\n        \"car\",\n        \"ce\",\n        \"ceci\",\n        \"cela\",\n        \"celle\",\n        \"celle-ci\",\n        \"celle-là\",\n        \"celles\",\n        \"celles-ci\",\n        \"celles-là\",\n        \"celui\",\n        \"celui-ci\",\n        \"celui-là\",\n        \"cent\",\n        \"cependant\",\n        \"certain\",\n        \"certaine\",\n        \"certaines\",\n        \"certains\",\n        \"certes\",\n        \"ces\",\n        \"cet\",\n        \"cette\",\n        \"ceux\",\n        \"ceux-ci\",\n        \"ceux-là\",\n        \"chacun\",\n        \"chaque\",\n        \"cher\",\n        \"chère\",\n        \"chères\",\n        \"chers\",\n        \"chez\",\n        \"chiche\",\n        \"chut\",\n        \"ci\",\n        \"cinq\",\n        \"cinquantaine\",\n        \"cinquante\",\n        \"cinquantième\",\n        \"cinquième\",\n        \"clac\",\n        \"clic\",\n        \"combien\",\n        \"comme\",\n        \"comment\",\n        \"compris\",\n        \"concernant\",\n        \"contre\",\n        \"couic\",\n        \"crac\",\n        \"d\",\n        \"da\",\n        \"dans\",\n        \"de\",\n        \"debout\",\n        \"dedans\",\n        \"dehors\",\n        \"delà\",\n        \"depuis\",\n        \"derrière\",\n        \"des\",\n        \"dès\",\n        \"désormais\",\n        \"desquelles\",\n        \"desquels\",\n        \"dessous\",\n        \"dessus\",\n        \"deux\",\n        \"deuxième\",\n        \"deuxièmement\",\n        \"devant\",\n        \"devers\",\n        \"devra\",\n        \"différent\",\n        \"différente\",\n        \"différentes\",\n        \"différents\",\n        \"dire\",\n        \"divers\",\n        \"diverse\",\n        \"diverses\",\n        \"dix\",\n        \"dix-huit\",\n        \"dixième\",\n        \"dix-neuf\",\n        \"dix-sept\",\n        \"doit\",\n        \"doivent\",\n        \"donc\",\n        \"dont\",\n        \"douze\",\n        \"douzième\",\n        \"dring\",\n        \"du\",\n        \"duquel\",\n        \"durant\",\n        \"e\",\n        \"effet\",\n        \"eh\",\n        \"elle\",\n        \"elle-même\",\n        \"elles\",\n        \"elles-mêmes\",\n        \"en\",\n        \"encore\",\n        \"entre\",\n        \"envers\",\n        \"environ\",\n        \"es\",\n        \"ès\",\n        \"est\",\n        \"et\",\n        \"etant\",\n        \"étaient\",\n        \"étais\",\n        \"était\",\n        \"étant\",\n        \"etc\",\n        \"été\",\n        \"etre\",\n        \"être\",\n        \"eu\",\n        \"euh\",\n        \"eux\",\n        \"eux-mêmes\",\n        \"excepté\",\n        \"f\",\n        \"façon\",\n        \"fais\",\n        \"faisaient\",\n        \"faisant\",\n        \"fait\",\n        \"feront\",\n        \"fi\",\n        \"flac\",\n        \"floc\",\n        \"font\",\n        \"g\",\n        \"gens\",\n        \"h\",\n        \"ha\",\n        \"hé\",\n        \"hein\",\n        \"hélas\",\n        \"hem\",\n        \"hep\",\n        \"hi\",\n        \"ho\",\n        \"holà\",\n        \"hop\",\n        \"hormis\",\n        \"hors\",\n        \"hou\",\n        \"houp\",\n        \"hue\",\n        \"hui\",\n        \"huit\",\n        \"huitième\",\n        \"hum\",\n        \"hurrah\",\n        \"i\",\n        \"il\",\n        \"ils\",\n        \"importe\",\n        \"j\",\n        \"je\",\n        \"jusqu\",\n        \"jusque\",\n        \"k\",\n        \"l\",\n        \"la\",\n        \"là\",\n        \"laquelle\",\n        \"las\",\n        \"le\",\n        \"lequel\",\n        \"les\",\n        \"lès\",\n        \"lesquelles\",\n        \"lesquels\",\n        \"leur\",\n        \"leurs\",\n        \"longtemps\",\n        \"lorsque\",\n        \"lui\",\n        \"lui-même\",\n        \"m\",\n        \"ma\",\n        \"maint\",\n        \"mais\",\n        \"malgré\",\n        \"me\",\n        \"même\",\n        \"mêmes\",\n        \"merci\",\n        \"mes\",\n        \"mien\",\n        \"mienne\",\n        \"miennes\",\n        \"miens\",\n        \"mille\",\n        \"mince\",\n        \"moi\",\n        \"moi-même\",\n        \"moins\",\n        \"mon\",\n        \"moyennant\",\n        \"n\",\n        \"na\",\n        \"ne\",\n        \"néanmoins\",\n        \"neuf\",\n        \"neuvième\",\n        \"ni\",\n        \"nombreuses\",\n        \"nombreux\",\n        \"non\",\n        \"nos\",\n        \"notre\",\n        \"nôtre\",\n        \"nôtres\",\n        \"nous\",\n        \"nous-mêmes\",\n        \"nul\",\n        \"o\",\n        \"o|\",\n        \"ô\",\n        \"oh\",\n        \"ohé\",\n        \"olé\",\n        \"ollé\",\n        \"on\",\n        \"ont\",\n        \"onze\",\n        \"onzième\",\n        \"ore\",\n        \"ou\",\n        \"où\",\n        \"ouf\",\n        \"ouias\",\n        \"oust\",\n        \"ouste\",\n        \"outre\",\n        \"p\",\n        \"paf\",\n        \"pan\",\n        \"par\",\n        \"parmi\",\n        \"partant\",\n        \"particulier\",\n        \"particulière\",\n        \"particulièrement\",\n        \"pas\",\n        \"passé\",\n        \"pendant\",\n        \"personne\",\n        \"peu\",\n        \"peut\",\n        \"peuvent\",\n        \"peux\",\n        \"pff\",\n        \"pfft\",\n        \"pfut\",\n        \"pif\",\n        \"plein\",\n        \"plouf\",\n        \"plus\",\n        \"plusieurs\",\n        \"plutôt\",\n        \"pouah\",\n        \"pour\",\n        \"pourquoi\",\n        \"premier\",\n        \"première\",\n        \"premièrement\",\n        \"près\",\n        \"proche\",\n        \"psitt\",\n        \"puisque\",\n        \"q\",\n        \"qu\",\n        \"quand\",\n        \"quant\",\n        \"quanta\",\n        \"quant-à-soi\",\n        \"quarante\",\n        \"quatorze\",\n        \"quatre\",\n        \"quatre-vingt\",\n        \"quatrième\",\n        \"quatrièmement\",\n        \"que\",\n        \"quel\",\n        \"quelconque\",\n        \"quelle\",\n        \"quelles\",\n        \"quelque\",\n        \"quelques\",\n        \"quelqu'un\",\n        \"quels\",\n        \"qui\",\n        \"quiconque\",\n        \"quinze\",\n        \"quoi\",\n        \"quoique\",\n        \"r\",\n        \"revoici\",\n        \"revoilà\",\n        \"rien\",\n        \"s\",\n        \"sa\",\n        \"sacrebleu\",\n        \"sans\",\n        \"sapristi\",\n        \"sauf\",\n        \"se\",\n        \"seize\",\n        \"selon\",\n        \"sept\",\n        \"septième\",\n        \"sera\",\n        \"seront\",\n        \"ses\",\n        \"si\",\n        \"sien\",\n        \"sienne\",\n        \"siennes\",\n        \"siens\",\n        \"sinon\",\n        \"six\",\n        \"sixième\",\n        \"soi\",\n        \"soi-même\",\n        \"soit\",\n        \"soixante\",\n        \"son\",\n        \"sont\",\n        \"sous\",\n        \"stop\",\n        \"suis\",\n        \"suivant\",\n        \"sur\",\n        \"surtout\",\n        \"t\",\n        \"ta\",\n        \"tac\",\n        \"tant\",\n        \"te\",\n        \"té\",\n        \"tel\",\n        \"telle\",\n        \"tellement\",\n        \"telles\",\n        \"tels\",\n        \"tenant\",\n        \"tes\",\n        \"tic\",\n        \"tien\",\n        \"tienne\",\n        \"tiennes\",\n        \"tiens\",\n        \"toc\",\n        \"toi\",\n        \"toi-même\",\n        \"ton\",\n        \"touchant\",\n        \"toujours\",\n        \"tous\",\n        \"tout\",\n        \"toute\",\n        \"toutes\",\n        \"treize\",\n        \"trente\",\n        \"très\",\n        \"trois\",\n        \"troisième\",\n        \"troisièmement\",\n        \"trop\",\n        \"tsoin\",\n        \"tsouin\",\n        \"tu\",\n        \"u\",\n        \"un\",\n        \"une\",\n        \"unes\",\n        \"uns\",\n        \"v\",\n        \"va\",\n        \"vais\",\n        \"vas\",\n        \"vé\",\n        \"vers\",\n        \"via\",\n        \"vif\",\n        \"vifs\",\n        \"vingt\",\n        \"vivat\",\n        \"vive\",\n        \"vives\",\n        \"vlan\",\n        \"voici\",\n        \"voilà\",\n        \"vont\",\n        \"vos\",\n        \"votre\",\n        \"vôtre\",\n        \"vôtres\",\n        \"vous\",\n        \"vous-mêmes\",\n        \"vu\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"zut\",\n        \"﻿alors\",\n        \"aucuns\",\n        \"bon\",\n        \"devrait\",\n        \"dos\",\n        \"droite\",\n        \"début\",\n        \"essai\",\n        \"faites\",\n        \"fois\",\n        \"force\",\n        \"haut\",\n        \"ici\",\n        \"juste\",\n        \"maintenant\",\n        \"mine\",\n        \"mot\",\n        \"nommés\",\n        \"nouveaux\",\n        \"parce\",\n        \"parole\",\n        \"personnes\",\n        \"pièce\",\n        \"plupart\",\n        \"seulement\",\n        \"soyez\",\n        \"sujet\",\n        \"tandis\",\n        \"valeur\",\n        \"voie\",\n        \"voient\",\n        \"état\",\n        \"étions\"\n\n    ]\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/fr.js\n// module id = 397\n// module chunks = 176202273623472","//  via http://www.ranks.nl/stopwords/galician\nmodule.exports = {\n    stopwords: [\n        'a',\n        'aínda',\n        'alí',\n        'aquel',\n        'aquela',\n        'aquelas',\n        'aqueles',\n        'aquilo',\n        'aquí',\n        'ao',\n        'aos',\n        'as',\n        'así',\n        'á',\n        'ben',\n        'cando',\n        'che',\n        'co',\n        'coa',\n        'comigo',\n        'con',\n        'connosco',\n        'contigo',\n        'convosco',\n        'coas',\n        'cos',\n        'cun',\n        'cuns',\n        'cunha',\n        'cunhas',\n        'da',\n        'dalgunha',\n        'dalgunhas',\n        'dalgún',\n        'dalgúns',\n        'das',\n        'de',\n        'del',\n        'dela',\n        'delas',\n        'deles',\n        'desde',\n        'deste',\n        'do',\n        'dos',\n        'dun',\n        'duns',\n        'dunha',\n        'dunhas',\n        'e',\n        'el',\n        'ela',\n        'elas',\n        'eles',\n        'en',\n        'era',\n        'eran',\n        'esa',\n        'esas',\n        'ese',\n        'eses',\n        'esta',\n        'estar',\n        'estaba',\n        'está',\n        'están',\n        'este',\n        'estes',\n        'estiven',\n        'estou',\n        'eu',\n        'é',\n        'facer',\n        'foi',\n        'foron',\n        'fun',\n        'había',\n        'hai',\n        'iso',\n        'isto',\n        'la',\n        'las',\n        'lle',\n        'lles',\n        'lo',\n        'los',\n        'mais',\n        'me',\n        'meu',\n        'meus',\n        'min',\n        'miña',\n        'miñas',\n        'moi',\n        'na',\n        'nas',\n        'neste',\n        'nin',\n        'no',\n        'non',\n        'nos',\n        'nosa',\n        'nosas',\n        'noso',\n        'nosos',\n        'nós',\n        'nun',\n        'nunha',\n        'nuns',\n        'nunhas',\n        'o',\n        'os',\n        'ou',\n        'ó',\n        'ós',\n        'para',\n        'pero',\n        'pode',\n        'pois',\n        'pola',\n        'polas',\n        'polo',\n        'polos',\n        'por',\n        'que',\n        'se',\n        'senón',\n        'ser',\n        'seu',\n        'seus',\n        'sexa',\n        'sido',\n        'sobre',\n        'súa',\n        'súas',\n        'tamén',\n        'tan',\n        'te',\n        'ten',\n        'teñen',\n        'teño',\n        'ter',\n        'teu',\n        'teus',\n        'ti',\n        'tido',\n        'tiña',\n        'tiven',\n        'túa',\n        'túas',\n        'un',\n        'unha',\n        'unhas',\n        'uns',\n        'vos',\n        'vosa',\n        'vosas',\n        'voso',\n        'vosos',\n        'vós'\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/gl.js\n// module id = 398\n// module chunks = 176202273623472","/**\n * Created by jan on 9-3-15.\n */\n// Italian stopwords\n// via https://code.google.com/p/stop-words/\n\nmodule.exports = {\n    stopwords: [\n        \"a\",\n        \"adesso\",\n        \"ai\",\n        \"al\",\n        \"alla\",\n        \"allo\",\n        \"allora\",\n        \"altre\",\n        \"altri\",\n        \"altro\",\n        \"anche\",\n        \"ancora\",\n        \"avere\",\n        \"aveva\",\n        \"avevano\",\n        \"ben\",\n        \"buono\",\n        \"che\",\n        \"chi\",\n        \"cinque\",\n        \"comprare\",\n        \"con\",\n        \"consecutivi\",\n        \"consecutivo\",\n        \"cosa\",\n        \"cui\",\n        \"da\",\n        \"del\",\n        \"della\",\n        \"dello\",\n        \"dentro\",\n        \"deve\",\n        \"devo\",\n        \"di\",\n        \"doppio\",\n        \"due\",\n        \"e\",\n        \"ecco\",\n        \"fare\",\n        \"fine\",\n        \"fino\",\n        \"fra\",\n        \"gente\",\n        \"giu\",\n        \"ha\",\n        \"hai\",\n        \"hanno\",\n        \"ho\",\n        \"il\",\n        \"indietro\",\n        \"invece\",\n        \"io\",\n        \"la\",\n        \"lavoro\",\n        \"le\",\n        \"lei\",\n        \"lo\",\n        \"loro\",\n        \"lui\",\n        \"lungo\",\n        \"ma\",\n        \"me\",\n        \"meglio\",\n        \"molta\",\n        \"molti\",\n        \"molto\",\n        \"nei\",\n        \"nella\",\n        \"no\",\n        \"noi\",\n        \"nome\",\n        \"nostro\",\n        \"nove\",\n        \"nuovi\",\n        \"nuovo\",\n        \"o\",\n        \"oltre\",\n        \"ora\",\n        \"otto\",\n        \"peggio\",\n        \"pero\",\n        \"persone\",\n        \"piu\",\n        \"poco\",\n        \"primo\",\n        \"promesso\",\n        \"qua\",\n        \"quarto\",\n        \"quasi\",\n        \"quattro\",\n        \"quello\",\n        \"questo\",\n        \"qui\",\n        \"quindi\",\n        \"quinto\",\n        \"rispetto\",\n        \"sara\",\n        \"secondo\",\n        \"sei\",\n        \"sembra\",\n        \"sembrava\",\n        \"senza\",\n        \"sette\",\n        \"sia\",\n        \"siamo\",\n        \"siete\",\n        \"solo\",\n        \"sono\",\n        \"sopra\",\n        \"soprattutto\",\n        \"sotto\",\n        \"stati\",\n        \"stato\",\n        \"stesso\",\n        \"su\",\n        \"subito\",\n        \"sul\",\n        \"sulla\",\n        \"tanto\",\n        \"te\",\n        \"tempo\",\n        \"terzo\",\n        \"tra\",\n        \"tre\",\n        \"triplo\",\n        \"ultimo\",\n        \"un\",\n        \"una\",\n        \"uno\",\n        \"va\",\n        \"vai\",\n        \"voi\",\n        \"volte\",\n        \"vostro\",\n        \"a\",\n        \"abbastanza\",\n        \"accidenti\",\n        \"ad\",\n        \"affinche\",\n        \"agli\",\n        \"ahime\",\n        \"ahimÃ\",\n        \"alcuna\",\n        \"alcuni\",\n        \"alcuno\",\n        \"all\",\n        \"alle\",\n        \"altrimenti\",\n        \"altrui\",\n        \"anni\",\n        \"anno\",\n        \"ansa\",\n        \"assai\",\n        \"attesa\",\n        \"avanti\",\n        \"avendo\",\n        \"avente\",\n        \"aver\",\n        \"avete\",\n        \"avuta\",\n        \"avute\",\n        \"avuti\",\n        \"avuto\",\n        \"basta\",\n        \"bene\",\n        \"benissimo\",\n        \"berlusconi\",\n        \"brava\",\n        \"bravo\",\n        \"c\",\n        \"casa\",\n        \"caso\",\n        \"cento\",\n        \"certa\",\n        \"certe\",\n        \"certi\",\n        \"certo\",\n        \"chicchessia\",\n        \"chiunque\",\n        \"ci\",\n        \"ciascuna\",\n        \"ciascuno\",\n        \"cima\",\n        \"cio\",\n        \"ciÃ\",\n        \"cioe\",\n        \"cioÃ\",\n        \"circa\",\n        \"citta\",\n        \"cittÃ\",\n        \"codesta\",\n        \"codesti\",\n        \"codesto\",\n        \"cogli\",\n        \"coi\",\n        \"col\",\n        \"colei\",\n        \"coll\",\n        \"coloro\",\n        \"colui\",\n        \"come\",\n        \"concernente\",\n        \"consiglio\",\n        \"contro\",\n        \"cortesia\",\n        \"cos\",\n        \"cosi\",\n        \"cosÃ\",\n        \"d\",\n        \"dagli\",\n        \"dai\",\n        \"dal\",\n        \"dall\",\n        \"dalla\",\n        \"dalle\",\n        \"dallo\",\n        \"davanti\",\n        \"degli\",\n        \"dei\",\n        \"dell\",\n        \"delle\",\n        \"detto\",\n        \"dice\",\n        \"dietro\",\n        \"dire\",\n        \"dirimpetto\",\n        \"dopo\",\n        \"dove\",\n        \"dovra\",\n        \"dovrÃ\",\n        \"dunque\",\n        \"durante\",\n        \"Ã\",\n        \"ed\",\n        \"egli\",\n        \"ella\",\n        \"eppure\",\n        \"era\",\n        \"erano\",\n        \"esse\",\n        \"essendo\",\n        \"esser\",\n        \"essere\",\n        \"essi\",\n        \"ex\",\n        \"fa\",\n        \"fatto\",\n        \"favore\",\n        \"fin\",\n        \"finalmente\",\n        \"finche\",\n        \"forse\",\n        \"fuori\",\n        \"gia\",\n        \"giÃ\",\n        \"giacche\",\n        \"giorni\",\n        \"giorno\",\n        \"gli\",\n        \"gliela\",\n        \"gliele\",\n        \"glieli\",\n        \"glielo\",\n        \"gliene\",\n        \"governo\",\n        \"grande\",\n        \"grazie\",\n        \"gruppo\",\n        \"i\",\n        \"ieri\",\n        \"improvviso\",\n        \"in\",\n        \"infatti\",\n        \"insieme\",\n        \"intanto\",\n        \"intorno\",\n        \"l\",\n        \"lÃ\",\n        \"li\",\n        \"lontano\",\n        \"macche\",\n        \"magari\",\n        \"mai\",\n        \"male\",\n        \"malgrado\",\n        \"malissimo\",\n        \"medesimo\",\n        \"mediante\",\n        \"meno\",\n        \"mentre\",\n        \"mesi\",\n        \"mezzo\",\n        \"mi\",\n        \"mia\",\n        \"mie\",\n        \"miei\",\n        \"mila\",\n        \"miliardi\",\n        \"milioni\",\n        \"ministro\",\n        \"mio\",\n        \"moltissimo\",\n        \"mondo\",\n        \"nazionale\",\n        \"ne\",\n        \"negli\",\n        \"nel\",\n        \"nell\",\n        \"nelle\",\n        \"nello\",\n        \"nemmeno\",\n        \"neppure\",\n        \"nessuna\",\n        \"nessuno\",\n        \"niente\",\n        \"non\",\n        \"nondimeno\",\n        \"nostra\",\n        \"nostre\",\n        \"nostri\",\n        \"nulla\",\n        \"od\",\n        \"oggi\",\n        \"ogni\",\n        \"ognuna\",\n        \"ognuno\",\n        \"oppure\",\n        \"ore\",\n        \"osi\",\n        \"ossia\",\n        \"paese\",\n        \"parecchi\",\n        \"parecchie\",\n        \"parecchio\",\n        \"parte\",\n        \"partendo\",\n        \"peccato\",\n        \"per\",\n        \"perche\",\n        \"perchÃ\",\n        \"percio\",\n        \"perciÃ\",\n        \"perfino\",\n        \"perÃ\",\n        \"piedi\",\n        \"pieno\",\n        \"piglia\",\n        \"piÃ\",\n        \"po\",\n        \"pochissimo\",\n        \"poi\",\n        \"poiche\",\n        \"press\",\n        \"prima\",\n        \"proprio\",\n        \"puo\",\n        \"puÃ\",\n        \"pure\",\n        \"purtroppo\",\n        \"qualche\",\n        \"qualcuna\",\n        \"qualcuno\",\n        \"quale\",\n        \"quali\",\n        \"qualunque\",\n        \"quando\",\n        \"quanta\",\n        \"quante\",\n        \"quanti\",\n        \"quanto\",\n        \"quantunque\",\n        \"quel\",\n        \"quella\",\n        \"quelli\",\n        \"quest\",\n        \"questa\",\n        \"queste\",\n        \"questi\",\n        \"riecco\",\n        \"salvo\",\n        \"sarÃ\",\n        \"sarebbe\",\n        \"scopo\",\n        \"scorso\",\n        \"se\",\n        \"seguente\",\n        \"sempre\",\n        \"si\",\n        \"solito\",\n        \"sta\",\n        \"staranno\",\n        \"stata\",\n        \"state\",\n        \"sua\",\n        \"successivo\",\n        \"sue\",\n        \"sugli\",\n        \"sui\",\n        \"sull\",\n        \"sulle\",\n        \"sullo\",\n        \"suo\",\n        \"suoi\",\n        \"tale\",\n        \"talvolta\",\n        \"ti\",\n        \"torino\",\n        \"tranne\",\n        \"troppo\",\n        \"tu\",\n        \"tua\",\n        \"tue\",\n        \"tuo\",\n        \"tuoi\",\n        \"tutta\",\n        \"tuttavia\",\n        \"tutte\",\n        \"tutti\",\n        \"tutto\",\n        \"uguali\",\n        \"uomo\",\n        \"vale\",\n        \"varia\",\n        \"varie\",\n        \"vario\",\n        \"verso\",\n        \"vi\",\n        \"via\",\n        \"vicino\",\n        \"visto\",\n        \"vita\",\n        \"volta\",\n        \"vostra\",\n        \"vostre\",\n        \"vostri\"\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/it.js\n// module id = 399\n// module chunks = 176202273623472","/**\n * Created by jan on 9-3-15.\n */\n// Dutch stopwords\n// via https://code.google.com/p/stop-words/\n\n\n\nmodule.exports = {\n    stopwords:[\n        \"aan\",\n        \"af\",\n        \"al\",\n        \"als\",\n        \"bij\",\n        \"dan\",\n        \"dat\",\n        \"die\",\n        \"dit\",\n        \"een\",\n        \"en\",\n        \"er\",\n        \"had\",\n        \"heb\",\n        \"hem\",\n        \"het\",\n        \"hij\",\n        \"hoe\",\n        \"hun\",\n        \"ik\",\n        \"in\",\n        \"is\",\n        \"je\",\n        \"kan\",\n        \"me\",\n        \"men\",\n        \"met\",\n        \"mij\",\n        \"nog\",\n        \"nu\",\n        \"of\",\n        \"ons\",\n        \"ook\",\n        \"te\",\n        \"tot\",\n        \"uit\",\n        \"van\",\n        \"was\",\n        \"wat\",\n        \"we\",\n        \"wel\",\n        \"wij\",\n        \"zal\",\n        \"ze\",\n        \"zei\",\n        \"zij\",\n        \"zo\",\n        \"zou\",\n        \"aan\",\n        \"aangaande\",\n        \"aangezien\",\n        \"achter\",\n        \"achterna\",\n        \"afgelopen\",\n        \"al\",\n        \"aldaar\",\n        \"aldus\",\n        \"alhoewel\",\n        \"alias\",\n        \"alle\",\n        \"allebei\",\n        \"alleen\",\n        \"alsnog\",\n        \"altijd\",\n        \"altoos\",\n        \"ander\",\n        \"andere\",\n        \"anders\",\n        \"anderszins\",\n        \"behalve\",\n        \"behoudens\",\n        \"beide\",\n        \"beiden\",\n        \"ben\",\n        \"beneden\",\n        \"bent\",\n        \"bepaald\",\n        \"betreffende\",\n        \"bij\",\n        \"binnen\",\n        \"binnenin\",\n        \"boven\",\n        \"bovenal\",\n        \"bovendien\",\n        \"bovengenoemd\",\n        \"bovenstaand\",\n        \"bovenvermeld\",\n        \"buiten\",\n        \"daar\",\n        \"daarheen\",\n        \"daarin\",\n        \"daarna\",\n        \"daarnet\",\n        \"daarom\",\n        \"daarop\",\n        \"daarvanlangs\",\n        \"dan\",\n        \"dat\",\n        \"de\",\n        \"die\",\n        \"dikwijls\",\n        \"dit\",\n        \"door\",\n        \"doorgaand\",\n        \"dus\",\n        \"echter\",\n        \"eer\",\n        \"eerdat\",\n        \"eerder\",\n        \"eerlang\",\n        \"eerst\",\n        \"elk\",\n        \"elke\",\n        \"en\",\n        \"enig\",\n        \"enigszins\",\n        \"enkel\",\n        \"er\",\n        \"erdoor\",\n        \"even\",\n        \"eveneens\",\n        \"evenwel\",\n        \"gauw\",\n        \"gedurende\",\n        \"geen\",\n        \"gehad\",\n        \"gekund\",\n        \"geleden\",\n        \"gelijk\",\n        \"gemoeten\",\n        \"gemogen\",\n        \"geweest\",\n        \"gewoon\",\n        \"gewoonweg\",\n        \"haar\",\n        \"had\",\n        \"hadden\",\n        \"hare\",\n        \"heb\",\n        \"hebben\",\n        \"hebt\",\n        \"heeft\",\n        \"hem\",\n        \"hen\",\n        \"het\",\n        \"hierbeneden\",\n        \"hierboven\",\n        \"hij\",\n        \"hoe\",\n        \"hoewel\",\n        \"hun\",\n        \"hunne\",\n        \"ik\",\n        \"ikzelf\",\n        \"in\",\n        \"inmiddels\",\n        \"inzake\",\n        \"is\",\n        \"jezelf\",\n        \"jij\",\n        \"jijzelf\",\n        \"jou\",\n        \"jouw\",\n        \"jouwe\",\n        \"juist\",\n        \"jullie\",\n        \"kan\",\n        \"klaar\",\n        \"kon\",\n        \"konden\",\n        \"krachtens\",\n        \"kunnen\",\n        \"kunt\",\n        \"later\",\n        \"liever\",\n        \"maar\",\n        \"mag\",\n        \"meer\",\n        \"met\",\n        \"mezelf\",\n        \"mij\",\n        \"mijn\",\n        \"mijnent\",\n        \"mijner\",\n        \"mijzelf\",\n        \"misschien\",\n        \"mocht\",\n        \"mochten\",\n        \"moest\",\n        \"moesten\",\n        \"moet\",\n        \"moeten\",\n        \"mogen\",\n        \"na\",\n        \"naar\",\n        \"nadat\",\n        \"net\",\n        \"niet\",\n        \"noch\",\n        \"nog\",\n        \"nogal\",\n        \"nu\",\n        \"of\",\n        \"ofschoon\",\n        \"om\",\n        \"omdat\",\n        \"omhoog\",\n        \"omlaag\",\n        \"omstreeks\",\n        \"omtrent\",\n        \"omver\",\n        \"onder\",\n        \"ondertussen\",\n        \"ongeveer\",\n        \"ons\",\n        \"onszelf\",\n        \"onze\",\n        \"ook\",\n        \"op\",\n        \"opnieuw\",\n        \"opzij\",\n        \"over\",\n        \"overeind\",\n        \"overigens\",\n        \"pas\",\n        \"precies\",\n        \"reeds\",\n        \"rond\",\n        \"rondom\",\n        \"sedert\",\n        \"sinds\",\n        \"sindsdien\",\n        \"slechts\",\n        \"sommige\",\n        \"spoedig\",\n        \"steeds\",\n        \"tamelijk\",\n        \"tenzij\",\n        \"terwijl\",\n        \"thans\",\n        \"tijdens\",\n        \"toch\",\n        \"toen\",\n        \"toenmaals\",\n        \"toenmalig\",\n        \"tot\",\n        \"totdat\",\n        \"tussen\",\n        \"uit\",\n        \"uitgezonderd\",\n        \"vaakwat\",\n        \"van\",\n        \"vandaan\",\n        \"vanuit\",\n        \"vanwege\",\n        \"veeleer\",\n        \"verder\",\n        \"vervolgens\",\n        \"vol\",\n        \"volgens\",\n        \"voor\",\n        \"vooraf\",\n        \"vooral\",\n        \"vooralsnog\",\n        \"voorbij\",\n        \"voordat\",\n        \"voordezen\",\n        \"voordien\",\n        \"voorheen\",\n        \"voorop\",\n        \"vooruit\",\n        \"vrij\",\n        \"vroeg\",\n        \"waar\",\n        \"waarom\",\n        \"wanneer\",\n        \"want\",\n        \"waren\",\n        \"was\",\n        \"weer\",\n        \"weg\",\n        \"wegens\",\n        \"wel\",\n        \"weldra\",\n        \"welk\",\n        \"welke\",\n        \"wie\",\n        \"wiens\",\n        \"wier\",\n        \"wij\",\n        \"wijzelf\",\n        \"zal\",\n        \"ze\",\n        \"zelfs\",\n        \"zichzelf\",\n        \"zij\",\n        \"zijn\",\n        \"zijne\",\n        \"zo\",\n        \"zodra\",\n        \"zonder\",\n        \"zou\",\n        \"zouden\",\n        \"zowat\",\n        \"zulke\",\n        \"zullen\",\n        \"zult\"\n    ]\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/nl.js\n// module id = 400\n// module chunks = 176202273623472","// via http://hackage.haskell.org/package/glider-nlp-0.1/docs/src/Glider-NLP-Language-Polish-StopWords.html\nmodule.exports = {\n    stopwords:[\n        \"a\",\n\"aby\",\n\"ach\",\n\"acz\",\n\"aczkolwiek\",\n\"aj\",\n\"albo\",\n\"ale\",\n\"alez\",\n\"ależ\",\n\"ani\",\n\"az\",\n\"aż\",\n\"bardziej\",\n\"bardzo\",\n\"bo\",\n\"bowiem\",\n\"by\",\n\"byli\",\n\"bynajmniej\",\n\"byc\",\n\"być\",\n\"byl\",\n\"był\",\n\"byla\",\n\"bylo\",\n\"byly\",\n\"była\",\n\"było\",\n\"były\",\n\"bedzie\",\n\"będzie\",\n\"beda\",\n\"będą\",\n\"cali\",\n\"cala\",\n\"cała\",\n\"caly\",\n\"cały\",\n\"ci\",\n\"cie\",\n\"cię\",\n\"ciebie\",\n\"co\",\n\"cokolwiek\",\n\"cos\",\n\"coś\",\n\"czasami\",\n\"czasem\",\n\"czemu\",\n\"czy\",\n\"czyli\",\n\"daleko\",\n\"dla\",\n\"dlaczego\",\n\"dlatego\",\n\"do\",\n\"dobrze\",\n\"dokad\",\n\"dokąd\",\n\"dosc\",\n\"dość\",\n\"duzo\",\n\"dużo\",\n\"dwa\",\n\"dwaj\",\n\"dwie\",\n\"dwoje\",\n\"dzis\",\n\"dziś\",\n\"dzisiaj\",\n\"gdy\",\n\"gdyby\",\n\"gdyz\",\n\"gdyż\",\n\"gdzie\",\n\"gdziekolwiek\",\n\"gdzies\",\n\"gdzieś\",\n\"go\",\n\"i\",\n\"ich\",\n\"ile\",\n\"im\",\n\"inna\",\n\"inne\",\n\"inny\",\n\"innych\",\n\"iz\",\n\"iż\",\n\"ja\",\n\"ją\",\n\"jak\",\n\"jakas\",\n\"jakaś\",\n\"jakby\",\n\"jaki\",\n\"jakichs\",\n\"jakichś\",\n\"jakie\",\n\"jakis\",\n\"jakiś\",\n\"jakiz\",\n\"jakiż\",\n\"jakkolwiek\",\n\"jako\",\n\"jakos\",\n\"jakoś\",\n\"je\",\n\"jeden\",\n\"jedna\",\n\"jedno\",\n\"jednak\",\n\"jednakze\",\n\"jednakże\",\n\"jego\",\n\"jej\",\n\"jemu\",\n\"jest\",\n\"jestem\",\n\"jeszcze\",\n\"jesli\",\n\"jeśli\",\n\"jezeli\",\n\"jeżeli\",\n\"juz\",\n\"już\",\n\"kazdy\",\n\"każdy\",\n\"kiedy\",\n\"kilka\",\n\"kims\",\n\"kimś\",\n\"kto\",\n\"ktokolwiek\",\n\"ktos\",\n\"ktoś\",\n\"ktora\",\n\"ktore\",\n\"które\",\n\"ktorego\",\n\"ktorej\",\n\"ktory\",\n\"ktorych\",\n\"ktorym\",\n\"ktorzy\",\n\"która\",\n\"którego\",\n\"której\",\n\"który\",\n\"których\",\n\"którym\",\n\"którzy\",\n\"ku\",\n\"lat\",\n\"lecz\",\n\"lub\",\n\"ma\",\n\"mają\",\n\"mało\",\n\"mam\",\n\"mi\",\n\"mimo\",\n\"miedzy\",\n\"między\",\n\"mna\",\n\"mną\",\n\"mnie\",\n\"moga\",\n\"mogą\",\n\"moi\",\n\"moim\",\n\"moja\",\n\"moje\",\n\"moze\",\n\"może\",\n\"mozliwe\",\n\"mozna\",\n\"możliwe\",\n\"można\",\n\"moj\",\n\"mój\",\n\"mu\",\n\"musi\",\n\"my\",\n\"na\",\n\"nad\",\n\"nam\",\n\"nami\",\n\"nas\",\n\"nasi\",\n\"nasz\",\n\"nasza\",\n\"nasze\",\n\"naszego\",\n\"naszych\",\n\"natomiast\",\n\"natychmiast\",\n\"nawet\",\n\"nia\",\n\"nią\",\n\"nic\",\n\"nich\",\n\"nie\",\n\"niech\",\n\"niego\",\n\"niej\",\n\"niemu\",\n\"nigdy\",\n\"nim\",\n\"nimi\",\n\"niz\",\n\"niż\",\n\"no\",\n\"o\",\n\"obok\",\n\"od\",\n\"około\",\n\"on\",\n\"ona\",\n\"one\",\n\"oni\",\n\"ono\",\n\"oraz\",\n\"oto\",\n\"owszem\",\n\"pan\",\n\"pana\",\n\"pani\",\n\"po\",\n\"pod\",\n\"podczas\",\n\"pomimo\",\n\"ponad\",\n\"poniewaz\",\n\"ponieważ\",\n\"powinien\",\n\"powinna\",\n\"powinni\",\n\"powinno\",\n\"poza\",\n\"prawie\",\n\"przeciez\",\n\"przecież\",\n\"przed\",\n\"przede\",\n\"przedtem\",\n\"przez\",\n\"przy\",\n\"roku\",\n\"rowniez\",\n\"również\",\n\"sam\",\n\"sama\",\n\"są\",\n\"sie\",\n\"się\",\n\"skad\",\n\"skąd\",\n\"sobie\",\n\"soba\",\n\"sobą\",\n\"sposob\",\n\"sposób\",\n\"swoje\",\n\"ta\",\n\"tak\",\n\"taka\",\n\"taki\",\n\"takie\",\n\"takze\",\n\"także\",\n\"tam\",\n\"te\",\n\"tego\",\n\"tej\",\n\"ten\",\n\"teraz\",\n\"też\",\n\"to\",\n\"toba\",\n\"tobą\",\n\"tobie\",\n\"totez\",\n\"toteż\",\n\"trzeba\",\n\"tu\",\n\"tutaj\",\n\"twoi\",\n\"twoim\",\n\"twoja\",\n\"twoje\",\n\"twym\",\n\"twoj\",\n\"twój\",\n\"ty\",\n\"tych\",\n\"tylko\",\n\"tym\",\n\"u\",\n\"w\",\n\"wam\",\n\"wami\",\n\"was\",\n\"wasz\",\n\"wasza\",\n\"wasze\",\n\"we\",\n\"według\",\n\"wiele\",\n\"wielu\",\n\"więc\",\n\"więcej\",\n\"wszyscy\",\n\"wszystkich\",\n\"wszystkie\",\n\"wszystkim\",\n\"wszystko\",\n\"wtedy\",\n\"wy\",\n\"wlasnie\",\n\"właśnie\",\n\"z\",\n\"za\",\n\"zapewne\",\n\"zawsze\",\n\"ze\",\n\"znowu\",\n\"znow\",\n\"znów\",\n\"zostal\",\n\"został\",\n\"zaden\",\n\"zadna\",\n\"zadne\",\n\"zadnych\",\n\"ze\",\n\"zeby\",\n\"żaden\",\n\"żadna\",\n\"żadne\",\n\"żadnych\",\n\"że\",\n\"żeby\"\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/pl.js\n// module id = 401\n// module chunks = 176202273623472","/**\n * Created by rodrigo on 01/10/15.\n */\n\n//Portuguese (BRAZIL) stopwords\n// via https://sites.google.com/site/kevinbouge/stopwords-lists\nmodule.exports = {\n    stopwords: [\n        \"a\",\n        \"à\",\n        \"adeus\",\n        \"agora\",\n        \"aí\",\n        \"ainda\",\n        \"além\",\n        \"algo\",\n        \"algumas\",\n        \"alguns\",\n        \"ali\",\n        \"ano\",\n        \"anos\",\n        \"antes\",\n        \"ao\",\n        \"aos\",\n        \"apenas\",\n        \"apoio\",\n        \"após\",\n        \"aquela\",\n        \"aquelas\",\n        \"aquele\",\n        \"aqueles\",\n        \"aqui\",\n        \"aquilo\",\n        \"área\",\n        \"as\",\n        \"às\",\n        \"assim\",\n        \"até\",\n        \"atrás\",\n        \"através\",\n        \"baixo\",\n        \"bastante\",\n        \"bem\",\n        \"boa\",\n        \"boas\",\n        \"bom\",\n        \"bons\",\n        \"breve\",\n        \"cá\",\n        \"cada\",\n        \"catorze\",\n        \"cedo\",\n        \"cento\",\n        \"certamente\",\n        \"certeza\",\n        \"cima\",\n        \"cinco\",\n        \"coisa\",\n        \"com\",\n        \"como\",\n        \"conselho\",\n        \"contra\",\n        \"custa\",\n        \"da\",\n        \"dá\",\n        \"dão\",\n        \"daquela\",\n        \"daquelas\",\n        \"daquele\",\n        \"daqueles\",\n        \"dar\",\n        \"das\",\n        \"de\",\n        \"debaixo\",\n        \"demais\",\n        \"dentro\",\n        \"depois\",\n        \"desde\",\n        \"dessa\",\n        \"dessas\",\n        \"desse\",\n        \"desses\",\n        \"desta\",\n        \"destas\",\n        \"deste\",\n        \"destes\",\n        \"deve\",\n        \"deverá\",\n        \"dez\",\n        \"dezanove\",\n        \"dezasseis\",\n        \"dezassete\",\n        \"dezoito\",\n        \"dia\",\n        \"diante\",\n        \"diz\",\n        \"dizem\",\n        \"dizer\",\n        \"do\",\n        \"dois\",\n        \"dos\",\n        \"doze\",\n        \"duas\",\n        \"dúvida\",\n        \"e\",\n        \"é\",\n        \"ela\",\n        \"elas\",\n        \"ele\",\n        \"eles\",\n        \"em\",\n        \"embora\",\n        \"entre\",\n        \"era\",\n        \"és\",\n        \"essa\",\n        \"essas\",\n        \"esse\",\n        \"esses\",\n        \"esta\",\n        \"está\",\n        \"estão\",\n        \"estar\",\n        \"estas\",\n        \"estás\",\n        \"estava\",\n        \"este\",\n        \"estes\",\n        \"esteve\",\n        \"estive\",\n        \"estivemos\",\n        \"estiveram\",\n        \"estiveste\",\n        \"estivestes\",\n        \"estou\",\n        \"eu\",\n        \"exemplo\",\n        \"faço\",\n        \"falta\",\n        \"favor\",\n        \"faz\",\n        \"fazeis\",\n        \"fazem\",\n        \"fazemos\",\n        \"fazer\",\n        \"fazes\",\n        \"fez\",\n        \"fim\",\n        \"final\",\n        \"foi\",\n        \"fomos\",\n        \"for\",\n        \"foram\",\n        \"forma\",\n        \"foste\",\n        \"fostes\",\n        \"fui\",\n        \"geral\",\n        \"grande\",\n        \"grandes\",\n        \"grupo\",\n        \"há\",\n        \"hoje\",\n        \"hora\",\n        \"horas\",\n        \"isso\",\n        \"isto\",\n        \"já\",\n        \"lá\",\n        \"lado\",\n        \"local\",\n        \"logo\",\n        \"longe\",\n        \"lugar\",\n        \"maior\",\n        \"maioria\",\n        \"mais\",\n        \"mal\",\n        \"mas\",\n        \"máximo\",\n        \"me\",\n        \"meio\",\n        \"menor\",\n        \"menos\",\n        \"mês\",\n        \"meses\",\n        \"meu\",\n        \"meus\",\n        \"mil\",\n        \"minha\",\n        \"minhas\",\n        \"momento\",\n        \"muito\",\n        \"muitos\",\n        \"na\",\n        \"nada\",\n        \"não\",\n        \"naquela\",\n        \"naquelas\",\n        \"naquele\",\n        \"naqueles\",\n        \"nas\",\n        \"nem\",\n        \"nenhuma\",\n        \"nessa\",\n        \"nessas\",\n        \"nesse\",\n        \"nesses\",\n        \"nesta\",\n        \"nestas\",\n        \"neste\",\n        \"nestes\",\n        \"nível\",\n        \"no\",\n        \"noite\",\n        \"nome\",\n        \"nos\",\n        \"nós\",\n        \"nossa\",\n        \"nossas\",\n        \"nosso\",\n        \"nossos\",\n        \"nova\",\n        \"novas\",\n        \"nove\",\n        \"novo\",\n        \"novos\",\n        \"num\",\n        \"numa\",\n        \"número\",\n        \"nunca\",\n        \"o\",\n        \"obra\",\n        \"obrigada\",\n        \"obrigado\",\n        \"oitava\",\n        \"oitavo\",\n        \"oito\",\n        \"onde\",\n        \"ontem\",\n        \"onze\",\n        \"os\",\n        \"ou\",\n        \"outra\",\n        \"outras\",\n        \"outro\",\n        \"outros\",\n        \"para\",\n        \"parece\",\n        \"parte\",\n        \"partir\",\n        \"paucas\",\n        \"pela\",\n        \"pelas\",\n        \"pelo\",\n        \"pelos\",\n        \"perto\",\n        \"pode\",\n        \"pôde\",\n        \"podem\",\n        \"poder\",\n        \"põe\",\n        \"põem\",\n        \"ponto\",\n        \"pontos\",\n        \"por\",\n        \"porque\",\n        \"porquê\",\n        \"posição\",\n        \"possível\",\n        \"possivelmente\",\n        \"posso\",\n        \"pouca\",\n        \"pouco\",\n        \"poucos\",\n        \"primeira\",\n        \"primeiras\",\n        \"primeiro\",\n        \"primeiros\",\n        \"própria\",\n        \"próprias\",\n        \"próprio\",\n        \"próprios\",\n        \"próxima\",\n        \"próximas\",\n        \"próximo\",\n        \"próximos\",\n        \"puderam\",\n        \"quáis\",\n        \"qual\",\n        \"quando\",\n        \"quanto\",\n        \"quarta\",\n        \"quarto\",\n        \"quatro\",\n        \"que\",\n        \"quê\",\n        \"quem\",\n        \"quer\",\n        \"quereis\",\n        \"querem\",\n        \"queremas\",\n        \"queres\",\n        \"quero\",\n        \"questão\",\n        \"quinta\",\n        \"quinto\",\n        \"quinze\",\n        \"relação\",\n        \"sabe\",\n        \"sabem\",\n        \"são\",\n        \"se\",\n        \"segunda\",\n        \"segundo\",\n        \"sei\",\n        \"seis\",\n        \"sem\",\n        \"sempre\",\n        \"ser\",\n        \"seria\",\n        \"sete\",\n        \"sétima\",\n        \"sétimo\",\n        \"seu\",\n        \"seus\",\n        \"sexta\",\n        \"sexto\",\n        \"sim\",\n        \"sistema\",\n        \"sob\",\n        \"sobre\",\n        \"sois\",\n        \"somos\",\n        \"sou\",\n        \"sua\",\n        \"suas\",\n        \"tal\",\n        \"talvez\",\n        \"também\",\n        \"tanta\",\n        \"tantas\",\n        \"tanto\",\n        \"tão\",\n        \"tarde\",\n        \"te\",\n        \"tem\",\n        \"têm\",\n        \"temos\",\n        \"tendes\",\n        \"tenho\",\n        \"tens\",\n        \"ter\",\n        \"terceira\",\n        \"terceiro\",\n        \"teu\",\n        \"teus\",\n        \"teve\",\n        \"tive\",\n        \"tivemos\",\n        \"tiveram\",\n        \"tiveste\",\n        \"tivestes\",\n        \"toda\",\n        \"todas\",\n        \"todo\",\n        \"todos\",\n        \"trabalho\",\n        \"três\",\n        \"treze\",\n        \"tu\",\n        \"tua\",\n        \"tuas\",\n        \"tudo\",\n        \"um\",\n        \"uma\",\n        \"umas\",\n        \"uns\",\n        \"vai\",\n        \"vais\",\n        \"vão\",\n        \"vários\",\n        \"vem\",\n        \"vêm\",\n        \"vens\",\n        \"ver\",\n        \"vez\",\n        \"vezes\",\n        \"viagem\",\n        \"vindo\",\n        \"vinte\",\n        \"você\",\n        \"vocês\",\n        \"vos\",\n        \"vós\",\n        \"vossa\",\n        \"vossas\",\n        \"vosso\",\n        \"vossos\",\n        \"zero\"\n    ]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/pt.js\n// module id = 402\n// module chunks = 176202273623472","/**\n * Created by jan on 9-3-15.\n */\n// Russian stopwords\n// via https://code.google.com/p/stop-words/\n\nmodule.exports = {\n    stopwords: [\n        \"а\",\n        \"е\",\n        \"и\",\n        \"ж\",\n        \"м\",\n        \"о\",\n        \"на\",\n        \"не\",\n        \"ни\",\n        \"об\",\n        \"но\",\n        \"он\",\n        \"мне\",\n        \"мои\",\n        \"мож\",\n        \"она\",\n        \"они\",\n        \"оно\",\n        \"мной\",\n        \"много\",\n        \"многочисленное\",\n        \"многочисленная\",\n        \"многочисленные\",\n        \"многочисленный\",\n        \"мною\",\n        \"мой\",\n        \"мог\",\n        \"могут\",\n        \"можно\",\n        \"может\",\n        \"можхо\",\n        \"мор\",\n        \"моя\",\n        \"моё\",\n        \"мочь\",\n        \"над\",\n        \"нее\",\n        \"оба\",\n        \"нам\",\n        \"нем\",\n        \"нами\",\n        \"ними\",\n        \"мимо\",\n        \"немного\",\n        \"одной\",\n        \"одного\",\n        \"менее\",\n        \"однажды\",\n        \"однако\",\n        \"меня\",\n        \"нему\",\n        \"меньше\",\n        \"ней\",\n        \"наверху\",\n        \"него\",\n        \"ниже\",\n        \"мало\",\n        \"надо\",\n        \"один\",\n        \"одиннадцать\",\n        \"одиннадцатый\",\n        \"назад\",\n        \"наиболее\",\n        \"недавно\",\n        \"миллионов\",\n        \"недалеко\",\n        \"между\",\n        \"низко\",\n        \"меля\",\n        \"нельзя\",\n        \"нибудь\",\n        \"непрерывно\",\n        \"наконец\",\n        \"никогда\",\n        \"никуда\",\n        \"нас\",\n        \"наш\",\n        \"нет\",\n        \"нею\",\n        \"неё\",\n        \"них\",\n        \"мира\",\n        \"наша\",\n        \"наше\",\n        \"наши\",\n        \"ничего\",\n        \"начала\",\n        \"нередко\",\n        \"несколько\",\n        \"обычно\",\n        \"опять\",\n        \"около\",\n        \"мы\",\n        \"ну\",\n        \"нх\",\n        \"от\",\n        \"отовсюду\",\n        \"особенно\",\n        \"нужно\",\n        \"очень\",\n        \"отсюда\",\n        \"в\",\n        \"во\",\n        \"вон\",\n        \"вниз\",\n        \"внизу\",\n        \"вокруг\",\n        \"вот\",\n        \"восемнадцать\",\n        \"восемнадцатый\",\n        \"восемь\",\n        \"восьмой\",\n        \"вверх\",\n        \"вам\",\n        \"вами\",\n        \"важное\",\n        \"важная\",\n        \"важные\",\n        \"важный\",\n        \"вдали\",\n        \"везде\",\n        \"ведь\",\n        \"вас\",\n        \"ваш\",\n        \"ваша\",\n        \"ваше\",\n        \"ваши\",\n        \"впрочем\",\n        \"весь\",\n        \"вдруг\",\n        \"вы\",\n        \"все\",\n        \"второй\",\n        \"всем\",\n        \"всеми\",\n        \"времени\",\n        \"время\",\n        \"всему\",\n        \"всего\",\n        \"всегда\",\n        \"всех\",\n        \"всею\",\n        \"всю\",\n        \"вся\",\n        \"всё\",\n        \"всюду\",\n        \"г\",\n        \"год\",\n        \"говорил\",\n        \"говорит\",\n        \"года\",\n        \"году\",\n        \"где\",\n        \"да\",\n        \"ее\",\n        \"за\",\n        \"из\",\n        \"ли\",\n        \"же\",\n        \"им\",\n        \"до\",\n        \"по\",\n        \"ими\",\n        \"под\",\n        \"иногда\",\n        \"довольно\",\n        \"именно\",\n        \"долго\",\n        \"позже\",\n        \"более\",\n        \"должно\",\n        \"пожалуйста\",\n        \"значит\",\n        \"иметь\",\n        \"больше\",\n        \"пока\",\n        \"ему\",\n        \"имя\",\n        \"пор\",\n        \"пора\",\n        \"потом\",\n        \"потому\",\n        \"после\",\n        \"почему\",\n        \"почти\",\n        \"посреди\",\n        \"ей\",\n        \"два\",\n        \"две\",\n        \"двенадцать\",\n        \"двенадцатый\",\n        \"двадцать\",\n        \"двадцатый\",\n        \"двух\",\n        \"его\",\n        \"дел\",\n        \"или\",\n        \"без\",\n        \"день\",\n        \"занят\",\n        \"занята\",\n        \"занято\",\n        \"заняты\",\n        \"действительно\",\n        \"давно\",\n        \"девятнадцать\",\n        \"девятнадцатый\",\n        \"девять\",\n        \"девятый\",\n        \"даже\",\n        \"алло\",\n        \"жизнь\",\n        \"далеко\",\n        \"близко\",\n        \"здесь\",\n        \"дальше\",\n        \"для\",\n        \"лет\",\n        \"зато\",\n        \"даром\",\n        \"первый\",\n        \"перед\",\n        \"затем\",\n        \"зачем\",\n        \"лишь\",\n        \"десять\",\n        \"десятый\",\n        \"ею\",\n        \"её\",\n        \"их\",\n        \"бы\",\n        \"еще\",\n        \"при\",\n        \"был\",\n        \"про\",\n        \"процентов\",\n        \"против\",\n        \"просто\",\n        \"бывает\",\n        \"бывь\",\n        \"если\",\n        \"люди\",\n        \"была\",\n        \"были\",\n        \"было\",\n        \"будем\",\n        \"будет\",\n        \"будете\",\n        \"будешь\",\n        \"прекрасно\",\n        \"буду\",\n        \"будь\",\n        \"будто\",\n        \"будут\",\n        \"ещё\",\n        \"пятнадцать\",\n        \"пятнадцатый\",\n        \"друго\",\n        \"другое\",\n        \"другой\",\n        \"другие\",\n        \"другая\",\n        \"других\",\n        \"есть\",\n        \"пять\",\n        \"быть\",\n        \"лучше\",\n        \"пятый\",\n        \"к\",\n        \"ком\",\n        \"конечно\",\n        \"кому\",\n        \"кого\",\n        \"когда\",\n        \"которой\",\n        \"которого\",\n        \"которая\",\n        \"которые\",\n        \"который\",\n        \"которых\",\n        \"кем\",\n        \"каждое\",\n        \"каждая\",\n        \"каждые\",\n        \"каждый\",\n        \"кажется\",\n        \"как\",\n        \"какой\",\n        \"какая\",\n        \"кто\",\n        \"кроме\",\n        \"куда\",\n        \"кругом\",\n        \"с\",\n        \"т\",\n        \"у\",\n        \"я\",\n        \"та\",\n        \"те\",\n        \"уж\",\n        \"со\",\n        \"то\",\n        \"том\",\n        \"снова\",\n        \"тому\",\n        \"совсем\",\n        \"того\",\n        \"тогда\",\n        \"тоже\",\n        \"собой\",\n        \"тобой\",\n        \"собою\",\n        \"тобою\",\n        \"сначала\",\n        \"только\",\n        \"уметь\",\n        \"тот\",\n        \"тою\",\n        \"хорошо\",\n        \"хотеть\",\n        \"хочешь\",\n        \"хоть\",\n        \"хотя\",\n        \"свое\",\n        \"свои\",\n        \"твой\",\n        \"своей\",\n        \"своего\",\n        \"своих\",\n        \"свою\",\n        \"твоя\",\n        \"твоё\",\n        \"раз\",\n        \"уже\",\n        \"сам\",\n        \"там\",\n        \"тем\",\n        \"чем\",\n        \"сама\",\n        \"сами\",\n        \"теми\",\n        \"само\",\n        \"рано\",\n        \"самом\",\n        \"самому\",\n        \"самой\",\n        \"самого\",\n        \"семнадцать\",\n        \"семнадцатый\",\n        \"самим\",\n        \"самими\",\n        \"самих\",\n        \"саму\",\n        \"семь\",\n        \"чему\",\n        \"раньше\",\n        \"сейчас\",\n        \"чего\",\n        \"сегодня\",\n        \"себе\",\n        \"тебе\",\n        \"сеаой\",\n        \"человек\",\n        \"разве\",\n        \"теперь\",\n        \"себя\",\n        \"тебя\",\n        \"седьмой\",\n        \"спасибо\",\n        \"слишком\",\n        \"так\",\n        \"такое\",\n        \"такой\",\n        \"такие\",\n        \"также\",\n        \"такая\",\n        \"сих\",\n        \"тех\",\n        \"чаще\",\n        \"четвертый\",\n        \"через\",\n        \"часто\",\n        \"шестой\",\n        \"шестнадцать\",\n        \"шестнадцатый\",\n        \"шесть\",\n        \"четыре\",\n        \"четырнадцать\",\n        \"четырнадцатый\",\n        \"сколько\",\n        \"сказал\",\n        \"сказала\",\n        \"сказать\",\n        \"ту\",\n        \"ты\",\n        \"три\",\n        \"эта\",\n        \"эти\",\n        \"что\",\n        \"это\",\n        \"чтоб\",\n        \"этом\",\n        \"этому\",\n        \"этой\",\n        \"этого\",\n        \"чтобы\",\n        \"этот\",\n        \"стал\",\n        \"туда\",\n        \"этим\",\n        \"этими\",\n        \"рядом\",\n        \"тринадцать\",\n        \"тринадцатый\",\n        \"этих\",\n        \"третий\",\n        \"тут\",\n        \"эту\",\n        \"суть\",\n        \"чуть\",\n        \"тысяч\"\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/ru.js\n// module id = 403\n// module chunks = 176202273623472","/**\n * Created by jan on 9-3-15.\n */\n// Swedish stopwords\n// http://www.ranks.nl/stopwords/swedish\n// https://github.com/AlexGustafsson\n\nmodule.exports = {\n    stopwords: [\n        \"aderton\",\n        \"adertonde\",\n        \"adjö\",\n        \"aldrig\",\n        \"alla\",\n        \"allas\",\n        \"allt\",\n        \"alltid\",\n        \"alltså\",\n        \"än\",\n        \"andra\",\n        \"andras\",\n        \"annan\",\n        \"annat\",\n        \"ännu\",\n        \"artonde\",\n        \"artonn\",\n        \"åtminstone\",\n        \"att\",\n        \"åtta\",\n        \"åttio\",\n        \"åttionde\",\n        \"åttonde\",\n        \"av\",\n        \"även\",\n        \"båda\",\n        \"bådas\",\n        \"bakom\",\n        \"bara\",\n        \"bäst\",\n        \"bättre\",\n        \"behöva\",\n        \"behövas\",\n        \"behövde\",\n        \"behövt\",\n        \"beslut\",\n        \"beslutat\",\n        \"beslutit\",\n        \"bland\",\n        \"blev\",\n        \"bli\",\n        \"blir\",\n        \"blivit\",\n        \"bort\",\n        \"borta\",\n        \"bra\",\n        \"då\",\n        \"dag\",\n        \"dagar\",\n        \"dagarna\",\n        \"dagen\",\n        \"där\",\n        \"därför\",\n        \"de\",\n        \"del\",\n        \"delen\",\n        \"dem\",\n        \"den\",\n        \"deras\",\n        \"dess\",\n        \"det\",\n        \"detta\",\n        \"dig\",\n        \"din\",\n        \"dina\",\n        \"dit\",\n        \"ditt\",\n        \"dock\",\n        \"du\",\n        \"efter\",\n        \"eftersom\",\n        \"elfte\",\n        \"eller\",\n        \"elva\",\n        \"en\",\n        \"enkel\",\n        \"enkelt\",\n        \"enkla\",\n        \"enligt\",\n        \"er\",\n        \"era\",\n        \"ert\",\n        \"ett\",\n        \"ettusen\",\n        \"få\",\n        \"fanns\",\n        \"får\",\n        \"fått\",\n        \"fem\",\n        \"femte\",\n        \"femtio\",\n        \"femtionde\",\n        \"femton\",\n        \"femtonde\",\n        \"fick\",\n        \"fin\",\n        \"finnas\",\n        \"finns\",\n        \"fjärde\",\n        \"fjorton\",\n        \"fjortonde\",\n        \"fler\",\n        \"flera\",\n        \"flesta\",\n        \"följande\",\n        \"för\",\n        \"före\",\n        \"förlåt\",\n        \"förra\",\n        \"första\",\n        \"fram\",\n        \"framför\",\n        \"från\",\n        \"fyra\",\n        \"fyrtio\",\n        \"fyrtionde\",\n        \"gå\",\n        \"gälla\",\n        \"gäller\",\n        \"gällt\",\n        \"går\",\n        \"gärna\",\n        \"gått\",\n        \"genast\",\n        \"genom\",\n        \"gick\",\n        \"gjorde\",\n        \"gjort\",\n        \"god\",\n        \"goda\",\n        \"godare\",\n        \"godast\",\n        \"gör\",\n        \"göra\",\n        \"gott\",\n        \"ha\",\n        \"hade\",\n        \"haft\",\n        \"han\",\n        \"hans\",\n        \"har\",\n        \"här\",\n        \"heller\",\n        \"hellre\",\n        \"helst\",\n        \"helt\",\n        \"henne\",\n        \"hennes\",\n        \"hit\",\n        \"hög\",\n        \"höger\",\n        \"högre\",\n        \"högst\",\n        \"hon\",\n        \"honom\",\n        \"hundra\",\n        \"hundraen\",\n        \"hundraett\",\n        \"hur\",\n        \"i\",\n        \"ibland\",\n        \"idag\",\n        \"igår\",\n        \"igen\",\n        \"imorgon\",\n        \"in\",\n        \"inför\",\n        \"inga\",\n        \"ingen\",\n        \"ingenting\",\n        \"inget\",\n        \"innan\",\n        \"inne\",\n        \"inom\",\n        \"inte\",\n        \"inuti\",\n        \"ja\",\n        \"jag\",\n        \"jämfört\",\n        \"kan\",\n        \"kanske\",\n        \"knappast\",\n        \"kom\",\n        \"komma\",\n        \"kommer\",\n        \"kommit\",\n        \"kr\",\n        \"kunde\",\n        \"kunna\",\n        \"kunnat\",\n        \"kvar\",\n        \"länge\",\n        \"längre\",\n        \"långsam\",\n        \"långsammare\",\n        \"långsammast\",\n        \"långsamt\",\n        \"längst\",\n        \"långt\",\n        \"lätt\",\n        \"lättare\",\n        \"lättast\",\n        \"legat\",\n        \"ligga\",\n        \"ligger\",\n        \"lika\",\n        \"likställd\",\n        \"likställda\",\n        \"lilla\",\n        \"lite\",\n        \"liten\",\n        \"litet\",\n        \"man\",\n        \"många\",\n        \"måste\",\n        \"med\",\n        \"mellan\",\n        \"men\",\n        \"mer\",\n        \"mera\",\n        \"mest\",\n        \"mig\",\n        \"min\",\n        \"mina\",\n        \"mindre\",\n        \"minst\",\n        \"mitt\",\n        \"mittemot\",\n        \"möjlig\",\n        \"möjligen\",\n        \"möjligt\",\n        \"möjligtvis\",\n        \"mot\",\n        \"mycket\",\n        \"någon\",\n        \"någonting\",\n        \"något\",\n        \"några\",\n        \"när\",\n        \"nästa\",\n        \"ned\",\n        \"nederst\",\n        \"nedersta\",\n        \"nedre\",\n        \"nej\",\n        \"ner\",\n        \"ni\",\n        \"nio\",\n        \"nionde\",\n        \"nittio\",\n        \"nittionde\",\n        \"nitton\",\n        \"nittonde\",\n        \"nödvändig\",\n        \"nödvändiga\",\n        \"nödvändigt\",\n        \"nödvändigtvis\",\n        \"nog\",\n        \"noll\",\n        \"nr\",\n        \"nu\",\n        \"nummer\",\n        \"och\",\n        \"också\",\n        \"ofta\",\n        \"oftast\",\n        \"olika\",\n        \"olikt\",\n        \"om\",\n        \"oss\",\n        \"över\",\n        \"övermorgon\",\n        \"överst\",\n        \"övre\",\n        \"på\",\n        \"rakt\",\n        \"rätt\",\n        \"redan\",\n        \"redigera\",\n        \"så\",\n        \"sade\",\n        \"säga\",\n        \"säger\",\n        \"sagt\",\n        \"samma\",\n        \"sämre\",\n        \"sämst\",\n        \"se\",\n        \"sedan\",\n        \"senare\",\n        \"senast\",\n        \"sent\",\n        \"sex\",\n        \"sextio\",\n        \"sextionde\",\n        \"sexton\",\n        \"sextonde\",\n        \"sig\",\n        \"sin\",\n        \"sina\",\n        \"sist\",\n        \"sista\",\n        \"siste\",\n        \"sitt\",\n        \"sjätte\",\n        \"sju\",\n        \"sjunde\",\n        \"sjuttio\",\n        \"sjuttionde\",\n        \"sjutton\",\n        \"sjuttonde\",\n        \"ska\",\n        \"skall\",\n        \"skulle\",\n        \"slutligen\",\n        \"små\",\n        \"smått\",\n        \"snart\",\n        \"som\",\n        \"stor\",\n        \"stora\",\n        \"större\",\n        \"störst\",\n        \"stort\",\n        \"tack\",\n        \"tidig\",\n        \"tidigare\",\n        \"tidigast\",\n        \"tidigt\",\n        \"till\",\n        \"tills\",\n        \"tillsammans\",\n        \"tio\",\n        \"tionde\",\n        \"tjugo\",\n        \"tjugoen\",\n        \"tjugoett\",\n        \"tjugonde\",\n        \"tjugotre\",\n        \"tjugotvå\",\n        \"tjungo\",\n        \"tolfte\",\n        \"tolv\",\n        \"tre\",\n        \"tredje\",\n        \"trettio\",\n        \"trettionde\",\n        \"tretton\",\n        \"trettonde\",\n        \"två\",\n        \"tvåhundra\",\n        \"under\",\n        \"upp\",\n        \"ur\",\n        \"ursäkt\",\n        \"ut\",\n        \"utan\",\n        \"utanför\",\n        \"ute\",\n        \"vad\",\n        \"vänster\",\n        \"vänstra\",\n        \"vår\",\n        \"vara\",\n        \"våra\",\n        \"varför\",\n        \"varifrån\",\n        \"varit\",\n        \"varken\",\n        \"värre\",\n        \"varsågod\",\n        \"vart\",\n        \"vårt\",\n        \"vem\",\n        \"vems\",\n        \"verkligen\",\n        \"vi\",\n        \"vid\",\n        \"vidare\",\n        \"viktig\",\n        \"viktigare\",\n        \"viktigast\",\n        \"viktigt\",\n        \"vilka\",\n        \"vilken\",\n        \"vilket\",\n        \"vill\",\n        \"är\",\n        \"år\",\n\n        \"även\",\n        \"dessa\",\n        \"wikitext\",\n        \"wikipedia\",\n        \"tyngre\",\n        \"tung\",\n        \"tyngst\",\n        \"kall\",\n        \"var\",\n        \"minimum\",\n        \"min\",\n        \"max\",\n        \"maximum\",\n        \"ökning\",\n        \"öka\",\n        \"kallar\",\n        \"hjälp\",\n        \"använder\",\n        \"betydligt\",\n        \"sätt\",\n        \"denna\",\n        \"detta\",\n        \"det\",\n        \"hjälpa\",\n        \"används\",\n        \"består\",\n        \"tränger\",\n        \"igenom\",\n        \"denna\",\n        \"utöka\",\n        \"utarmat\",\n        \"ungefär\",\n        \"sprids\",\n        \"betydligt\",\n        \"omgivande\",\n        \"via\",\n        \"huvudartikel\",\n        \"exempel\",\n        \"exempelvis\",\n        \"vanligt\",\n        \"per\",\n        \"största\",\n        \"stor\",\n        \"ord\",\n        \"ordet\",\n        \"kallas\",\n        \"påbörjad\",\n        \"höra\",\n        \"främst\",\n        \"ihop\",\n        \"antalet\",\n        \"the\",\n        \"uttryck\",\n        \"uttrycket\",\n        \"ändra\",\n        \"presenteras\",\n        \"presenterades\",\n        \"tänka\",\n        \"delar\",\n        \"söka\",\n        \"hämta\",\n        \"innehåll\",\n        \"definera\",\n        \"använda\",\n        \"pekar\",\n        \"istället\",\n        \"stället\",\n        \"pekar\",\n        \"standard\",\n        \"vanligaste\",\n        \"heter\",\n        \"precist\",\n        \"felaktigt\",\n        \"källor\",\n        \"höga\",\n        \"mottagare\",\n        \"eng\",\n        \"bildade\",\n        \"bytte\",\n        \"bildades\",\n        \"grundades\",\n        \"svar\",\n        \"betyder\",\n        \"betydelse\",\n        \"möjligheter\",\n        \"möjlig\",\n        \"möjlighet\",\n        \"syfte\",\n        \"gamla\",\n        \"tioårig\",\n        \"år\",\n        \"övergångsperiod\",\n        \"ersättas\",\n        \"användes\",\n        \"används\",\n        \"utgörs\",\n        \"drygt\",\n        \"alla\",\n        \"allt\",\n        \"alltså\",\n        \"andra\",\n        \"att\",\n        \"bara\",\n        \"bli\",\n        \"blir\",\n        \"borde\",\n        \"bra\",\n        \"mitt\",\n        \"ser\",\n        \"dem\",\n        \"den\",\n        \"denna\",\n        \"det\",\n        \"detta\",\n        \"dig\",\n        \"din\",\n        \"dock\",\n        \"dom\",\n        \"där\",\n        \"edit\",\n        \"efter\",\n        \"eftersom\",\n        \"eller\",\n        \"ett\",\n        \"fast\",\n        \"fel\",\n        \"fick\",\n        \"finns\",\n        \"fram\",\n        \"från\",\n        \"får\",\n        \"fått\",\n        \"för\",\n        \"första\",\n        \"genom\",\n        \"ger\",\n        \"går\",\n        \"gör\",\n        \"göra\",\n        \"hade\",\n        \"han\",\n        \"har\",\n        \"hela\",\n        \"helt\",\n        \"honom\",\n        \"hur\",\n        \"här\",\n        \"iaf\",\n        \"igen\",\n        \"ingen\",\n        \"inget\",\n        \"inte\",\n        \"jag\",\n        \"kan\",\n        \"kanske\",\n        \"kommer\",\n        \"lika\",\n        \"lite\",\n        \"man\",\n        \"med\",\n        \"men\",\n        \"mer\",\n        \"mig\",\n        \"min\",\n        \"mot\",\n        \"mycket\",\n        \"många\",\n        \"måste\",\n        \"nog\",\n        \"när\",\n        \"någon\",\n        \"något\",\n        \"några\",\n        \"nån\",\n        \"nåt\",\n        \"och\",\n        \"också\",\n        \"rätt\",\n        \"samma\",\n        \"sedan\",\n        \"sen\",\n        \"sig\",\n        \"sin\",\n        \"själv\",\n        \"ska\",\n        \"skulle\",\n        \"som\",\n        \"sätt\",\n        \"tar\",\n        \"till\",\n        \"tror\",\n        \"tycker\",\n        \"typ\",\n        \"upp\",\n        \"utan\",\n        \"vad\",\n        \"var\",\n        \"vara\",\n        \"vet\",\n        \"vid\",\n        \"vilket\",\n        \"vill\",\n        \"väl\",\n        \"även\",\n        \"över\",\n        \"förekommer\",\n        \"varierar\",\n        \"representera\",\n        \"representerar\",\n        \"itu\",\n        \"påbörjades\",\n        \"le\",\n        \"åtgärder\",\n        \"åtgärd\",\n        \"sådant\",\n        \"särskilt\",\n        \"eftersom\",\n        \"som\",\n        \"efter\",\n        \"syftet\",\n        \"syfte\",\n        \"ersatts\",\n        \"ersätts\",\n        \"ersatt\",\n        \"ersätt\",\n        \"tagits\",\n        \"byter\",\n        \"benämningar\",\n        \"ler\",\n        \"ärvs\",\n        \"ärv\",\n        \"ärvd\",\n        \"januari\",\n        \"februari\",\n        \"mars\",\n        \"april\",\n        \"maj\",\n        \"juni\",\n        \"juli\",\n        \"augusti\",\n        \"september\",\n        \"oktober\",\n        \"november\",\n        \"december\",\n        \"on\",\n        \"övriga\",\n        \"använts\",\n        \"använd\",\n        \"används\",\n        \"använt\",\n        \"syftar\",\n        \"ex\",\n        \"svårt\",\n        \"svår\",\n        \"lätt\",\n        \"lätta\",\n        \"lättast\",\n        \"lättare\",\n        \"svårare\",\n        \"svårast\",\n        \"list\",\n        \"användningsområde\",\n        \"användningsområden\",\n        \"vissa\",\n        \"ii\",\n        \"hembyggda\",\n        \"krav\",\n        \"lugnt\",\n        \"ändå\",\n        \"stycken\",\n        \"styck\",\n        \"långa\",\n        \"korta\",\n        \"små\",\n        \"stora\",\n        \"smala\",\n        \"tjocka\",\n        \"början\",\n        \"tungt\",\n        \"lätt\",\n        \"tim\",\n        \"st\",\n        \"kg\",\n        \"km\",\n        \"tid\",\n        \"ny\",\n        \"gammal\",\n        \"nyare\",\n        \"antal\",\n        \"snabbare\",\n        \"började\",\n        \"ansvar\",\n        \"ansvarar\",\n        \"både\",\n        \"ca\",\n        \"låg\",\n        \"hög\",\n        \"ro\",\n        \"ton\",\n        \"kap\",\n        \"of\",\n        \"and\",\n        \"vars\",\n        \"kr/km\",\n        \"rör\",\n        \"gällande\",\n        \"placeras\",\n        \"placerades\",\n        \"täckt\",\n        \"samt\",\n        \"hos\",\n        \"sådana\",\n        \"endast\",\n        \"tillstånd\",\n        \"beror\",\n        \"på\",\n        \"marken\",\n        \"minska\",\n        \"orsaker\",\n        \"lösningar\",\n        \"problem\",\n        \"namn\",\n        \"förväntas\",\n        \"förväntan\",\n        \"förväntats\",\n        \"varning\",\n        \"utfärdas\",\n        \"utfärda\",\n        \"km/h\",\n        \"nådde\",\n        \"stod\",\n        \"området\",\n        \"områden\",\n        \"källa\",\n        \"behövs\",\n        \"drabbade\",\n        \"drabbat\",\n        \"which\",\n        \"top\",\n        \"that\",\n        \"lägre\",\n        \"allmänt\",\n        \"drog\",\n        \"drar\",\n        \"enorma\",\n        \"ända\",\n        \"enda\",\n        \"officiella\",\n        \"bekräftats\",\n        \"bekräftas\",\n        \"fall\",\n        \"sjunker\",\n        \"nedåt\",\n        \"värms\",\n        \"samtidigt\",\n        \"efterföljd\",\n        \"problematik\",\n        \"uppåt\",\n        \"utom\",\n        \"förutom\",\n        \"hörnet\",\n        \"söt\",\n        \"salt\",\n        \"svag\",\n        \"stark\",\n        \"ren\",\n        \"smutsig\",\n        \"förr\",\n        \"tiden\",\n        \"mångdag\",\n        \"tisdag\",\n        \"onsdag\",\n        \"torsdag\",\n        \"fredag\",\n        \"lördag\",\n        \"söndag\",\n        \"måndagar\",\n        \"tisdagar\",\n        \"onsdagar\",\n        \"torsdagar\",\n        \"fredagar\",\n        \"lördagar\",\n        \"söndagar\",\n        \"efterlikna\",\n        \"som\",\n        \"lik\",\n        \"bergis\",\n        \"bekymmer\",\n        \"så\",\n        \"lista\",\n        \"dig\",\n        \"dej\",\n        \"mig\",\n        \"mej\",\n        \"fri\",\n        \"vanlig\",\n        \"ovanlig\",\n        \"sällan\",\n        \"ofta\",\n        \"avskiljs\",\n        \"use\",\n        \"släkte\",\n        \"släktet\",\n        \"släkt\",\n        \"kategori\",\n        \"kategoriseras\",\n        \"rensas\",\n        \"renas\",\n        \"timmar\",\n        \"minuter\",\n        \"sekunder\"\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/se.js\n// module id = 404\n// module chunks = 176202273623472","module.exports = {\n\tdanish: require(\"./da\").stopwords,\n\tdutch: require(\"./nl\").stopwords,\n\tenglish: require(\"./en\").stopwords,\n\tfrench: require(\"./fr\").stopwords,\n\tgalician: require(\"./gl\").stopwords,\n\tgerman: require(\"./de\").stopwords,\n\titalian: require(\"./it\").stopwords,\n\tpolish: require(\"./pl\").stopwords,\n\tportuguese: require(\"./pt\").stopwords,\n\trussian: require(\"./ru\").stopwords,\n\tspanish: require(\"./es\").stopwords,\n\tswedish: require(\"./se\").stopwords\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keyword-extractor/lib/stopwords/stopwords.js\n// module id = 405\n// module chunks = 176202273623472","//  Underscore.string\n//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>\n//  Underscore.string is freely distributable under the terms of the MIT license.\n//  Documentation: https://github.com/epeli/underscore.string\n//  Some code is borrowed from MooTools and Alexandru Marasteanu.\n//  Version '2.3.2'\n\n!function(root, String){\n  'use strict';\n\n  // Defining helper functions.\n\n  var nativeTrim = String.prototype.trim;\n  var nativeTrimRight = String.prototype.trimRight;\n  var nativeTrimLeft = String.prototype.trimLeft;\n\n  var parseNumber = function(source) { return source * 1 || 0; };\n\n  var strRepeat = function(str, qty){\n    if (qty < 1) return '';\n    var result = '';\n    while (qty > 0) {\n      if (qty & 1) result += str;\n      qty >>= 1, str += str;\n    }\n    return result;\n  };\n\n  var slice = [].slice;\n\n  var defaultToWhiteSpace = function(characters) {\n    if (characters == null)\n      return '\\\\s';\n    else if (characters.source)\n      return characters.source;\n    else\n      return '[' + _s.escapeRegExp(characters) + ']';\n  };\n\n  // Helper for toBoolean\n  function boolMatch(s, matchers) {\n    var i, matcher, down = s.toLowerCase();\n    matchers = [].concat(matchers);\n    for (i = 0; i < matchers.length; i += 1) {\n      matcher = matchers[i];\n      if (!matcher) continue;\n      if (matcher.test && matcher.test(s)) return true;\n      if (matcher.toLowerCase() === down) return true;\n    }\n  }\n\n  var escapeChars = {\n    lt: '<',\n    gt: '>',\n    quot: '\"',\n    amp: '&',\n    apos: \"'\"\n  };\n\n  var reversedEscapeChars = {};\n  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;\n  reversedEscapeChars[\"'\"] = '#39';\n\n  // sprintf() for JavaScript 0.7-beta1\n  // http://www.diveintojavascript.com/projects/javascript-sprintf\n  //\n  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\n  // All rights reserved.\n\n  var sprintf = (function() {\n    function get_type(variable) {\n      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n    }\n\n    var str_repeat = strRepeat;\n\n    var str_format = function() {\n      if (!str_format.cache.hasOwnProperty(arguments[0])) {\n        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n      }\n      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n    };\n\n    str_format.format = function(parse_tree, argv) {\n      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n      for (i = 0; i < tree_length; i++) {\n        node_type = get_type(parse_tree[i]);\n        if (node_type === 'string') {\n          output.push(parse_tree[i]);\n        }\n        else if (node_type === 'array') {\n          match = parse_tree[i]; // convenience purposes only\n          if (match[2]) { // keyword argument\n            arg = argv[cursor];\n            for (k = 0; k < match[2].length; k++) {\n              if (!arg.hasOwnProperty(match[2][k])) {\n                throw new Error(sprintf('[_.sprintf] property \"%s\" does not exist', match[2][k]));\n              }\n              arg = arg[match[2][k]];\n            }\n          } else if (match[1]) { // positional argument (explicit)\n            arg = argv[match[1]];\n          }\n          else { // positional argument (implicit)\n            arg = argv[cursor++];\n          }\n\n          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));\n          }\n          switch (match[8]) {\n            case 'b': arg = arg.toString(2); break;\n            case 'c': arg = String.fromCharCode(arg); break;\n            case 'd': arg = parseInt(arg, 10); break;\n            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n            case 'o': arg = arg.toString(8); break;\n            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n            case 'u': arg = Math.abs(arg); break;\n            case 'x': arg = arg.toString(16); break;\n            case 'X': arg = arg.toString(16).toUpperCase(); break;\n          }\n          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n          pad_length = match[6] - String(arg).length;\n          pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n          output.push(match[5] ? arg + pad : pad + arg);\n        }\n      }\n      return output.join('');\n    };\n\n    str_format.cache = {};\n\n    str_format.parse = function(fmt) {\n      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n      while (_fmt) {\n        if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n          parse_tree.push(match[0]);\n        }\n        else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n          parse_tree.push('%');\n        }\n        else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n          if (match[2]) {\n            arg_names |= 1;\n            var field_list = [], replacement_field = match[2], field_match = [];\n            if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n              field_list.push(field_match[1]);\n              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                  field_list.push(field_match[1]);\n                }\n                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                  field_list.push(field_match[1]);\n                }\n                else {\n                  throw new Error('[_.sprintf] huh?');\n                }\n              }\n            }\n            else {\n              throw new Error('[_.sprintf] huh?');\n            }\n            match[2] = field_list;\n          }\n          else {\n            arg_names |= 2;\n          }\n          if (arg_names === 3) {\n            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');\n          }\n          parse_tree.push(match);\n        }\n        else {\n          throw new Error('[_.sprintf] huh?');\n        }\n        _fmt = _fmt.substring(match[0].length);\n      }\n      return parse_tree;\n    };\n\n    return str_format;\n  })();\n\n\n\n  // Defining underscore.string\n\n  var _s = {\n\n    VERSION: '2.3.0',\n\n    isBlank: function(str){\n      if (str == null) str = '';\n      return (/^\\s*$/).test(str);\n    },\n\n    stripTags: function(str){\n      if (str == null) return '';\n      return String(str).replace(/<\\/?[^>]+>/g, '');\n    },\n\n    capitalize : function(str){\n      str = str == null ? '' : String(str);\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n\n    chop: function(str, step){\n      if (str == null) return [];\n      str = String(str);\n      step = ~~step;\n      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\n    },\n\n    clean: function(str){\n      return _s.strip(str).replace(/\\s+/g, ' ');\n    },\n\n    count: function(str, substr){\n      if (str == null || substr == null) return 0;\n\n      str = String(str);\n      substr = String(substr);\n\n      var count = 0,\n        pos = 0,\n        length = substr.length;\n\n      while (true) {\n        pos = str.indexOf(substr, pos);\n        if (pos === -1) break;\n        count++;\n        pos += length;\n      }\n\n      return count;\n    },\n\n    chars: function(str) {\n      if (str == null) return [];\n      return String(str).split('');\n    },\n\n    swapCase: function(str) {\n      if (str == null) return '';\n      return String(str).replace(/\\S/g, function(c){\n        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n      });\n    },\n\n    escapeHTML: function(str) {\n      if (str == null) return '';\n      return String(str).replace(/[&<>\"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });\n    },\n\n    unescapeHTML: function(str) {\n      if (str == null) return '';\n      return String(str).replace(/\\&([^;]+);/g, function(entity, entityCode){\n        var match;\n\n        if (entityCode in escapeChars) {\n          return escapeChars[entityCode];\n        } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n          return String.fromCharCode(parseInt(match[1], 16));\n        } else if (match = entityCode.match(/^#(\\d+)$/)) {\n          return String.fromCharCode(~~match[1]);\n        } else {\n          return entity;\n        }\n      });\n    },\n\n    escapeRegExp: function(str){\n      if (str == null) return '';\n      return String(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n    },\n\n    splice: function(str, i, howmany, substr){\n      var arr = _s.chars(str);\n      arr.splice(~~i, ~~howmany, substr);\n      return arr.join('');\n    },\n\n    insert: function(str, i, substr){\n      return _s.splice(str, i, 0, substr);\n    },\n\n    include: function(str, needle){\n      if (needle === '') return true;\n      if (str == null) return false;\n      return String(str).indexOf(needle) !== -1;\n    },\n\n    join: function() {\n      var args = slice.call(arguments),\n        separator = args.shift();\n\n      if (separator == null) separator = '';\n\n      return args.join(separator);\n    },\n\n    lines: function(str) {\n      if (str == null) return [];\n      return String(str).split(\"\\n\");\n    },\n\n    reverse: function(str){\n      return _s.chars(str).reverse().join('');\n    },\n\n    startsWith: function(str, starts){\n      if (starts === '') return true;\n      if (str == null || starts == null) return false;\n      str = String(str); starts = String(starts);\n      return str.length >= starts.length && str.slice(0, starts.length) === starts;\n    },\n\n    endsWith: function(str, ends){\n      if (ends === '') return true;\n      if (str == null || ends == null) return false;\n      str = String(str); ends = String(ends);\n      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;\n    },\n\n    succ: function(str){\n      if (str == null) return '';\n      str = String(str);\n      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);\n    },\n\n    titleize: function(str){\n      if (str == null) return '';\n      str  = String(str).toLowerCase();\n      return str.replace(/(?:^|\\s|-)\\S/g, function(c){ return c.toUpperCase(); });\n    },\n\n    camelize: function(str){\n      return _s.trim(str).replace(/[-_\\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : \"\"; });\n    },\n\n    underscored: function(str){\n      return _s.trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n    },\n\n    dasherize: function(str){\n      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n    },\n\n    classify: function(str){\n      return _s.titleize(String(str).replace(/[\\W_]/g, ' ')).replace(/\\s/g, '');\n    },\n\n    humanize: function(str){\n      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));\n    },\n\n    trim: function(str, characters){\n      if (str == null) return '';\n      if (!characters && nativeTrim) return nativeTrim.call(str);\n      characters = defaultToWhiteSpace(characters);\n      return String(str).replace(new RegExp('\\^' + characters + '+|' + characters + '+$', 'g'), '');\n    },\n\n    ltrim: function(str, characters){\n      if (str == null) return '';\n      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);\n      characters = defaultToWhiteSpace(characters);\n      return String(str).replace(new RegExp('^' + characters + '+'), '');\n    },\n\n    rtrim: function(str, characters){\n      if (str == null) return '';\n      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);\n      characters = defaultToWhiteSpace(characters);\n      return String(str).replace(new RegExp(characters + '+$'), '');\n    },\n\n    truncate: function(str, length, truncateStr){\n      if (str == null) return '';\n      str = String(str); truncateStr = truncateStr || '...';\n      length = ~~length;\n      return str.length > length ? str.slice(0, length) + truncateStr : str;\n    },\n\n    /**\n     * _s.prune: a more elegant version of truncate\n     * prune extra chars, never leaving a half-chopped word.\n     * @author github.com/rwz\n     */\n    prune: function(str, length, pruneStr){\n      if (str == null) return '';\n\n      str = String(str); length = ~~length;\n      pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n      if (str.length <= length) return str;\n\n      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },\n        template = str.slice(0, length+1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n      if (template.slice(template.length-2).match(/\\w\\w/))\n        template = template.replace(/\\s*\\S+$/, '');\n      else\n        template = _s.rtrim(template.slice(0, template.length-1));\n\n      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;\n    },\n\n    words: function(str, delimiter) {\n      if (_s.isBlank(str)) return [];\n      return _s.trim(str, delimiter).split(delimiter || /\\s+/);\n    },\n\n    pad: function(str, length, padStr, type) {\n      str = str == null ? '' : String(str);\n      length = ~~length;\n\n      var padlen  = 0;\n\n      if (!padStr)\n        padStr = ' ';\n      else if (padStr.length > 1)\n        padStr = padStr.charAt(0);\n\n      switch(type) {\n        case 'right':\n          padlen = length - str.length;\n          return str + strRepeat(padStr, padlen);\n        case 'both':\n          padlen = length - str.length;\n          return strRepeat(padStr, Math.ceil(padlen/2)) + str\n                  + strRepeat(padStr, Math.floor(padlen/2));\n        default: // 'left'\n          padlen = length - str.length;\n          return strRepeat(padStr, padlen) + str;\n        }\n    },\n\n    lpad: function(str, length, padStr) {\n      return _s.pad(str, length, padStr);\n    },\n\n    rpad: function(str, length, padStr) {\n      return _s.pad(str, length, padStr, 'right');\n    },\n\n    lrpad: function(str, length, padStr) {\n      return _s.pad(str, length, padStr, 'both');\n    },\n\n    sprintf: sprintf,\n\n    vsprintf: function(fmt, argv){\n      argv.unshift(fmt);\n      return sprintf.apply(null, argv);\n    },\n\n    toNumber: function(str, decimals) {\n      if (!str) return 0;\n      str = _s.trim(str);\n      if (!str.match(/^-?\\d+(?:\\.\\d+)?$/)) return NaN;\n      return parseNumber(parseNumber(str).toFixed(~~decimals));\n    },\n\n    numberFormat : function(number, dec, dsep, tsep) {\n      if (isNaN(number) || number == null) return '';\n\n      number = number.toFixed(~~dec);\n      tsep = typeof tsep == 'string' ? tsep : ',';\n\n      var parts = number.split('.'), fnums = parts[0],\n        decimals = parts[1] ? (dsep || '.') + parts[1] : '';\n\n      return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;\n    },\n\n    strRight: function(str, sep){\n      if (str == null) return '';\n      str = String(str); sep = sep != null ? String(sep) : sep;\n      var pos = !sep ? -1 : str.indexOf(sep);\n      return ~pos ? str.slice(pos+sep.length, str.length) : str;\n    },\n\n    strRightBack: function(str, sep){\n      if (str == null) return '';\n      str = String(str); sep = sep != null ? String(sep) : sep;\n      var pos = !sep ? -1 : str.lastIndexOf(sep);\n      return ~pos ? str.slice(pos+sep.length, str.length) : str;\n    },\n\n    strLeft: function(str, sep){\n      if (str == null) return '';\n      str = String(str); sep = sep != null ? String(sep) : sep;\n      var pos = !sep ? -1 : str.indexOf(sep);\n      return ~pos ? str.slice(0, pos) : str;\n    },\n\n    strLeftBack: function(str, sep){\n      if (str == null) return '';\n      str += ''; sep = sep != null ? ''+sep : sep;\n      var pos = str.lastIndexOf(sep);\n      return ~pos ? str.slice(0, pos) : str;\n    },\n\n    toSentence: function(array, separator, lastSeparator, serial) {\n      separator = separator || ', ';\n      lastSeparator = lastSeparator || ' and ';\n      var a = array.slice(), lastMember = a.pop();\n\n      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;\n\n      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;\n    },\n\n    toSentenceSerial: function() {\n      var args = slice.call(arguments);\n      args[3] = true;\n      return _s.toSentence.apply(_s, args);\n    },\n\n    slugify: function(str) {\n      if (str == null) return '';\n\n      var from  = \"ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź\",\n          to    = \"aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz\",\n          regex = new RegExp(defaultToWhiteSpace(from), 'g');\n\n      str = String(str).toLowerCase().replace(regex, function(c){\n        var index = from.indexOf(c);\n        return to.charAt(index) || '-';\n      });\n\n      return _s.dasherize(str.replace(/[^\\w\\s-]/g, ''));\n    },\n\n    surround: function(str, wrapper) {\n      return [wrapper, str, wrapper].join('');\n    },\n\n    quote: function(str, quoteChar) {\n      return _s.surround(str, quoteChar || '\"');\n    },\n\n    unquote: function(str, quoteChar) {\n      quoteChar = quoteChar || '\"';\n      if (str[0] === quoteChar && str[str.length-1] === quoteChar)\n        return str.slice(1,str.length-1);\n      else return str;\n    },\n\n    exports: function() {\n      var result = {};\n\n      for (var prop in this) {\n        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;\n        result[prop] = this[prop];\n      }\n\n      return result;\n    },\n\n    repeat: function(str, qty, separator){\n      if (str == null) return '';\n\n      qty = ~~qty;\n\n      // using faster implementation if separator is not needed;\n      if (separator == null) return strRepeat(String(str), qty);\n\n      // this one is about 300x slower in Google Chrome\n      for (var repeat = []; qty > 0; repeat[--qty] = str) {}\n      return repeat.join(separator);\n    },\n\n    naturalCmp: function(str1, str2){\n      if (str1 == str2) return 0;\n      if (!str1) return -1;\n      if (!str2) return 1;\n\n      var cmpRegex = /(\\.\\d+)|(\\d+)|(\\D+)/g,\n        tokens1 = String(str1).toLowerCase().match(cmpRegex),\n        tokens2 = String(str2).toLowerCase().match(cmpRegex),\n        count = Math.min(tokens1.length, tokens2.length);\n\n      for(var i = 0; i < count; i++) {\n        var a = tokens1[i], b = tokens2[i];\n\n        if (a !== b){\n          var num1 = parseInt(a, 10);\n          if (!isNaN(num1)){\n            var num2 = parseInt(b, 10);\n            if (!isNaN(num2) && num1 - num2)\n              return num1 - num2;\n          }\n          return a < b ? -1 : 1;\n        }\n      }\n\n      if (tokens1.length === tokens2.length)\n        return tokens1.length - tokens2.length;\n\n      return str1 < str2 ? -1 : 1;\n    },\n\n    levenshtein: function(str1, str2) {\n      if (str1 == null && str2 == null) return 0;\n      if (str1 == null) return String(str2).length;\n      if (str2 == null) return String(str1).length;\n\n      str1 = String(str1); str2 = String(str2);\n\n      var current = [], prev, value;\n\n      for (var i = 0; i <= str2.length; i++)\n        for (var j = 0; j <= str1.length; j++) {\n          if (i && j)\n            if (str1.charAt(j - 1) === str2.charAt(i - 1))\n              value = prev;\n            else\n              value = Math.min(current[j], current[j - 1], prev) + 1;\n          else\n            value = i + j;\n\n          prev = current[j];\n          current[j] = value;\n        }\n\n      return current.pop();\n    },\n\n    toBoolean: function(str, trueValues, falseValues) {\n      if (typeof str === \"number\") str = \"\" + str;\n      if (typeof str !== \"string\") return !!str;\n      str = _s.trim(str);\n      if (boolMatch(str, trueValues || [\"true\", \"1\"])) return true;\n      if (boolMatch(str, falseValues || [\"false\", \"0\"])) return false;\n    }\n  };\n\n  // Aliases\n\n  _s.strip    = _s.trim;\n  _s.lstrip   = _s.ltrim;\n  _s.rstrip   = _s.rtrim;\n  _s.center   = _s.lrpad;\n  _s.rjust    = _s.lpad;\n  _s.ljust    = _s.rpad;\n  _s.contains = _s.include;\n  _s.q        = _s.quote;\n  _s.toBool   = _s.toBoolean;\n\n  // Exporting\n\n  // CommonJS module is defined\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports)\n      module.exports = _s;\n\n    exports._s = _s;\n  }\n\n  // Register as a named module with AMD.\n  if (typeof define === 'function' && define.amd)\n    define('underscore.string', [], function(){ return _s; });\n\n\n  // Integrate with Underscore.js if defined\n  // or create our own underscore object.\n  root._ = root._ || {};\n  root._.string = root._.str = _s;\n}(this, String);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/underscore.string/lib/underscore.string.js\n// module id = 522\n// module chunks = 176202273623472","//     Underscore.js 1.7.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.7.0';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var createCallback = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  _.iteratee = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return createCallback(value, context, argCount);\n    if (_.isObject(value)) return _.matches(value);\n    return _.property(value);\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    if (obj == null) return obj;\n    iteratee = createCallback(iteratee, context);\n    var i, length = obj.length;\n    if (length === +length) {\n      for (i = 0; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    if (obj == null) return [];\n    iteratee = _.iteratee(iteratee, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length),\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = createCallback(iteratee, context, 4);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index = 0, currentKey;\n    if (arguments.length < 3) {\n      if (!length) throw new TypeError(reduceError);\n      memo = obj[keys ? keys[index++] : index++];\n    }\n    for (; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = createCallback(iteratee, context, 4);\n    var keys = obj.length !== + obj.length && _.keys(obj),\n        index = (keys || obj).length,\n        currentKey;\n    if (arguments.length < 3) {\n      if (!index) throw new TypeError(reduceError);\n      memo = obj[keys ? keys[--index] : --index];\n    }\n    while (index--) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var result;\n    predicate = _.iteratee(predicate, context);\n    _.some(obj, function(value, index, list) {\n      if (predicate(value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    if (obj == null) return results;\n    predicate = _.iteratee(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(_.iteratee(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    if (obj == null) return true;\n    predicate = _.iteratee(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    if (obj == null) return false;\n    predicate = _.iteratee(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (obj.length !== +obj.length) obj = _.values(obj);\n    return _.indexOf(obj, target) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matches(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matches(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = _.iteratee(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = _.iteratee(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = _.iteratee(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = _.iteratee(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = _.iteratee(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = low + high >>> 1;\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return obj.length === +obj.length ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = _.iteratee(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    if (n < 0) return [];\n    return slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return slice.call(array, Math.max(array.length - n, 0));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    for (var i = 0, length = input.length; i < length; i++) {\n      var value = input[i];\n      if (!_.isArray(value) && !_.isArguments(value)) {\n        if (!strict) output.push(value);\n      } else if (shallow) {\n        push.apply(output, value);\n      } else {\n        flatten(value, shallow, strict, output);\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = _.iteratee(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i];\n      if (isSorted) {\n        if (!i || seen !== value) result.push(value);\n        seen = value;\n      } else if (iteratee) {\n        var computed = iteratee(value, i, array);\n        if (_.indexOf(seen, computed) < 0) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (_.indexOf(result, value) < 0) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true, []));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    if (array == null) return [];\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = array.length; i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(slice.call(arguments, 1), true, true, []);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function(array) {\n    if (array == null) return [];\n    var length = _.max(arguments, 'length').length;\n    var results = Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var idx = array.length;\n    if (typeof from == 'number') {\n      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);\n    }\n    while (--idx >= 0) if (array[idx] === item) return idx;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var Ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    args = slice.call(arguments, 2);\n    bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      Ctor.prototype = func.prototype;\n      var self = new Ctor;\n      Ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (_.isObject(result)) return result;\n      return self;\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    return function() {\n      var position = 0;\n      var args = boundArgs.slice();\n      for (var i = 0, length = args.length; i < length; i++) {\n        if (args[i] === _) args[i] = arguments[position++];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return func.apply(this, args);\n    };\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = hasher ? hasher.apply(this, arguments) : key;\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last > 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed before being called N times.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      } else {\n        func = null;\n      }\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n      source = arguments[i];\n      for (prop in source) {\n        if (hasOwnProperty.call(source, prop)) {\n            obj[prop] = source[prop];\n        }\n      }\n    }\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj, iteratee, context) {\n    var result = {}, key;\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      iteratee = createCallback(iteratee, context);\n      for (key in obj) {\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n      }\n    } else {\n      var keys = concat.apply([], slice.call(arguments, 1));\n      obj = new Object(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        key = keys[i];\n        if (key in obj) result[key] = obj[key];\n      }\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n      var source = arguments[i];\n      for (var prop in source) {\n        if (obj[prop] === void 0) obj[prop] = source[prop];\n      }\n    }\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (\n      aCtor !== bCtor &&\n      // Handle Object.create(x) cases\n      'constructor' in a && 'constructor' in b &&\n      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n        _.isFunction(bCtor) && bCtor instanceof bCtor)\n    ) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size, result;\n    // Recursively compare objects and arrays.\n    if (className === '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size === b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      size = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      result = _.keys(b).length === size;\n      if (result) {\n        while (size--) {\n          // Deep compare each member\n          key = keys[size];\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.\n  if (typeof /./ !== 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n  _.matches = function(attrs) {\n    var pairs = _.pairs(attrs), length = pairs.length;\n    return function(obj) {\n      if (obj == null) return !length;\n      obj = new Object(obj);\n      for (var i = 0; i < length; i++) {\n        var pair = pairs[i], key = pair[0];\n        if (pair[1] !== obj[key] || !(key in obj)) return false;\n      }\n      return true;\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = createCallback(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? object[property]() : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/underscore/underscore.js\n// module id = 523\n// module chunks = 176202273623472","import React, { Component } from \"react\";\nimport styles from './advanced-search-result.module.css'\nimport { Button, Modal } from 'react-bootstrap'\n\nfunction SearchList(props) {\n    const results = props.results;\n    console.log(results);\n\n    //let resultsList = [];\n    \n    let resultsList = results.map((item, index) =>\n        <div className={styles.podcast}>\n            <h4>{item.title}</h4>\n            <Button bsStyle=\"link\">\n                <a href={item.url}>link to podcast</a>\n            </Button>\n        </div>\n    );\n    \n    return (\n        <div id=\"resultslist\" style={{height: '30vh', overflowY: 'auto'}}>\n            <ul>{resultsList}</ul>\n        </div>\n    );\n}\n\nclass AdvSearchResult extends Component {\n    constructor(props) {\n        super(props);\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            word: this.props.word,\n            result: this.props.result\n        };\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    render() {\n        return (\n            <div className={styles.card}>\n                <h4>{this.state.word}</h4>\n                <Button bsStyle=\"default\" onClick={this.handleShow}>show podcasts</Button>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.word}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <SearchList results={this.state.result}></SearchList>\n                    </Modal.Body>\n                </Modal>\n            </div>        \n        );\n    }\n}\n\nexport default AdvSearchResult\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/advanced-search-result.js","// removed by extract-text-webpack-plugin\nmodule.exports = {\"card\":\"src-components----advanced-search-result-module---card---Ap0yd\",\"podcast\":\"src-components----advanced-search-result-module---podcast---fsGue\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/advanced-search-result.module.css\n// module id = 349\n// module chunks = 176202273623472","import React, { Component } from \"react\";\nimport AdvSearchResult from \"./advanced-search-result\"\nimport { Form, FormGroup, FormControl, ControlLabel, Button } from 'react-bootstrap'\n\nconst axios = require('axios');\nconst baseUrl = \"https://www.gpodder.net\";\nconst ke = require(\"keyword-extractor\");\n\nfunction AdvSearchList(props) {\n    const results = props.results;\n\n    let resultsList = results.map((item, index) =>\n        <AdvSearchResult key={index} word={item[0]} result={item[1]}></AdvSearchResult>\n    );\n\n    return (\n        <div style={{ width: '50vh', height: '50vh', overflowY: 'auto' }}>\n            <ul>{resultsList}</ul>\n        </div>\n    );\n}\n\nclass DescSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { duplicates: [], properNouns: [] };\n        this.search = this.search.bind(this);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.parseDescriptions = this.parseDescriptions.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        this.search(this.state.value);\n        event.preventDefault();\n    }\n\n    search(term) {\n        axios.get(baseUrl + \"/search.json\", {\n            params: {\n                q: term\n            }\n        })\n            .then((response) => {\n                this.parseDescriptions(response.data);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n\n    parseDescriptions(data) {\n        let allWords = new Map();\n        let allProperNouns = new Map();\n        for (let i = 0; i < data.length; i++) {\n\n            let desc = data[i].description;\n            var extraction_result = ke.extract(desc, {\n                language: \"english\",\n                remove_digits: true,\n                return_changed_case: false,\n                remove_duplicates: false\n            });\n\n            for (let j = 0; j < extraction_result.length; j++) {\n                let word = extraction_result[j];\n                let char = word.charAt(0);\n\n                if (word.length > 2) {\n                    if (char == char.toUpperCase() && typeof (char) != \"number\") {\n                        if (!allProperNouns.has(word)) {\n                            allProperNouns.set(word, [data[i]]);\n                        }\n                        else {\n                            allProperNouns.get(word).push(data[i]);\n                        }\n                    }\n                    else {\n                        if (!allWords.has(word)) {\n                            allWords.set(word, [data[i]]);\n                        }\n                        else {\n                            allWords.get(word).push(data[i]);\n                        }\n                    }           \n                }\n            }\n        }\n\n        let duplicates = new Map();\n        allWords.forEach(function (value, key) {\n            if (value.length > 4) {\n                duplicates.set(key, value);\n            }\n        });\n\n        let properNouns = new Map();\n        allProperNouns.forEach(function (value, key) {\n            if (value.length > 4) {\n                properNouns.set(key, value);\n            }\n        });\n\n        this.setState({ duplicates: Array.from(duplicates), properNouns: Array.from(properNouns) });\n    }\n\n    render() {\n        return (\n            <div style={{ display: 'flex-column', justifyContent: 'center' }}>\n                <Form inline onSubmit={(e) => this.handleSubmit(e)}>\n                    <FormGroup controlId=\"formInlineQuery\">\n                        <ControlLabel style={{ marginRight: '5px', marginTop: '5px', marginBottom: '5px' }}>term:</ControlLabel>\n                        <FormControl style={{ marginTop: '5px', marginBottom: '5px' }} type=\"text\" onChange={this.handleChange} />\n                    </FormGroup>{' '}\n                    <Button bsStyle=\"primary\" style={{ marginTop: '5px', marginBottom: '5px' }} type=\"submit\">search</Button>\n                </Form>\n\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                    <div style={{margin: '10px'}}>\n                        <h4>most observed description phrases</h4>\n                        <AdvSearchList results={this.state.duplicates}></AdvSearchList>\n                    </div>\n                    <div style={{margin: '10px'}}>\n                        <h4>most observed proper nouns</h4>\n                        <AdvSearchList results={this.state.properNouns}></AdvSearchList>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DescSearch;\n\n\n// WEBPACK FOOTER //\n// ./src/components/advanced-search.js","import React from 'react'\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap'\nimport DescSearch from '../components/advanced-search';\n\nconst AdvancedSearchPage = () => (\n  <div className=\"container\" style={{width: '100%', textAlign: 'center'}}>\n    <h3>deep search for podcasts by term</h3>\n    <Tab.Container id=\"search-type\" defaultActiveKey=\"first\">\n      <div>\n        <Row className=\"clearfix\" key=\"type\">\n          <Col sm={12}>\n            <Nav bsStyle=\"pills\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n              <NavItem eventKey=\"desc\">by description</NavItem>\n            </Nav>\n          </Col>\n        </Row>\n        <Row className=\"clearfix\" key=\"content\">\n          <Col sm={12}>\n            <Tab.Content animation>\n              <Tab.Pane eventKey=\"desc\">\n                <DescSearch></DescSearch>\n              </Tab.Pane>\n            </Tab.Content>\n          </Col>\n        </Row>\n      </div>\n    </Tab.Container>\n  </div>\n)\n\nexport default AdvancedSearchPage\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/advanced.js"],"sourceRoot":""}